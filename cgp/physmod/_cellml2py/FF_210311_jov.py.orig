# Size of variable arrays:
sizeAlgebraic = 129
sizeStates = 43
sizeConstants = 142
from math import *
from numpy import *

def createLegends():
    legend_states = [""] * sizeStates
    legend_rates = [""] * sizeStates
    legend_algebraic = [""] * sizeAlgebraic
    legend_voi = ""
    legend_constants = [""] * sizeConstants
    legend_VOI = "time in component environment (millisecond)"
    legend_states[0] = "V in component cell (millivolt)"
    legend_constants[0] = "Cm in component cell (microF_per_cm2)"
    legend_constants[1] = "Vmyo in component cell (microlitre)"
    legend_constants[2] = "VJSR in component cell (microlitre)"
    legend_constants[3] = "VNSR in component cell (microlitre)"
    legend_constants[4] = "Vjc in component cell (microlitre)"
    legend_constants[5] = "Vsl in component cell (microlitre)"
    legend_constants[6] = "Atot in component cell (cm2)"
    legend_constants[7] = "TT_ratio in component cell (dimensionless)"
    legend_constants[123] = "Asl in component cell (cm2)"
    legend_constants[124] = "Ajc in component cell (cm2)"
    legend_constants[8] = "Ko in component cell (micromolar)"
    legend_constants[9] = "Nao in component cell (micromolar)"
    legend_constants[10] = "Cao in component cell (micromolar)"
    legend_constants[11] = "Clo in component cell (micromolar)"
    legend_constants[12] = "R in component cell (joule_per_mole_kelvin)"
    legend_constants[13] = "T in component cell (kelvin)"
    legend_constants[14] = "F in component cell (coulomb_per_millimole)"
    legend_algebraic[59] = "i_CaL in component L_type_calcium_current (picoA_per_picoF)"
    legend_algebraic[64] = "i_PMCA in component calcium_pump_current (picoA_per_picoF)"
    legend_algebraic[73] = "i_NCX in component sodium_calcium_exchange_current (picoA_per_picoF)"
    legend_algebraic[82] = "i_Cab in component calcium_background_current (picoA_per_picoF)"
    legend_algebraic[92] = "i_Na in component fast_sodium_current (picoA_per_picoF)"
    legend_algebraic[95] = "i_Nab in component sodium_background_current (picoA_per_picoF)"
    legend_algebraic[101] = "i_Kto_f in component fast_transient_outward_K_I (picoA_per_picoF)"
    legend_algebraic[102] = "i_K1 in component time_independent_K_I (picoA_per_picoF)"
    legend_algebraic[100] = "i_Ks in component slow_delayed_rectifier_K_I (picoA_per_picoF)"
    legend_algebraic[98] = "i_Kur in component ultra_rapidly_activating_delayed_rectifier_K_I (picoA_per_picoF)"
    legend_algebraic[99] = "i_Kss in component non_inactivating_steady_state_K_I (picoA_per_picoF)"
    legend_algebraic[116] = "i_ClCa in component calcium_activated_chloride_current (picoA_per_picoF)"
    legend_algebraic[96] = "i_Kr in component rapid_delayed_rectifier_K_I (picoA_per_picoF)"
    legend_constants[15] = "stim_offset in component cell (millisecond)"
    legend_constants[16] = "stim_period in component cell (millisecond)"
    legend_constants[17] = "stim_duration in component cell (millisecond)"
    legend_constants[18] = "stim_amplitude in component cell (picoA_per_picoF)"
    legend_algebraic[14] = "i_Stim in component cell (picoA_per_picoF)"
    legend_algebraic[0] = "past in component cell (millisecond)"
    legend_algebraic[113] = "i_NKA in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_algebraic[117] = "i_cl in component chloride_current_constant_field (picoA_per_picoF)"
    legend_algebraic[118] = "i_anion in component anion_flux (picoA_per_picoF)"
    legend_algebraic[68] = "i_PMCA_proton in component calcium_pump_current (picoA_per_picoF)"
    legend_states[1] = "Cai in component calcium_concentration (micromolar)"
    legend_states[2] = "Cajc in component calcium_concentration (micromolar)"
    legend_states[3] = "Casl in component calcium_concentration (micromolar)"
    legend_states[4] = "CaJSR in component calcium_concentration (micromolar)"
    legend_states[5] = "CaNSR in component calcium_concentration (micromolar)"
    legend_algebraic[26] = "Bi in component calcium_concentration (dimensionless)"
    legend_algebraic[31] = "Bsl in component calcium_concentration (dimensionless)"
    legend_algebraic[35] = "Bjc in component calcium_concentration (dimensionless)"
    legend_algebraic[39] = "BJSR in component calcium_concentration (dimensionless)"
    legend_constants[19] = "Bmax in component calcium_concentration (micromolar)"
    legend_constants[20] = "CSQN_tot in component calcium_concentration (micromolar)"
    legend_constants[21] = "Kd_buffer in component calcium_concentration (micromolar)"
    legend_constants[22] = "Km_CSQN in component calcium_concentration (micromolar)"
    legend_algebraic[80] = "i_Cab_sl in component calcium_background_current (picoA_per_picoF)"
    legend_algebraic[78] = "i_Cab_jc in component calcium_background_current (picoA_per_picoF)"
    legend_algebraic[56] = "i_CaL_sl in component L_type_calcium_current (picoA_per_picoF)"
    legend_algebraic[53] = "i_CaL_jc in component L_type_calcium_current (picoA_per_picoF)"
    legend_algebraic[71] = "i_NCX_sl in component sodium_calcium_exchange_current (picoA_per_picoF)"
    legend_algebraic[70] = "i_NCX_jc in component sodium_calcium_exchange_current (picoA_per_picoF)"
    legend_algebraic[61] = "i_PMCA_sl in component calcium_pump_current (picoA_per_picoF)"
    legend_algebraic[63] = "i_PMCA_jc in component calcium_pump_current (picoA_per_picoF)"
    legend_algebraic[47] = "J_leak in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[45] = "J_rel in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[54] = "J_serca in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[51] = "J_tr in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[41] = "JCa_jcsl in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[43] = "JCa_slcyt in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[1] = "CaSR in component calcium_concentration (micromolar)"
    legend_algebraic[81] = "JCa_sl in component calcium_concentration (micromolar_per_millisecond)"
    legend_algebraic[79] = "JCa_jc in component calcium_concentration (micromolar_per_millisecond)"
    legend_states[6] = "P_RyR in component calcium_fluxes (dimensionless)"
    legend_constants[23] = "V_rel in component calcium_fluxes (per_millisecond)"
    legend_constants[24] = "tau_tr in component calcium_fluxes (millisecond)"
    legend_constants[25] = "V_leak in component calcium_fluxes (per_millisecond)"
    legend_constants[26] = "Km_up in component calcium_fluxes (micromolar)"
    legend_constants[27] = "i_CaL_max in component L_type_calcium_current (picoA_per_picoF)"
    legend_states[7] = "P_O1 in component ryanodine_receptors (dimensionless)"
    legend_states[8] = "P_O2 in component ryanodine_receptors (dimensionless)"
    legend_constants[28] = "A_PRyR in component calcium_fluxes (per_millisecond)"
    legend_constants[29] = "B_PRyR in component calcium_fluxes (per_millisecond)"
    legend_algebraic[2] = "P_open in component calcium_fluxes (dimensionless)"
    legend_algebraic[57] = "J_netup in component calcium_fluxes (micromolar_per_millisecond)"
    legend_constants[125] = "tau_Ca_slcyt in component calcium_fluxes (millisecond)"
    legend_constants[126] = "tau_Ca_jcsl in component calcium_fluxes (millisecond)"
    legend_constants[30] = "Vup in component calcium_fluxes (micromolar_per_millisecond)"
    legend_constants[31] = "tau_Ca_jcsl_const in component calcium_fluxes (microlitre_per_millisecond)"
    legend_constants[32] = "tau_ca_slcyt_const in component calcium_fluxes (microlitre_per_millisecond)"
    legend_constants[33] = "nH in component calcium_fluxes (dimensionless)"
    legend_algebraic[3] = "P_C1 in component ryanodine_receptors (dimensionless)"
    legend_states[9] = "P_C2 in component ryanodine_receptors (dimensionless)"
    legend_constants[34] = "k_plus_a in component ryanodine_receptors (micromolar4_per_millisecond)"
    legend_constants[35] = "k_minus_a in component ryanodine_receptors (per_millisecond)"
    legend_constants[36] = "k_plus_b in component ryanodine_receptors (micromolar3_per_millisecond)"
    legend_constants[37] = "k_minus_b in component ryanodine_receptors (per_millisecond)"
    legend_constants[38] = "k_plus_c in component ryanodine_receptors (per_millisecond)"
    legend_constants[39] = "k_minus_c in component ryanodine_receptors (per_millisecond)"
    legend_constants[40] = "m in component ryanodine_receptors (dimensionless)"
    legend_constants[41] = "n in component ryanodine_receptors (dimensionless)"
    legend_constants[42] = "P_CaL in component L_type_calcium_current (microlitre_per_millisecond)"
    legend_states[10] = "Ojc in component L_type_calcium_current (dimensionless)"
    legend_states[11] = "Osl in component L_type_calcium_current (dimensionless)"
    legend_algebraic[36] = "Cjc in component L_type_calcium_current (dimensionless)"
    legend_algebraic[37] = "Csl in component L_type_calcium_current (dimensionless)"
    legend_states[12] = "Ijc in component L_type_calcium_current (dimensionless)"
    legend_states[13] = "Isl in component L_type_calcium_current (dimensionless)"
    legend_states[14] = "y_gate in component L_type_calcium_current (dimensionless)"
    legend_algebraic[4] = "y_gate_inf in component L_type_calcium_current (dimensionless)"
    legend_algebraic[15] = "y_gate_tau in component L_type_calcium_current (millisecond)"
    legend_algebraic[16] = "alpha_p in component L_type_calcium_current (per_millisecond)"
    legend_constants[127] = "alpha_m in component L_type_calcium_current (per_millisecond)"
    legend_algebraic[27] = "epsilon_p in component L_type_calcium_current (per_micromolar_millisecond)"
    legend_algebraic[32] = "epsilon_m in component L_type_calcium_current (per_millisecond)"
    legend_constants[43] = "V_L in component L_type_calcium_current (millivolt)"
    legend_constants[44] = "delta_V_L in component L_type_calcium_current (millivolt)"
    legend_constants[45] = "t_L in component L_type_calcium_current (millisecond)"
    legend_constants[46] = "phi_L in component L_type_calcium_current (dimensionless)"
    legend_constants[47] = "a in component L_type_calcium_current (dimensionless)"
    legend_constants[48] = "b in component L_type_calcium_current (dimensionless)"
    legend_constants[49] = "tau_L in component L_type_calcium_current (millisecond)"
    legend_constants[50] = "K_L in component L_type_calcium_current (micromolar)"
    legend_algebraic[5] = "expVL in component L_type_calcium_current (dimensionless)"
    legend_algebraic[48] = "FVRT in component L_type_calcium_current (dimensionless)"
    legend_algebraic[50] = "FVRT_Ca in component L_type_calcium_current (dimensionless)"
    legend_constants[51] = "LCC_C1 in component L_type_calcium_current (millivolt)"
    legend_constants[52] = "LCC_C2 in component L_type_calcium_current (millivolt)"
    legend_constants[53] = "LCC_C3 in component L_type_calcium_current (dimensionless)"
    legend_constants[54] = "LCC_C4 in component L_type_calcium_current (millivolt)"
    legend_constants[55] = "LCC_C5 in component L_type_calcium_current (millivolt)"
    legend_constants[56] = "LCC_C6 in component L_type_calcium_current (millisecond)"
    legend_constants[57] = "LCC_C7 in component L_type_calcium_current (millisecond)"
    legend_constants[58] = "LCC_C8 in component L_type_calcium_current (millivolt)"
    legend_constants[59] = "LCC_C9 in component L_type_calcium_current (millivolt)"
    legend_constants[60] = "i_PMCA_max in component calcium_pump_current (picoA_per_picoF)"
    legend_constants[61] = "Km_PMCA in component calcium_pump_current (micromolar)"
    legend_algebraic[65] = "J_PMCA_sl in component calcium_pump_current (micromolar_per_millisecond)"
    legend_algebraic[66] = "J_PMCA_jc in component calcium_pump_current (micromolar_per_millisecond)"
    legend_algebraic[67] = "J_PMCA_total in component calcium_pump_current (micromolar_per_millisecond)"
    legend_algebraic[69] = "J_PMCA_proton in component calcium_pump_current (micromolar_per_millisecond)"
    legend_constants[62] = "I_NCX_max in component sodium_calcium_exchange_current (picoA_per_picoF)"
    legend_constants[63] = "K_mCao in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[64] = "K_mNai in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[65] = "K_mCai in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[66] = "K_mNao in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[67] = "eta in component sodium_calcium_exchange_current (dimensionless)"
    legend_constants[68] = "K_mAllo in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[69] = "k_sat in component sodium_calcium_exchange_current (dimensionless)"
    legend_states[15] = "Nasl in component sodium_concentration (micromolar)"
    legend_states[16] = "Najc in component sodium_concentration (micromolar)"
    legend_algebraic[76] = "J_NCX_total in component sodium_calcium_exchange_current (micromolar_per_millisecond)"
    legend_algebraic[72] = "J_NCX_sl in component sodium_calcium_exchange_current (micromolar_per_millisecond)"
    legend_algebraic[74] = "J_NCX_jc in component sodium_calcium_exchange_current (micromolar_per_millisecond)"
    legend_constants[70] = "g_Cab in component calcium_background_current (milliS_per_microF)"
    legend_algebraic[75] = "E_Ca_jc in component calcium_background_current (millivolt)"
    legend_algebraic[77] = "E_Ca_sl in component calcium_background_current (millivolt)"
    legend_algebraic[83] = "J_Cab in component calcium_background_current (micromolar_per_millisecond)"
    legend_states[17] = "Nai in component sodium_concentration (micromolar)"
    legend_algebraic[91] = "i_Na_sl in component fast_sodium_current (picoA_per_picoF)"
    legend_algebraic[89] = "i_Na_jc in component fast_sodium_current (picoA_per_picoF)"
    legend_algebraic[112] = "i_NKA_sl in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_algebraic[111] = "i_NKA_jc in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_algebraic[94] = "i_Nab_sl in component sodium_background_current (picoA_per_picoF)"
    legend_algebraic[93] = "i_Nab_jc in component sodium_background_current (picoA_per_picoF)"
    legend_algebraic[86] = "JNa_slcyt in component sodium_concentration (micromolar_per_millisecond)"
    legend_algebraic[87] = "JNa_jcsl in component sodium_concentration (micromolar_per_millisecond)"
    legend_constants[128] = "tau_Na_slcyt in component sodium_concentration (millisecond)"
    legend_constants[129] = "tau_Na_jcsl in component sodium_concentration (millisecond)"
    legend_constants[71] = "Bmax_SL in component sodium_concentration (micromolar)"
    legend_constants[72] = "Bmax_jct in component sodium_concentration (micromolar)"
    legend_constants[73] = "kon in component sodium_concentration (per_micromolar_per_millisecond)"
    legend_constants[74] = "koff in component sodium_concentration (per_millisecond)"
    legend_algebraic[84] = "dNa_jct_buf in component sodium_concentration (micromolar_per_millisecond)"
    legend_algebraic[85] = "dNa_SL_buf in component sodium_concentration (micromolar_per_millisecond)"
    legend_states[18] = "Nasl_buf in component sodium_concentration (micromolar)"
    legend_states[19] = "Najc_buf in component sodium_concentration (micromolar)"
    legend_constants[75] = "tau_Na_jcsl_const in component sodium_concentration (microlitre_per_millisecond)"
    legend_constants[76] = "tau_Na_slcyt_const in component sodium_concentration (microlitre_per_millisecond)"
    legend_algebraic[122] = "Jnhe in component pH_regulation (micromolar_per_millisecond)"
    legend_constants[130] = "Jnbc in component pH_regulation (micromolar_per_millisecond)"
    legend_algebraic[88] = "E_Na_jc in component fast_sodium_current (millivolt)"
    legend_algebraic[90] = "E_Na_sl in component fast_sodium_current (millivolt)"
    legend_constants[77] = "g_Na in component fast_sodium_current (milliS_per_microF)"
    legend_states[20] = "O_Na in component fast_sodium_current (dimensionless)"
    legend_states[21] = "C_Na1 in component fast_sodium_current (dimensionless)"
    legend_states[22] = "C_Na2 in component fast_sodium_current (dimensionless)"
    legend_algebraic[6] = "C_Na3 in component fast_sodium_current (dimensionless)"
    legend_states[23] = "I1_Na in component fast_sodium_current (dimensionless)"
    legend_states[24] = "I2_Na in component fast_sodium_current (dimensionless)"
    legend_states[25] = "IF_Na in component fast_sodium_current (dimensionless)"
    legend_states[26] = "IC_Na2 in component fast_sodium_current (dimensionless)"
    legend_states[27] = "IC_Na3 in component fast_sodium_current (dimensionless)"
    legend_algebraic[17] = "alpha_Na11 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[38] = "beta_Na11 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[28] = "alpha_Na12 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[40] = "beta_Na12 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[33] = "alpha_Na13 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[42] = "beta_Na13 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[44] = "alpha_Na3 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[46] = "beta_Na3 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[49] = "alpha_Na2 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[52] = "beta_Na2 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[55] = "alpha_Na4 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[58] = "beta_Na4 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[60] = "alpha_Na5 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[62] = "beta_Na5 in component fast_sodium_current (per_millisecond)"
    legend_states[28] = "Ki in component potassium_concentration (micromolar)"
    legend_constants[78] = "g_Nab in component sodium_background_current (milliS_per_microF)"
    legend_constants[79] = "g_Kur in component ultra_rapidly_activating_delayed_rectifier_K_I (milliS_per_microF)"
    legend_states[29] = "aur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_states[30] = "iur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[18] = "tau_aur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_algebraic[19] = "tau_iur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_algebraic[97] = "E_K in component fast_transient_outward_K_I (millivolt)"
    legend_algebraic[7] = "ass in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[8] = "iss in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_constants[80] = "tau_i_const in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_constants[81] = "tau_a_const in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_constants[82] = "g_Kss in component non_inactivating_steady_state_K_I (milliS_per_microF)"
    legend_states[31] = "aKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_states[32] = "iKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_algebraic[20] = "tau_Kss in component non_inactivating_steady_state_K_I (millisecond)"
    legend_constants[83] = "g_Kr in component rapid_delayed_rectifier_K_I (milliS_per_microF)"
    legend_states[33] = "O_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_states[34] = "C_K1 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_states[35] = "C_K2 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[9] = "C_K0 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_states[36] = "I_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[21] = "alpha_a0 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[29] = "beta_a0 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[84] = "kb in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[85] = "kf in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[10] = "alpha_a1 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[22] = "beta_a1 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[30] = "alpha_i in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[34] = "beta_i in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[86] = "g_Ks in component slow_delayed_rectifier_K_I (milliS_per_microF)"
    legend_states[37] = "nKs in component slow_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[11] = "alpha_n in component slow_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[23] = "beta_n in component slow_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[87] = "g_Kto_f in component fast_transient_outward_K_I (milliS_per_microF)"
    legend_states[38] = "ato_f in component fast_transient_outward_K_I (dimensionless)"
    legend_states[39] = "ito_f in component fast_transient_outward_K_I (dimensionless)"
    legend_algebraic[12] = "alpha_a in component fast_transient_outward_K_I (per_millisecond)"
    legend_algebraic[24] = "beta_a in component fast_transient_outward_K_I (per_millisecond)"
    legend_algebraic[13] = "itof_iss in component fast_transient_outward_K_I (dimensionless)"
    legend_algebraic[25] = "tau_ito_f in component fast_transient_outward_K_I (millisecond)"
    legend_constants[88] = "alpha_a_const in component fast_transient_outward_K_I (millivolt)"
    legend_constants[89] = "alpha_b_const in component fast_transient_outward_K_I (millivolt)"
    legend_constants[90] = "g_K1 in component time_independent_K_I (milliS_per_microF)"
    legend_algebraic[104] = "i_NKA_alpha1_jc in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_algebraic[105] = "i_NKA_alpha1_sl in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_algebraic[108] = "i_NKA_alpha2_jc in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_algebraic[109] = "i_NKA_alpha2_sl in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_constants[91] = "Km_Ko in component sodium_potassium_pump_current (micromolar)"
    legend_algebraic[103] = "f_NKA_alpha1 in component sodium_potassium_pump_current (dimensionless)"
    legend_algebraic[107] = "f_NKA_alpha2 in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[131] = "sigma in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[92] = "i_NKA_max_alpha1 in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_constants[93] = "i_NKA_max_alpha2 in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_algebraic[106] = "i_NKA_alpha1 in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_algebraic[110] = "i_NKA_alpha2 in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_constants[94] = "nH_NKAalpha1 in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[95] = "nH_NKAalpha2 in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[96] = "Km_Na_alpha1 in component sodium_potassium_pump_current (micromolar)"
    legend_constants[97] = "Km_Na_alpha2 in component sodium_potassium_pump_current (micromolar)"
    legend_algebraic[114] = "J_Na_NKA in component sodium_potassium_pump_current (micromolar_per_millisecond)"
    legend_constants[98] = "g_ClCa in component calcium_activated_chloride_current (milliS_per_microF)"
    legend_algebraic[115] = "O_ClCa in component calcium_activated_chloride_current (dimensionless)"
    legend_constants[99] = "E_Cl in component calcium_activated_chloride_current (millivolt)"
    legend_constants[100] = "Km_Cl in component calcium_activated_chloride_current (micromolar)"
    legend_constants[101] = "p_cl in component chloride_current_constant_field (cm_per_second)"
    legend_states[40] = "Cli in component Cl_concentration (micromolar)"
    legend_algebraic[127] = "Jche in component pH_regulation (micromolar_per_millisecond)"
    legend_constants[132] = "Jae in component pH_regulation (micromolar_per_millisecond)"
    legend_states[41] = "pH_i in component pH_regulation (dimensionless)"
    legend_constants[102] = "B1 in component pH_regulation (micromolar)"
    legend_constants[103] = "B2 in component pH_regulation (micromolar)"
    legend_constants[104] = "pK1 in component pH_regulation (dimensionless)"
    legend_constants[105] = "pK2 in component pH_regulation (dimensionless)"
    legend_constants[106] = "k_f_1_che in component pH_regulation (per_millisecond)"
    legend_constants[107] = "k_r_1_che in component pH_regulation (per_millisecond)"
    legend_constants[108] = "k_f_2_che in component pH_regulation (per_millisecond)"
    legend_constants[133] = "k_r_2_che in component pH_regulation (per_millisecond)"
    legend_constants[109] = "pK_H_che in component pH_regulation (dimensionless)"
    legend_constants[110] = "K_Cl_che in component pH_regulation (micromolar)"
    legend_constants[135] = "K_OH_che in component pH_regulation (micromolar)"
    legend_constants[134] = "Ho in component pH_regulation (micromolar)"
    legend_constants[138] = "OHo in component pH_regulation (micromolar)"
    legend_constants[136] = "JCO2 in component pH_regulation (micromolar_per_millisecond)"
    legend_algebraic[119] = "Hi in component pH_regulation (micromolar)"
    legend_algebraic[123] = "OHi in component pH_regulation (micromolar)"
    legend_algebraic[124] = "beta_f_1_che in component pH_regulation (per_millisecond)"
    legend_constants[139] = "beta_r_1_che in component pH_regulation (per_millisecond)"
    legend_constants[140] = "beta_f_2_che in component pH_regulation (per_millisecond)"
    legend_algebraic[125] = "beta_r_2_che in component pH_regulation (per_millisecond)"
    legend_algebraic[126] = "Jexch_che in component pH_regulation (per_millisecond)"
    legend_algebraic[128] = "beta_i in component pH_regulation (micromolar)"
    legend_constants[137] = "Jhyd in component pH_regulation (micromolar_per_millisecond)"
    legend_constants[111] = "pHo in component pH_regulation (dimensionless)"
    legend_algebraic[120] = "alpha_r_1_nhe in component pH_regulation (per_millisecond)"
    legend_algebraic[121] = "alpha_f_2_nhe in component pH_regulation (per_millisecond)"
    legend_constants[112] = "alpha_f_1_nhe in component pH_regulation (per_millisecond)"
    legend_constants[113] = "alpha_r_2_nhe in component pH_regulation (per_millisecond)"
    legend_constants[114] = "k_r_1_nhe in component pH_regulation (per_millisecond)"
    legend_constants[115] = "k_f_2_nhe in component pH_regulation (per_millisecond)"
    legend_constants[116] = "K_Na_nhe in component pH_regulation (micromolar)"
    legend_constants[117] = "K_H_nhe in component pH_regulation (micromolar)"
    legend_constants[118] = "K_i_nhe in component pH_regulation (micromolar)"
    legend_constants[119] = "nH_nhe in component pH_regulation (dimensionless)"
    legend_constants[120] = "J_acid_flux_in in component pH_regulation (micromolar_per_millisecond)"
    legend_states[42] = "anion_i in component anion_flux (micromolar)"
    legend_constants[121] = "p_anion in component anion_flux (cm_per_second)"
    legend_constants[122] = "anion_o in component anion_flux (micromolar)"
    legend_rates[0] = "d/dt V in component cell (millivolt)"
    legend_rates[3] = "d/dt Casl in component calcium_concentration (micromolar)"
    legend_rates[2] = "d/dt Cajc in component calcium_concentration (micromolar)"
    legend_rates[1] = "d/dt Cai in component calcium_concentration (micromolar)"
    legend_rates[4] = "d/dt CaJSR in component calcium_concentration (micromolar)"
    legend_rates[5] = "d/dt CaNSR in component calcium_concentration (micromolar)"
    legend_rates[6] = "d/dt P_RyR in component calcium_fluxes (dimensionless)"
    legend_rates[7] = "d/dt P_O1 in component ryanodine_receptors (dimensionless)"
    legend_rates[8] = "d/dt P_O2 in component ryanodine_receptors (dimensionless)"
    legend_rates[9] = "d/dt P_C2 in component ryanodine_receptors (dimensionless)"
    legend_rates[10] = "d/dt Ojc in component L_type_calcium_current (dimensionless)"
    legend_rates[11] = "d/dt Osl in component L_type_calcium_current (dimensionless)"
    legend_rates[12] = "d/dt Ijc in component L_type_calcium_current (dimensionless)"
    legend_rates[13] = "d/dt Isl in component L_type_calcium_current (dimensionless)"
    legend_rates[14] = "d/dt y_gate in component L_type_calcium_current (dimensionless)"
    legend_rates[19] = "d/dt Najc_buf in component sodium_concentration (micromolar)"
    legend_rates[18] = "d/dt Nasl_buf in component sodium_concentration (micromolar)"
    legend_rates[17] = "d/dt Nai in component sodium_concentration (micromolar)"
    legend_rates[15] = "d/dt Nasl in component sodium_concentration (micromolar)"
    legend_rates[16] = "d/dt Najc in component sodium_concentration (micromolar)"
    legend_rates[22] = "d/dt C_Na2 in component fast_sodium_current (dimensionless)"
    legend_rates[21] = "d/dt C_Na1 in component fast_sodium_current (dimensionless)"
    legend_rates[20] = "d/dt O_Na in component fast_sodium_current (dimensionless)"
    legend_rates[25] = "d/dt IF_Na in component fast_sodium_current (dimensionless)"
    legend_rates[23] = "d/dt I1_Na in component fast_sodium_current (dimensionless)"
    legend_rates[24] = "d/dt I2_Na in component fast_sodium_current (dimensionless)"
    legend_rates[26] = "d/dt IC_Na2 in component fast_sodium_current (dimensionless)"
    legend_rates[27] = "d/dt IC_Na3 in component fast_sodium_current (dimensionless)"
    legend_rates[28] = "d/dt Ki in component potassium_concentration (micromolar)"
    legend_rates[29] = "d/dt aur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_rates[30] = "d/dt iur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_rates[31] = "d/dt aKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_rates[32] = "d/dt iKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_rates[35] = "d/dt C_K2 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[34] = "d/dt C_K1 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[33] = "d/dt O_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[36] = "d/dt I_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[37] = "d/dt nKs in component slow_delayed_rectifier_K_I (dimensionless)"
    legend_rates[38] = "d/dt ato_f in component fast_transient_outward_K_I (dimensionless)"
    legend_rates[39] = "d/dt ito_f in component fast_transient_outward_K_I (dimensionless)"
    legend_rates[40] = "d/dt Cli in component Cl_concentration (micromolar)"
    legend_rates[41] = "d/dt pH_i in component pH_regulation (dimensionless)"
    legend_rates[42] = "d/dt anion_i in component anion_flux (micromolar)"
    return (legend_states, legend_algebraic, legend_voi, legend_constants)

def initConsts():
    constants = [0.0] * sizeConstants; states = [0.0] * sizeStates;
    states[0] = -78.4408402289277
    constants[0] = 1
    constants[1] = 2.2e-5
    constants[2] = 7.7e-8
    constants[3] = 2.31e-7
    constants[4] = 2.2e-8
    constants[5] = 4.4e-7
    constants[6] = 0.000147
    constants[7] = 0.3
    constants[8] = 5400
    constants[9] = 140000
    constants[10] = 1000
    constants[11] = 148400
    constants[12] = 8.314
    constants[13] = 310
    constants[14] = 96.5
    constants[15] = 0
    constants[16] = 1000
    constants[17] = 3
    constants[18] = -15
    states[1] = 0.0920600046608022
    states[2] = 0.102636345008704
    states[3] = 0.0959178315429579
    states[4] = 224.321013492243
    states[5] = 263.028198475178
    constants[19] = 109
    constants[20] = 50000
    constants[21] = 0.6
    constants[22] = 630
    states[6] = 1.57850637617931e-6
    constants[23] = 4.5
    constants[24] = 20
    constants[25] = 2e-5
    constants[26] = 0.4928
    constants[27] = 7
    states[7] = 0.00148113418686643
    states[8] = 6.72594751341887e-12
    constants[28] = -0.2
    constants[29] = -3
    constants[30] = 0.35
    constants[31] = 4.188e-7
    constants[32] = 2.79e-6
    constants[33] = 2
    states[9] = 0.147262019712039
    constants[34] = 6.075e-6
    constants[35] = 0.07125
    constants[36] = 4.05e-6
    constants[37] = 0.965
    constants[38] = 0.009
    constants[39] = 0.0008
    constants[40] = 3
    constants[41] = 4
    constants[42] = 1.55e-7
    states[10] = 2.59762898127254e-5
    states[11] = 3.30891410011563e-5
    states[12] = 0.368804969209076
    states[13] = 0.196830975628522
    states[14] = 0.975804394131743
    constants[43] = -5
    constants[44] = 8
    constants[45] = 8
    constants[46] = 2.5
    constants[47] = 0.3
    constants[48] = 0.4
    constants[49] = 400
    constants[50] = 0.8
    constants[51] = 33
    constants[52] = 8.23
    constants[53] = 0.1
    constants[54] = 40
    constants[55] = 6
    constants[56] = 5
    constants[57] = 315
    constants[58] = 30
    constants[59] = 4.5
    constants[60] = 0.5644
    constants[61] = 0.3506
    constants[62] = 1.1591
    constants[63] = 1400
    constants[64] = 12000
    constants[65] = 3.6
    constants[66] = 88000
    constants[67] = 0.35
    constants[68] = 0
    constants[69] = 0.27
    states[15] = 9856.50793399085
    states[16] = 9856.3998823716
    constants[70] = 0.0004
    states[17] = 9856.52226480804
    constants[71] = 1650
    constants[72] = 3700
    constants[73] = 1e-7
    constants[74] = 0.001
    states[18] = 819.270566955901
    states[19] = 1837.14382709519
    constants[75] = 2.78e-6
    constants[76] = 4.09e-5
    constants[77] = 16
    states[20] = 2.29434379773156e-6
    states[21] = 0.000530605593964869
    states[22] = 0.0249928276206519
    states[23] = 1.4853626782493e-5
    states[24] = 2.1015270853327e-5
    states[25] = 0.000493368030322518
    states[26] = 0.0232385101938823
    states[27] = 0.458063155872834
    states[28] = 107400.999726574
    constants[78] = 0.0026
    constants[79] = 0.45
    states[29] = 0.0402170417768631
    states[30] = 0.975438288882081
    constants[80] = 643
    constants[81] = 2.058
    constants[82] = 0.0596
    states[31] = 0.144658439951846
    states[32] = 1
    constants[83] = 0.0165
    states[33] = 0.00998370532455207
    states[34] = 0.00132198751228035
    states[35] = 0.000975590081730094
    states[36] = 0.00119718270134946
    constants[84] = 0.036778
    constants[85] = 0.023761
    constants[86] = 0.00575
    states[37] = 0.00151772541131693
    constants[87] = 0.4
    states[38] = 0.016859897787803
    states[39] = 0.995542247521451
    constants[88] = 45
    constants[89] = 45
    constants[90] = 0.35
    constants[91] = 1500
    constants[92] = 5.2
    constants[93] = 1.95
    constants[94] = 3
    constants[95] = 3
    constants[96] = 21000
    constants[97] = 21000
    constants[98] = 10
    constants[99] = -40
    constants[100] = 10
    constants[101] = 1.3e-8
    states[40] = 20617.0212761731
    states[41] = 7.12528415585512
    constants[102] = 84200
    constants[103] = 29400
    constants[104] = 6.03
    constants[105] = 7.57
    constants[106] = 0.00429
    constants[107] = 0.25
    constants[108] = 0.0681
    constants[109] = 7.95
    constants[110] = 18000000
    constants[111] = 7.4
    constants[112] = 0.00197
    constants[113] = 0.000818
    constants[114] = 1.1724
    constants[115] = 0.01415
    constants[116] = 21490
    constants[117] = 0.0001778
    constants[118] = 0.4111
    constants[119] = 2.9053
    constants[120] = 0
    states[42] = 2.38771167345587e-32
    constants[121] = 1e-7
    constants[122] = 0
    constants[123] = constants[6]*(1.00000-constants[7])
    constants[124] = constants[6]*constants[7]
    constants[125] = (constants[32]/constants[1])**(-1.00000)
    constants[126] = (constants[31]/constants[5])**(-1.00000)
    constants[127] = constants[46]/constants[45]
    constants[128] = (constants[76]/constants[1])**(-1.00000)
    constants[129] = (constants[75]/constants[5])**(-1.00000)
    constants[130] = 0.000000
    constants[131] = (1.00000/7.00000)*((exp((constants[9]/67300.0)))-1.00000)
    constants[132] = 0.000000
    constants[133] = (constants[108]*constants[106])/constants[107]
    constants[134] = (10.0000**(-constants[111]))*1.00000e+006
    constants[135] = (10.0000**(-(14.0000-constants[109])))*1.00000e+006
    constants[136] = 0.000000
    constants[137] = 0.000000
    constants[141] = 0.000000
    constants[138] = (10.0000**(-14.0000+constants[111]))*1.00000e+006
    constants[139] = (constants[107]*constants[110]*constants[138])/(constants[135]*constants[110]+constants[110]*constants[138]+constants[135]*constants[11])
    constants[140] = (constants[108]*constants[135]*constants[11])/(constants[135]*constants[110]+constants[110]*constants[138]+constants[135]*constants[11])
    return (states, constants)

def computeRates(voi, states, constants):
    rates = [0.0] * sizeStates; algebraic = [0.0] * sizeAlgebraic
    rates[32] = constants[141]
    rates[8] = constants[36]*(states[2]**constants[40])*states[7]-constants[37]*states[8]
    rates[9] = constants[38]*states[7]-constants[39]*states[9]
    algebraic[3] = 1.00000-(states[9]+states[7]+states[8])
    rates[7] = (constants[34]*(states[2]**constants[41])*algebraic[3]+constants[37]*states[8]+constants[39]*states[9])-(constants[35]*states[7]+constants[36]*(states[2]**constants[40])*states[7]+constants[38]*states[7])
    algebraic[4] = 1.00000/(1.00000+(exp(((states[0]+constants[51])/constants[52]))))+constants[53]/(1.00000+(exp(((-states[0]+constants[54])/constants[55]))))
    algebraic[15] = constants[56]+constants[57]/(1.00000+(exp(((states[0]+constants[58])/constants[59]))))
    rates[14] = (algebraic[4]-states[14])/algebraic[15]
    algebraic[18] = 0.493000*(exp((-0.0629000*states[0])))+constants[81]
    algebraic[7] = 1.00000/(1.00000+(exp((-(states[0]+15.0000)/20.0000))))
    rates[29] = (algebraic[7]-states[29])/algebraic[18]
    algebraic[19] = constants[80]+1000.00/(1.00000+(exp(((states[0]+42.1000)/5.40000))))
    algebraic[8] = 1.00000/(1.00000+(exp(((states[0]+42.1000)/5.40000))))
    rates[30] = (algebraic[8]-states[30])/algebraic[19]
    algebraic[20] = 39.3000*(exp((-0.0500000*states[0])))+13.1700
    rates[31] = (algebraic[7]-states[31])/algebraic[20]
    algebraic[10] = 0.0335000*(exp((0.0109000*states[0])))
    algebraic[22] = 6.89000e-005*(exp((-0.0417800*states[0])))
    rates[35] = (constants[85]*states[34]+algebraic[22]*states[33])-(constants[84]*states[35]+algebraic[10]*states[35])
    algebraic[11] = (4.81333e-006*(states[0]+26.5000))/(1.00000-(exp((-0.128000*(states[0]+26.5000)))))
    algebraic[23] = 9.53333e-005*(exp((-0.0380000*(states[0]+26.5000))))
    rates[37] = algebraic[11]*(1.00000-states[37])-algebraic[23]*states[37]
    algebraic[12] = 0.180640*(exp((0.0357700*(states[0]+constants[88]))))
    algebraic[24] = 0.395600*(exp((-0.0623700*(states[0]+constants[89]))))
    rates[38] = algebraic[12]*(1.00000-states[38])-algebraic[24]*states[38]
    algebraic[13] = 1.00000/(1.00000+(exp(((states[0]+51.4000)/5.00000))))
    algebraic[25] = 9.66450+10.9362/(1.00000+(exp(((states[0]+51.4000)/5.00000))))
    rates[39] = (algebraic[13]-states[39])/algebraic[25]
    algebraic[9] = 1.00000-(states[34]+states[35]+states[33]+states[36])
    algebraic[21] = 0.0223480*(exp((0.0117600*states[0])))
    algebraic[29] = 0.0470020*(exp((-0.0631000*states[0])))
    rates[34] = (algebraic[21]*algebraic[9]+constants[84]*states[35])-(algebraic[29]*states[34]+constants[85]*states[34])
    algebraic[30] = 0.0703000*(exp((0.0287000*(states[0]+5.00000))))
    algebraic[34] = 0.00649700*(exp((-0.0326800*(states[0]+5.00000))))
    rates[33] = (algebraic[10]*states[35]+algebraic[34]*states[36])-(algebraic[22]*states[33]+algebraic[30]*states[33])
    rates[36] = algebraic[30]*states[33]-algebraic[34]*states[36]
    algebraic[36] = (1.00000-states[10])-states[12]
    algebraic[5] = exp(((states[0]-constants[43])/constants[44]))
    algebraic[16] = algebraic[5]/(constants[45]*(algebraic[5]+1.00000))
    rates[10] = algebraic[16]*algebraic[36]-constants[127]*states[10]
    algebraic[37] = (1.00000-states[11])-states[13]
    rates[11] = algebraic[16]*algebraic[37]-constants[127]*states[11]
    algebraic[27] = (algebraic[5]+constants[47])/(constants[49]*constants[50]*(algebraic[5]+1.00000))
    algebraic[32] = (constants[48]*(algebraic[5]+constants[47]))/(constants[49]*(constants[48]*algebraic[5]+constants[47]))
    rates[12] = algebraic[27]*algebraic[36]*states[2]-algebraic[32]*states[12]
    rates[13] = algebraic[27]*algebraic[37]*states[3]-algebraic[32]*states[13]
    algebraic[6] = 1.00000-(states[20]+states[21]+states[22]+states[25]+states[23]+states[24]+states[26]+states[27])
    algebraic[17] = 3.80200/(0.102700*(exp((-(states[0]+2.50000)/17.0000)))+0.200000*(exp((-(states[0]+2.50000)/150.000))))
    algebraic[38] = 0.191700*(exp((-(states[0]+2.50000)/20.3000)))
    algebraic[28] = 3.80200/(0.102700*(exp((-(states[0]+2.50000)/15.0000)))+0.230000*(exp((-(states[0]+2.50000)/150.000))))
    algebraic[40] = 0.200000*(exp((-(states[0]-2.50000)/20.3000)))
    algebraic[44] = 7.00000e-007*(exp((-(states[0]+7.00000)/7.70000)))
    algebraic[46] = 0.00840000+2.00000e-005*(states[0]+7.00000)
    rates[22] = (algebraic[17]*algebraic[6]+algebraic[40]*states[21]+algebraic[44]*states[26])-(algebraic[38]*states[22]+algebraic[28]*states[22]+algebraic[46]*states[22])
    algebraic[33] = 3.80200/(0.102700*(exp((-(states[0]+2.50000)/12.0000)))+0.250000*(exp((-(states[0]+2.50000)/150.000))))
    algebraic[42] = 0.220000*(exp((-(states[0]-7.50000)/20.3000)))
    rates[21] = (algebraic[28]*states[22]+algebraic[42]*states[20]+algebraic[44]*states[25])-(algebraic[40]*states[21]+algebraic[33]*states[21]+algebraic[46]*states[21])
    rates[26] = (algebraic[17]*states[27]+algebraic[40]*states[25]+algebraic[46]*states[22])-(algebraic[38]*states[26]+algebraic[28]*states[26]+algebraic[44]*states[26])
    rates[27] = (algebraic[38]*states[26]+algebraic[46]*algebraic[6])-(algebraic[17]*states[27]+algebraic[44]*states[27])
    algebraic[39] = (1.00000+(constants[20]*constants[22])/((constants[22]+states[4])**2.00000))**(-1.00000)
    algebraic[45] = constants[23]*(states[7]+states[8])*(states[4]-states[2])*states[6]
    algebraic[51] = (states[5]-states[4])/constants[24]
    rates[4] = algebraic[39]*(algebraic[51]-algebraic[45])
    algebraic[49] = 1.00000/(0.188495*(exp((-(states[0]+7.00000)/16.6000)))+0.393956)
    algebraic[52] = (algebraic[33]*algebraic[49]*algebraic[44])/(algebraic[42]*algebraic[46])
    rates[20] = (algebraic[33]*states[21]+algebraic[52]*states[25])-(algebraic[42]*states[20]+algebraic[49]*states[20])
    algebraic[26] = (1.00000+(constants[19]*constants[21])/((constants[21]+states[1])**2.00000))**(-1.00000)
    algebraic[47] = constants[25]*(states[5]-states[1])
    algebraic[54] = (constants[30]*(states[1]**constants[33]))/((constants[26]**constants[33])+(states[1]**constants[33]))
    algebraic[43] = (states[3]-states[1])/constants[125]
    rates[1] = algebraic[26]*((algebraic[47]+algebraic[43])-algebraic[54])
    rates[5] = ((algebraic[54]-algebraic[47])*constants[1])/constants[3]-(algebraic[51]*constants[2])/constants[3]
    algebraic[55] = algebraic[49]/1000.00
    algebraic[58] = algebraic[44]
    rates[25] = (algebraic[49]*states[20]+algebraic[46]*states[21]+algebraic[58]*states[23]+algebraic[28]*states[26])-(algebraic[52]*states[25]+algebraic[44]*states[25]+algebraic[55]*states[25]+algebraic[40]*states[25])
    algebraic[48] = (constants[14]*states[0])/(constants[12]*constants[13])
    algebraic[50] = 2.00000*algebraic[48]
    algebraic[56] = custom_piecewise([greater((fabs(algebraic[50])) , 1.00000e-005), ((((-0.100000*constants[42]*2.00000*constants[14])/(constants[123]*constants[0]))*states[11]*states[14]*algebraic[50])/(1.00000-(exp((-algebraic[50])))))*(constants[10]*(exp((-algebraic[50])))-states[3]) , True, ((((-0.100000*constants[42]*2.00000*constants[14])/(constants[123]*constants[0]))*states[11]*states[14]*1.00000e-005)/(1.00000-(exp((-1.00000e-005)))))*(constants[10]*(exp((-1.00000e-005)))-states[3])])
    algebraic[53] = custom_piecewise([greater((fabs(algebraic[50])) , 1.00000e-005), ((((-constants[42]*2.00000*constants[14])/(constants[124]*constants[0]))*states[10]*states[14]*algebraic[50])/(1.00000-(exp((-algebraic[50])))))*(constants[10]*(exp((-algebraic[50])))-states[2]) , True, ((((-constants[42]*2.00000*constants[14])/(constants[124]*constants[0]))*states[10]*states[14]*1.00000e-005)/(1.00000-(exp((-1.00000e-005)))))*(constants[10]*(exp((-1.00000e-005)))-states[2])])
    algebraic[59] = algebraic[53]*constants[7]+algebraic[56]*(1.00000-constants[7])
    rates[6] = constants[28]*states[6]+((constants[29]*algebraic[59])/constants[27])*(exp((-((states[0]-5.00000)**2.00000)/648.000)))
    algebraic[60] = algebraic[49]/95000.0
    algebraic[62] = algebraic[44]/50.0000
    rates[23] = (algebraic[55]*states[25]+algebraic[62]*states[24])-(algebraic[58]*states[23]+algebraic[60]*states[23])
    rates[24] = algebraic[60]*states[23]-algebraic[62]*states[24]
    algebraic[35] = (1.00000+(constants[19]*constants[21])/((constants[21]+states[2])**2.00000))**(-1.00000)
    algebraic[41] = (states[2]-states[3])/constants[126]
    algebraic[75] = ((constants[12]*constants[13])/(2.00000*constants[14]))*(log((constants[10]/states[2])))
    algebraic[78] = constants[70]*(states[0]-algebraic[75])
    algebraic[70] = (((1.93000*constants[62])/(1.00000+((constants[68]/states[2])**2.00000)))*((states[16]**3.00000)*constants[10]*(exp(((constants[67]*states[0]*constants[14])/(constants[12]*constants[13]))))-(constants[9]**3.00000)*states[2]*(exp((((constants[67]-1.00000)*states[0]*constants[14])/(constants[12]*constants[13]))))))/((constants[63]*(states[16]**3.00000)+(constants[66]**3.00000)*states[2]+(constants[64]**3.00000)*constants[10]*(1.00000+states[2]/constants[65])+constants[65]*(constants[9]**3.00000)*(1.00000+((states[16]/constants[64])**3.00000))+(states[16]**3.00000)*constants[10]+(constants[9]**3.00000)*states[2])*(1.00000+constants[69]*(exp((((constants[67]-1.00000)*states[0]*constants[14])/(constants[12]*constants[13]))))))
    algebraic[63] = (constants[60]*(states[2]**2.00000))/((constants[61]**2.00000)+(states[2]**2.00000))
    algebraic[79] = (-(((algebraic[78]+algebraic[63])-2.00000*algebraic[70])+algebraic[53])*constants[124]*constants[0])/(2.00000*constants[4]*constants[14])
    rates[2] = algebraic[35]*((algebraic[79]-(algebraic[41]*constants[5])/constants[4])+(algebraic[45]*constants[2])/constants[4])
    algebraic[31] = (1.00000+(constants[19]*constants[21])/((constants[21]+states[3])**2.00000))**(-1.00000)
    algebraic[77] = ((constants[12]*constants[13])/(2.00000*constants[14]))*(log((constants[10]/states[3])))
    algebraic[80] = constants[70]*(states[0]-algebraic[77])
    algebraic[71] = (((0.600000*constants[62])/(1.00000+((constants[68]/states[3])**2.00000)))*((states[15]**3.00000)*constants[10]*(exp(((constants[67]*states[0]*constants[14])/(constants[12]*constants[13]))))-(constants[9]**3.00000)*states[3]*(exp((((constants[67]-1.00000)*states[0]*constants[14])/(constants[12]*constants[13]))))))/((constants[63]*(states[15]**3.00000)+(constants[66]**3.00000)*states[3]+(constants[64]**3.00000)*constants[10]*(1.00000+states[3]/constants[65])+constants[65]*(constants[9]**3.00000)*(1.00000+((states[15]/constants[64])**3.00000))+(states[15]**3.00000)*constants[10]+(constants[9]**3.00000)*states[3])*(1.00000+constants[69]*(exp((((constants[67]-1.00000)*states[0]*constants[14])/(constants[12]*constants[13]))))))
    algebraic[61] = (constants[60]*(states[3]**2.00000))/((constants[61]**2.00000)+(states[3]**2.00000))
    algebraic[81] = (-(((algebraic[80]+algebraic[61])-2.00000*algebraic[71])+algebraic[56])*constants[123]*constants[0])/(2.00000*constants[5]*constants[14])
    rates[3] = algebraic[31]*((algebraic[81]-(algebraic[43]*constants[1])/constants[5])+algebraic[41])
    algebraic[84] = constants[73]*states[16]*(constants[72]-states[19])-constants[74]*states[19]
    rates[19] = algebraic[84]
    algebraic[85] = constants[73]*states[15]*(constants[71]-states[18])-constants[74]*states[18]
    rates[18] = algebraic[85]
    algebraic[88] = ((constants[12]*constants[13])/constants[14])*(log(((0.900000*constants[9]+0.100000*constants[8])/(0.900000*states[16]+0.100000*states[28]))))
    algebraic[89] = constants[77]*states[20]*(states[0]-algebraic[88])
    algebraic[103] = 1.00000/(1.00000+0.294600*(exp(((-0.100000*states[0]*constants[14])/(constants[12]*constants[13]))))+0.0164000*constants[131]*(exp(((-states[0]*constants[14])/(constants[12]*constants[13])))))
    algebraic[104] = (((1.23600*constants[92]*algebraic[103]*1.00000)/(1.00000+((constants[96]/states[16])**constants[94])))*constants[8])/(constants[8]+constants[91])
    algebraic[107] = 1.00000/(1.00000+0.124500*(exp(((-0.100000*states[0]*constants[14])/(constants[12]*constants[13]))))+0.0890000*constants[131]*(exp(((-states[0]*constants[14])/(constants[12]*constants[13])))))
    algebraic[108] = (((2.35000*constants[93]*algebraic[107]*1.00000)/(1.00000+((constants[97]/states[16])**constants[95])))*constants[8])/(constants[8]+constants[91])
    algebraic[111] = algebraic[104]+algebraic[108]
    algebraic[93] = constants[78]*(states[0]-algebraic[88])
    algebraic[87] = (states[16]-states[15])/constants[129]
    rates[16] = ((-(algebraic[89]+algebraic[93]+3.00000*algebraic[111]+3.00000*algebraic[70])*constants[124]*constants[0])/(constants[4]*constants[14])-(algebraic[87]*constants[5])/constants[4])-algebraic[84]
    algebraic[90] = ((constants[12]*constants[13])/constants[14])*(log(((0.900000*constants[9]+0.100000*constants[8])/(0.900000*states[15]+0.100000*states[28]))))
    algebraic[91] = constants[77]*states[20]*(states[0]-algebraic[90])
    algebraic[105] = (((0.899000*constants[92]*algebraic[103]*1.00000)/(1.00000+((constants[96]/states[15])**constants[94])))*constants[8])/(constants[8]+constants[91])
    algebraic[109] = (((0.422000*constants[93]*algebraic[107]*1.00000)/(1.00000+((constants[97]/states[15])**constants[95])))*constants[8])/(constants[8]+constants[91])
    algebraic[112] = algebraic[105]+algebraic[109]
    algebraic[94] = constants[78]*(states[0]-algebraic[90])
    algebraic[86] = (states[15]-states[17])/constants[128]
    rates[15] = (((-(algebraic[91]+algebraic[94]+3.00000*algebraic[112]+3.00000*algebraic[71])*constants[123]*constants[0])/(constants[5]*constants[14])-(algebraic[86]*constants[1])/constants[5])+algebraic[87])-algebraic[85]
    algebraic[97] = ((constants[12]*constants[13])/constants[14])*(log((constants[8]/states[28])))
    algebraic[101] = constants[87]*(states[38]**3.00000)*states[39]*(states[0]-algebraic[97])
    algebraic[102] = (((constants[90]*constants[8])/(constants[8]+210.000))*(states[0]-algebraic[97]))/(1.00000+(exp((0.0896000*(states[0]-algebraic[97])))))
    algebraic[100] = constants[86]*(states[37]**2.00000)*(states[0]-algebraic[97])
    algebraic[98] = constants[79]*states[29]*states[30]*(states[0]-algebraic[97])
    algebraic[99] = constants[82]*states[31]*states[32]*(states[0]-algebraic[97])
    algebraic[96] = constants[83]*states[33]*(states[0]-((constants[12]*constants[13])/constants[14])*(log(((0.980000*constants[8]+0.0200000*constants[9])/(0.980000*states[28]+0.0200000*states[17])))))
    algebraic[0] = (floor((VOI/constants[16])))*constants[16]
    algebraic[14] = custom_piecewise([greater_equal(VOI-algebraic[0] , constants[15]) & less_equal(VOI-algebraic[0] , constants[15]+constants[17]), constants[18] , True, 0.000000])
    algebraic[113] = algebraic[111]*constants[7]+algebraic[112]*(1.00000-constants[7])
    rates[28] = (-((algebraic[14]+algebraic[101]+algebraic[102]+algebraic[100]+algebraic[99]+algebraic[98]+algebraic[96])-2.00000*algebraic[113])*constants[6]*constants[0])/(constants[1]*constants[14])
    algebraic[64] = algebraic[63]*constants[7]+algebraic[61]*(1.00000-constants[7])
    algebraic[73] = algebraic[70]*constants[7]+algebraic[71]*(1.00000-constants[7])
    algebraic[82] = algebraic[78]*constants[7]+algebraic[80]*(1.00000-constants[7])
    algebraic[92] = algebraic[89]*constants[7]+algebraic[91]*(1.00000-constants[7])
    algebraic[95] = algebraic[93]*constants[7]+algebraic[94]*(1.00000-constants[7])
    algebraic[115] = 0.200000/(1.00000+(exp((-(states[0]-46.7000)/7.80000))))
    algebraic[116] = ((constants[98]*algebraic[115]*states[1])/(states[1]+constants[100]))*(states[0]-constants[99])
    algebraic[117] = custom_piecewise([greater((fabs(algebraic[48])) , 1.00000e-005), (((constants[101]*(constants[14]**2.00000)*states[0])/(constants[12]*constants[13]*constants[0]))*(states[40]-constants[11]*(exp(((constants[14]*states[0])/(constants[12]*constants[13]))))))/(1.00000-(exp(((constants[14]*states[0])/(constants[12]*constants[13]))))) , True, (((constants[101]*constants[14]*1.00000e-005)/constants[0])*(states[40]-constants[11]*(exp(1.00000e-005))))/(1.00000-(exp(1.00000e-005)))])
    algebraic[118] = custom_piecewise([equal(states[0] , 0.000000), -((constants[121]*constants[14])/constants[0])*(states[42]-constants[122]) , True, (((constants[121]*(constants[14]**2.00000)*states[0])/(constants[12]*constants[13]*constants[0]))*(states[42]-constants[122]*(exp(((constants[14]*states[0])/(constants[12]*constants[13]))))))/(1.00000-(exp(((constants[14]*states[0])/(constants[12]*constants[13])))))])
    algebraic[68] = -algebraic[64]
    rates[0] = -(algebraic[117]+algebraic[59]+algebraic[64]+algebraic[73]+algebraic[82]+algebraic[92]+algebraic[95]+algebraic[113]+algebraic[101]+algebraic[102]+algebraic[100]+algebraic[98]+algebraic[99]+algebraic[96]+algebraic[116]+algebraic[14]+algebraic[118]+algebraic[68])
    rates[42] = (algebraic[118]*constants[6]*constants[0])/(constants[1]*constants[14])+constants[120]
    algebraic[119] = (10.0000**(-states[41]))*1.00000e+006
    algebraic[120] = ((states[17]/constants[116])*constants[114])/((1.00000+states[17]/constants[116])*(1.00000+algebraic[119]/constants[117]))
    algebraic[121] = ((algebraic[119]/constants[117])*constants[115])/((1.00000+states[17]/constants[116])*(1.00000+algebraic[119]/constants[117]))
    algebraic[122] = (((1000.00*(algebraic[119]**constants[119]))/((algebraic[119]**constants[119])+(constants[118]**constants[119])))*(constants[112]*algebraic[121]-algebraic[120]*constants[113]))/(constants[112]+algebraic[121]+algebraic[120]+constants[113])
    rates[17] = algebraic[86]+algebraic[122]+constants[130]
    algebraic[123] = (10.0000**(-14.0000+states[41]))*1.00000e+006
    algebraic[124] = (constants[106]*constants[110]*algebraic[123])/(constants[135]*constants[110]+constants[110]*algebraic[123]+constants[135]*states[40])
    algebraic[125] = (constants[133]*constants[135]*states[40])/(constants[135]*constants[110]+constants[110]*algebraic[123]+constants[135]*states[40])
    algebraic[126] = (algebraic[124]*constants[140]-constants[139]*algebraic[125])/(algebraic[124]+constants[139]+constants[140]+algebraic[125])
    algebraic[127] = 1000.00*algebraic[126]
    rates[40] = ((algebraic[116]+algebraic[117])*constants[6]*constants[0])/(constants[1]*constants[14])+algebraic[127]+constants[132]
    algebraic[65] = (-algebraic[64]*constants[123]*constants[0])/(2.00000*constants[5]*constants[14])
    algebraic[66] = (-algebraic[64]*constants[124]*constants[0])/(2.00000*constants[4]*constants[14])
    algebraic[67] = (algebraic[65]*constants[5])/constants[1]+(algebraic[66]*constants[4])/constants[1]
    algebraic[69] = -algebraic[67]*2.00000
    algebraic[128] = (log(10.0000))*((10.0000**(-states[41]))*1000.00+((10.0000**(constants[104]-states[41]))*constants[102])/((1.00000+(10.0000**(constants[104]-states[41])))**2.00000)+((10.0000**(constants[105]-states[41]))*constants[103])/((1.00000+(10.0000**(constants[105]-states[41])))**2.00000))
    rates[41] = (-1.00000/algebraic[128])*((algebraic[127]-algebraic[122])+constants[120]+constants[137]+algebraic[69])
    return(rates)

def computeAlgebraic(constants, states, voi):
    algebraic = array([[0.0] * len(voi)] * sizeAlgebraic)
    states = array(states)
    voi = array(voi)
    algebraic[3] = 1.00000-(states[9]+states[7]+states[8])
    algebraic[4] = 1.00000/(1.00000+(exp(((states[0]+constants[51])/constants[52]))))+constants[53]/(1.00000+(exp(((-states[0]+constants[54])/constants[55]))))
    algebraic[15] = constants[56]+constants[57]/(1.00000+(exp(((states[0]+constants[58])/constants[59]))))
    algebraic[18] = 0.493000*(exp((-0.0629000*states[0])))+constants[81]
    algebraic[7] = 1.00000/(1.00000+(exp((-(states[0]+15.0000)/20.0000))))
    algebraic[19] = constants[80]+1000.00/(1.00000+(exp(((states[0]+42.1000)/5.40000))))
    algebraic[8] = 1.00000/(1.00000+(exp(((states[0]+42.1000)/5.40000))))
    algebraic[20] = 39.3000*(exp((-0.0500000*states[0])))+13.1700
    algebraic[10] = 0.0335000*(exp((0.0109000*states[0])))
    algebraic[22] = 6.89000e-005*(exp((-0.0417800*states[0])))
    algebraic[11] = (4.81333e-006*(states[0]+26.5000))/(1.00000-(exp((-0.128000*(states[0]+26.5000)))))
    algebraic[23] = 9.53333e-005*(exp((-0.0380000*(states[0]+26.5000))))
    algebraic[12] = 0.180640*(exp((0.0357700*(states[0]+constants[88]))))
    algebraic[24] = 0.395600*(exp((-0.0623700*(states[0]+constants[89]))))
    algebraic[13] = 1.00000/(1.00000+(exp(((states[0]+51.4000)/5.00000))))
    algebraic[25] = 9.66450+10.9362/(1.00000+(exp(((states[0]+51.4000)/5.00000))))
    algebraic[9] = 1.00000-(states[34]+states[35]+states[33]+states[36])
    algebraic[21] = 0.0223480*(exp((0.0117600*states[0])))
    algebraic[29] = 0.0470020*(exp((-0.0631000*states[0])))
    algebraic[30] = 0.0703000*(exp((0.0287000*(states[0]+5.00000))))
    algebraic[34] = 0.00649700*(exp((-0.0326800*(states[0]+5.00000))))
    algebraic[36] = (1.00000-states[10])-states[12]
    algebraic[5] = exp(((states[0]-constants[43])/constants[44]))
    algebraic[16] = algebraic[5]/(constants[45]*(algebraic[5]+1.00000))
    algebraic[37] = (1.00000-states[11])-states[13]
    algebraic[27] = (algebraic[5]+constants[47])/(constants[49]*constants[50]*(algebraic[5]+1.00000))
    algebraic[32] = (constants[48]*(algebraic[5]+constants[47]))/(constants[49]*(constants[48]*algebraic[5]+constants[47]))
    algebraic[6] = 1.00000-(states[20]+states[21]+states[22]+states[25]+states[23]+states[24]+states[26]+states[27])
    algebraic[17] = 3.80200/(0.102700*(exp((-(states[0]+2.50000)/17.0000)))+0.200000*(exp((-(states[0]+2.50000)/150.000))))
    algebraic[38] = 0.191700*(exp((-(states[0]+2.50000)/20.3000)))
    algebraic[28] = 3.80200/(0.102700*(exp((-(states[0]+2.50000)/15.0000)))+0.230000*(exp((-(states[0]+2.50000)/150.000))))
    algebraic[40] = 0.200000*(exp((-(states[0]-2.50000)/20.3000)))
    algebraic[44] = 7.00000e-007*(exp((-(states[0]+7.00000)/7.70000)))
    algebraic[46] = 0.00840000+2.00000e-005*(states[0]+7.00000)
    algebraic[33] = 3.80200/(0.102700*(exp((-(states[0]+2.50000)/12.0000)))+0.250000*(exp((-(states[0]+2.50000)/150.000))))
    algebraic[42] = 0.220000*(exp((-(states[0]-7.50000)/20.3000)))
    algebraic[39] = (1.00000+(constants[20]*constants[22])/((constants[22]+states[4])**2.00000))**(-1.00000)
    algebraic[45] = constants[23]*(states[7]+states[8])*(states[4]-states[2])*states[6]
    algebraic[51] = (states[5]-states[4])/constants[24]
    algebraic[49] = 1.00000/(0.188495*(exp((-(states[0]+7.00000)/16.6000)))+0.393956)
    algebraic[52] = (algebraic[33]*algebraic[49]*algebraic[44])/(algebraic[42]*algebraic[46])
    algebraic[26] = (1.00000+(constants[19]*constants[21])/((constants[21]+states[1])**2.00000))**(-1.00000)
    algebraic[47] = constants[25]*(states[5]-states[1])
    algebraic[54] = (constants[30]*(states[1]**constants[33]))/((constants[26]**constants[33])+(states[1]**constants[33]))
    algebraic[43] = (states[3]-states[1])/constants[125]
    algebraic[55] = algebraic[49]/1000.00
    algebraic[58] = algebraic[44]
    algebraic[48] = (constants[14]*states[0])/(constants[12]*constants[13])
    algebraic[50] = 2.00000*algebraic[48]
    algebraic[56] = custom_piecewise([greater((fabs(algebraic[50])) , 1.00000e-005), ((((-0.100000*constants[42]*2.00000*constants[14])/(constants[123]*constants[0]))*states[11]*states[14]*algebraic[50])/(1.00000-(exp((-algebraic[50])))))*(constants[10]*(exp((-algebraic[50])))-states[3]) , True, ((((-0.100000*constants[42]*2.00000*constants[14])/(constants[123]*constants[0]))*states[11]*states[14]*1.00000e-005)/(1.00000-(exp((-1.00000e-005)))))*(constants[10]*(exp((-1.00000e-005)))-states[3])])
    algebraic[53] = custom_piecewise([greater((fabs(algebraic[50])) , 1.00000e-005), ((((-constants[42]*2.00000*constants[14])/(constants[124]*constants[0]))*states[10]*states[14]*algebraic[50])/(1.00000-(exp((-algebraic[50])))))*(constants[10]*(exp((-algebraic[50])))-states[2]) , True, ((((-constants[42]*2.00000*constants[14])/(constants[124]*constants[0]))*states[10]*states[14]*1.00000e-005)/(1.00000-(exp((-1.00000e-005)))))*(constants[10]*(exp((-1.00000e-005)))-states[2])])
    algebraic[59] = algebraic[53]*constants[7]+algebraic[56]*(1.00000-constants[7])
    algebraic[60] = algebraic[49]/95000.0
    algebraic[62] = algebraic[44]/50.0000
    algebraic[35] = (1.00000+(constants[19]*constants[21])/((constants[21]+states[2])**2.00000))**(-1.00000)
    algebraic[41] = (states[2]-states[3])/constants[126]
    algebraic[75] = ((constants[12]*constants[13])/(2.00000*constants[14]))*(log((constants[10]/states[2])))
    algebraic[78] = constants[70]*(states[0]-algebraic[75])
    algebraic[70] = (((1.93000*constants[62])/(1.00000+((constants[68]/states[2])**2.00000)))*((states[16]**3.00000)*constants[10]*(exp(((constants[67]*states[0]*constants[14])/(constants[12]*constants[13]))))-(constants[9]**3.00000)*states[2]*(exp((((constants[67]-1.00000)*states[0]*constants[14])/(constants[12]*constants[13]))))))/((constants[63]*(states[16]**3.00000)+(constants[66]**3.00000)*states[2]+(constants[64]**3.00000)*constants[10]*(1.00000+states[2]/constants[65])+constants[65]*(constants[9]**3.00000)*(1.00000+((states[16]/constants[64])**3.00000))+(states[16]**3.00000)*constants[10]+(constants[9]**3.00000)*states[2])*(1.00000+constants[69]*(exp((((constants[67]-1.00000)*states[0]*constants[14])/(constants[12]*constants[13]))))))
    algebraic[63] = (constants[60]*(states[2]**2.00000))/((constants[61]**2.00000)+(states[2]**2.00000))
    algebraic[79] = (-(((algebraic[78]+algebraic[63])-2.00000*algebraic[70])+algebraic[53])*constants[124]*constants[0])/(2.00000*constants[4]*constants[14])
    algebraic[31] = (1.00000+(constants[19]*constants[21])/((constants[21]+states[3])**2.00000))**(-1.00000)
    algebraic[77] = ((constants[12]*constants[13])/(2.00000*constants[14]))*(log((constants[10]/states[3])))
    algebraic[80] = constants[70]*(states[0]-algebraic[77])
    algebraic[71] = (((0.600000*constants[62])/(1.00000+((constants[68]/states[3])**2.00000)))*((states[15]**3.00000)*constants[10]*(exp(((constants[67]*states[0]*constants[14])/(constants[12]*constants[13]))))-(constants[9]**3.00000)*states[3]*(exp((((constants[67]-1.00000)*states[0]*constants[14])/(constants[12]*constants[13]))))))/((constants[63]*(states[15]**3.00000)+(constants[66]**3.00000)*states[3]+(constants[64]**3.00000)*constants[10]*(1.00000+states[3]/constants[65])+constants[65]*(constants[9]**3.00000)*(1.00000+((states[15]/constants[64])**3.00000))+(states[15]**3.00000)*constants[10]+(constants[9]**3.00000)*states[3])*(1.00000+constants[69]*(exp((((constants[67]-1.00000)*states[0]*constants[14])/(constants[12]*constants[13]))))))
    algebraic[61] = (constants[60]*(states[3]**2.00000))/((constants[61]**2.00000)+(states[3]**2.00000))
    algebraic[81] = (-(((algebraic[80]+algebraic[61])-2.00000*algebraic[71])+algebraic[56])*constants[123]*constants[0])/(2.00000*constants[5]*constants[14])
    algebraic[84] = constants[73]*states[16]*(constants[72]-states[19])-constants[74]*states[19]
    algebraic[85] = constants[73]*states[15]*(constants[71]-states[18])-constants[74]*states[18]
    algebraic[88] = ((constants[12]*constants[13])/constants[14])*(log(((0.900000*constants[9]+0.100000*constants[8])/(0.900000*states[16]+0.100000*states[28]))))
    algebraic[89] = constants[77]*states[20]*(states[0]-algebraic[88])
    algebraic[103] = 1.00000/(1.00000+0.294600*(exp(((-0.100000*states[0]*constants[14])/(constants[12]*constants[13]))))+0.0164000*constants[131]*(exp(((-states[0]*constants[14])/(constants[12]*constants[13])))))
    algebraic[104] = (((1.23600*constants[92]*algebraic[103]*1.00000)/(1.00000+((constants[96]/states[16])**constants[94])))*constants[8])/(constants[8]+constants[91])
    algebraic[107] = 1.00000/(1.00000+0.124500*(exp(((-0.100000*states[0]*constants[14])/(constants[12]*constants[13]))))+0.0890000*constants[131]*(exp(((-states[0]*constants[14])/(constants[12]*constants[13])))))
    algebraic[108] = (((2.35000*constants[93]*algebraic[107]*1.00000)/(1.00000+((constants[97]/states[16])**constants[95])))*constants[8])/(constants[8]+constants[91])
    algebraic[111] = algebraic[104]+algebraic[108]
    algebraic[93] = constants[78]*(states[0]-algebraic[88])
    algebraic[87] = (states[16]-states[15])/constants[129]
    algebraic[90] = ((constants[12]*constants[13])/constants[14])*(log(((0.900000*constants[9]+0.100000*constants[8])/(0.900000*states[15]+0.100000*states[28]))))
    algebraic[91] = constants[77]*states[20]*(states[0]-algebraic[90])
    algebraic[105] = (((0.899000*constants[92]*algebraic[103]*1.00000)/(1.00000+((constants[96]/states[15])**constants[94])))*constants[8])/(constants[8]+constants[91])
    algebraic[109] = (((0.422000*constants[93]*algebraic[107]*1.00000)/(1.00000+((constants[97]/states[15])**constants[95])))*constants[8])/(constants[8]+constants[91])
    algebraic[112] = algebraic[105]+algebraic[109]
    algebraic[94] = constants[78]*(states[0]-algebraic[90])
    algebraic[86] = (states[15]-states[17])/constants[128]
    algebraic[97] = ((constants[12]*constants[13])/constants[14])*(log((constants[8]/states[28])))
    algebraic[101] = constants[87]*(states[38]**3.00000)*states[39]*(states[0]-algebraic[97])
    algebraic[102] = (((constants[90]*constants[8])/(constants[8]+210.000))*(states[0]-algebraic[97]))/(1.00000+(exp((0.0896000*(states[0]-algebraic[97])))))
    algebraic[100] = constants[86]*(states[37]**2.00000)*(states[0]-algebraic[97])
    algebraic[98] = constants[79]*states[29]*states[30]*(states[0]-algebraic[97])
    algebraic[99] = constants[82]*states[31]*states[32]*(states[0]-algebraic[97])
    algebraic[96] = constants[83]*states[33]*(states[0]-((constants[12]*constants[13])/constants[14])*(log(((0.980000*constants[8]+0.0200000*constants[9])/(0.980000*states[28]+0.0200000*states[17])))))
    algebraic[0] = (floor((VOI/constants[16])))*constants[16]
    algebraic[14] = custom_piecewise([greater_equal(VOI-algebraic[0] , constants[15]) & less_equal(VOI-algebraic[0] , constants[15]+constants[17]), constants[18] , True, 0.000000])
    algebraic[113] = algebraic[111]*constants[7]+algebraic[112]*(1.00000-constants[7])
    algebraic[64] = algebraic[63]*constants[7]+algebraic[61]*(1.00000-constants[7])
    algebraic[73] = algebraic[70]*constants[7]+algebraic[71]*(1.00000-constants[7])
    algebraic[82] = algebraic[78]*constants[7]+algebraic[80]*(1.00000-constants[7])
    algebraic[92] = algebraic[89]*constants[7]+algebraic[91]*(1.00000-constants[7])
    algebraic[95] = algebraic[93]*constants[7]+algebraic[94]*(1.00000-constants[7])
    algebraic[115] = 0.200000/(1.00000+(exp((-(states[0]-46.7000)/7.80000))))
    algebraic[116] = ((constants[98]*algebraic[115]*states[1])/(states[1]+constants[100]))*(states[0]-constants[99])
    algebraic[117] = custom_piecewise([greater((fabs(algebraic[48])) , 1.00000e-005), (((constants[101]*(constants[14]**2.00000)*states[0])/(constants[12]*constants[13]*constants[0]))*(states[40]-constants[11]*(exp(((constants[14]*states[0])/(constants[12]*constants[13]))))))/(1.00000-(exp(((constants[14]*states[0])/(constants[12]*constants[13]))))) , True, (((constants[101]*constants[14]*1.00000e-005)/constants[0])*(states[40]-constants[11]*(exp(1.00000e-005))))/(1.00000-(exp(1.00000e-005)))])
    algebraic[118] = custom_piecewise([equal(states[0] , 0.000000), -((constants[121]*constants[14])/constants[0])*(states[42]-constants[122]) , True, (((constants[121]*(constants[14]**2.00000)*states[0])/(constants[12]*constants[13]*constants[0]))*(states[42]-constants[122]*(exp(((constants[14]*states[0])/(constants[12]*constants[13]))))))/(1.00000-(exp(((constants[14]*states[0])/(constants[12]*constants[13])))))])
    algebraic[68] = -algebraic[64]
    algebraic[119] = (10.0000**(-states[41]))*1.00000e+006
    algebraic[120] = ((states[17]/constants[116])*constants[114])/((1.00000+states[17]/constants[116])*(1.00000+algebraic[119]/constants[117]))
    algebraic[121] = ((algebraic[119]/constants[117])*constants[115])/((1.00000+states[17]/constants[116])*(1.00000+algebraic[119]/constants[117]))
    algebraic[122] = (((1000.00*(algebraic[119]**constants[119]))/((algebraic[119]**constants[119])+(constants[118]**constants[119])))*(constants[112]*algebraic[121]-algebraic[120]*constants[113]))/(constants[112]+algebraic[121]+algebraic[120]+constants[113])
    algebraic[123] = (10.0000**(-14.0000+states[41]))*1.00000e+006
    algebraic[124] = (constants[106]*constants[110]*algebraic[123])/(constants[135]*constants[110]+constants[110]*algebraic[123]+constants[135]*states[40])
    algebraic[125] = (constants[133]*constants[135]*states[40])/(constants[135]*constants[110]+constants[110]*algebraic[123]+constants[135]*states[40])
    algebraic[126] = (algebraic[124]*constants[140]-constants[139]*algebraic[125])/(algebraic[124]+constants[139]+constants[140]+algebraic[125])
    algebraic[127] = 1000.00*algebraic[126]
    algebraic[65] = (-algebraic[64]*constants[123]*constants[0])/(2.00000*constants[5]*constants[14])
    algebraic[66] = (-algebraic[64]*constants[124]*constants[0])/(2.00000*constants[4]*constants[14])
    algebraic[67] = (algebraic[65]*constants[5])/constants[1]+(algebraic[66]*constants[4])/constants[1]
    algebraic[69] = -algebraic[67]*2.00000
    algebraic[128] = (log(10.0000))*((10.0000**(-states[41]))*1000.00+((10.0000**(constants[104]-states[41]))*constants[102])/((1.00000+(10.0000**(constants[104]-states[41])))**2.00000)+((10.0000**(constants[105]-states[41]))*constants[103])/((1.00000+(10.0000**(constants[105]-states[41])))**2.00000))
    algebraic[1] = (((states[4]*constants[20])/(states[4]+constants[22]))*constants[2])/constants[1]+(states[5]*constants[3])/constants[1]
    algebraic[2] = (states[7]+states[8])*states[6]
    algebraic[57] = algebraic[54]-algebraic[47]
    algebraic[72] = (algebraic[71]*constants[123]*constants[0])/(constants[5]*constants[14])
    algebraic[74] = (algebraic[70]*constants[124]*constants[0])/(constants[4]*constants[14])
    algebraic[76] = (algebraic[72]*constants[5])/constants[1]+(algebraic[74]*constants[4])/constants[1]
    algebraic[83] = (-algebraic[82]*constants[6]*constants[0])/(2.00000*constants[1]*constants[14])
    algebraic[106] = algebraic[104]*constants[7]+algebraic[105]*(1.00000-constants[7])
    algebraic[110] = algebraic[108]*constants[7]+algebraic[109]*(1.00000-constants[7])
    algebraic[114] = (algebraic[113]*3.00000*constants[6]*constants[0])/(constants[14]*constants[1])
    return algebraic

def custom_piecewise(cases):
    """Compute result of a piecewise function"""
    return select(cases[0::2],cases[1::2])

def solve_model():
    """Solve model with ODE solver"""
    from scipy.integrate import ode
    # Initialise constants and state variables
    (init_states, constants) = initConsts()

    # Set timespan to solve over
    voi = linspace(0, 10, 500)

    # Construct ODE object to solve
    r = ode(computeRates)
    r.set_integrator('vode', method='bdf', atol=1e-006, rtol=1e-006, max_step=1)
    r.set_initial_value(init_states, voi[0])
    r.set_f_params(constants)

    # Solve model
    states = array([[0.0] * len(voi)] * sizeStates)
    states[:,0] = init_states
    for (i,t) in enumerate(voi[1:]):
        if r.successful():
            r.integrate(t)
            states[:,i+1] = r.y
        else:
            break

    # Compute algebraic variables
    algebraic = computeAlgebraic(constants, states, voi)
    return (voi, states, algebraic)

def plot_model(voi, states, algebraic):
    """Plot variables against variable of integration"""
    import pylab
    (legend_states, legend_algebraic, legend_voi, legend_constants) = createLegends()
    pylab.figure(1)
    pylab.plot(voi,vstack((states,algebraic)).T)
    pylab.xlabel(legend_voi)
    pylab.legend(legend_states + legend_algebraic, loc='best')
    pylab.show()

if __name__ == "__main__":
    (voi, states, algebraic) = solve_model()
    plot_model(voi, states, algebraic)
