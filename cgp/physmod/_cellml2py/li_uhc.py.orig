# Size of variable arrays:
sizeAlgebraic = 83
sizeStates = 35
sizeConstants = 188
from math import *
from numpy import *

def createLegends():
    legend_states = [""] * sizeStates
    legend_rates = [""] * sizeStates
    legend_algebraic = [""] * sizeAlgebraic
    legend_voi = ""
    legend_constants = [""] * sizeConstants
    legend_VOI = "time in component environment (millisecond)"
    legend_states[0] = "V in component cell (millivolt)"
    legend_constants[0] = "Cm in component cell (microF_per_cm2)"
    legend_constants[1] = "Vmyo in component cell (microlitre)"
    legend_constants[2] = "VJSR in component cell (microlitre)"
    legend_constants[3] = "VNSR in component cell (microlitre)"
    legend_constants[4] = "Vss in component cell (microlitre)"
    legend_constants[5] = "Acap in component cell (cm2)"
    legend_constants[6] = "Ko in component cell (micromolar)"
    legend_constants[7] = "Nao in component cell (micromolar)"
    legend_constants[8] = "Cao in component cell (micromolar)"
    legend_constants[9] = "R in component cell (joule_per_mole_kelvin)"
    legend_constants[10] = "T in component cell (kelvin)"
    legend_constants[11] = "F in component cell (coulomb_per_millimole)"
    legend_algebraic[59] = "i_CaL in component L_type_calcium_current (picoA_per_picoF)"
    legend_algebraic[60] = "i_pCa in component calcium_pump_current (picoA_per_picoF)"
    legend_algebraic[61] = "i_NCX in component sodium_calcium_exchange_current (picoA_per_picoF)"
    legend_algebraic[65] = "i_Cab in component calcium_background_current (picoA_per_picoF)"
    legend_algebraic[69] = "i_Na in component fast_sodium_current (picoA_per_picoF)"
    legend_algebraic[70] = "i_Nab in component sodium_background_current (picoA_per_picoF)"
    legend_algebraic[80] = "i_NaK in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_algebraic[76] = "i_Kto_f in component fast_transient_outward_K_I (picoA_per_picoF)"
    legend_algebraic[78] = "i_Kto_s in component slow_transient_outward_K_I (picoA_per_picoF)"
    legend_algebraic[77] = "i_K1 in component time_independent_K_I (picoA_per_picoF)"
    legend_algebraic[75] = "i_Ks in component slow_delayed_rectifier_K_I (picoA_per_picoF)"
    legend_algebraic[73] = "i_Kur in component ultra_rapidly_activating_delayed_rectifier_K_I (picoA_per_picoF)"
    legend_algebraic[74] = "i_Kss in component non_inactivating_steady_state_K_I (picoA_per_picoF)"
    legend_algebraic[82] = "i_ClCa in component calcium_activated_chloride_current (picoA_per_picoF)"
    legend_algebraic[71] = "i_Kr in component rapid_delayed_rectifier_K_I (picoA_per_picoF)"
    legend_constants[12] = "stim_offset in component cell (millisecond)"
    legend_constants[13] = "stim_period in component cell (millisecond)"
    legend_constants[14] = "stim_duration in component cell (millisecond)"
    legend_constants[15] = "stim_amplitude in component cell (picoA_per_picoF)"
    legend_algebraic[13] = "i_Stim in component cell (picoA_per_picoF)"
    legend_algebraic[0] = "past in component cell (millisecond)"
    legend_constants[16] = "prepulses_number in component cell (dimensionless)"
    legend_states[1] = "Cai in component calcium_concentration (micromolar)"
    legend_states[2] = "Cass in component calcium_concentration (micromolar)"
    legend_states[3] = "CaJSR in component calcium_concentration (micromolar)"
    legend_states[4] = "CaNSR in component calcium_concentration (micromolar)"
    legend_algebraic[27] = "Bi in component calcium_concentration (dimensionless)"
    legend_algebraic[32] = "Bss in component calcium_concentration (dimensionless)"
    legend_algebraic[36] = "BJSR in component calcium_concentration (dimensionless)"
    legend_constants[17] = "Bmax in component calcium_concentration (micromolar)"
    legend_constants[18] = "CSQN_tot in component calcium_concentration (micromolar)"
    legend_constants[19] = "Kd in component calcium_concentration (micromolar)"
    legend_constants[20] = "Km_CSQN in component calcium_concentration (micromolar)"
    legend_algebraic[41] = "J_leak in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[39] = "J_rel in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[53] = "J_serca in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[43] = "J_tr in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[45] = "J_xfer in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[67] = "J_total in component calcium_concentration (micromolar_per_millisecond)"
    legend_algebraic[1] = "CaSR in component calcium_concentration (micromolar)"
    legend_constants[21] = "c_vmup in component calcium_fluxes (dimensionless)"
    legend_constants[22] = "o_P_RyR in component calcium_fluxes (millivolt)"
    legend_constants[23] = "h_vmup in component calcium_fluxes (dimensionless)"
    legend_constants[24] = "d_P_RyR in component calcium_fluxes (millivolt2)"
    legend_constants[25] = "c_CaMKb in component calcium_fluxes (dimensionless)"
    legend_constants[26] = "cd_CaMKb in component calcium_fluxes (micromolar)"
    legend_constants[27] = "e_vmup in component calcium_fluxes (dimensionless)"
    legend_states[5] = "P_RyR in component calcium_fluxes (dimensionless)"
    legend_constants[28] = "v1 in component calcium_fluxes (per_millisecond)"
    legend_constants[29] = "tau_tr in component calcium_fluxes (millisecond)"
    legend_constants[30] = "v2 in component calcium_fluxes (per_millisecond)"
    legend_constants[31] = "tau_xfer in component calcium_fluxes (millisecond)"
    legend_algebraic[47] = "CaMKb in component calcium_fluxes (dimensionless)"
    legend_states[6] = "CaMKt in component calcium_fluxes (dimensionless)"
    legend_algebraic[49] = "CaMKa in component calcium_fluxes (dimensionless)"
    legend_constants[32] = "on_rate in component calcium_fluxes (per_millisecond)"
    legend_constants[33] = "off_rate in component calcium_fluxes (per_millisecond)"
    legend_algebraic[51] = "vmup in component calcium_fluxes (micromolar_per_millisecond)"
    legend_constants[34] = "Km_up in component calcium_fluxes (micromolar)"
    legend_constants[35] = "i_CaL_max in component L_type_calcium_current (picoA_per_picoF)"
    legend_states[7] = "P_O1 in component ryanodine_receptors (dimensionless)"
    legend_states[8] = "P_O2 in component ryanodine_receptors (dimensionless)"
    legend_constants[36] = "vmup_init in component calcium_fluxes (micromolar_per_millisecond)"
    legend_constants[37] = "P_ryr_const1 in component calcium_fluxes (per_millisecond)"
    legend_constants[38] = "P_ryr_const2 in component calcium_fluxes (per_millisecond)"
    legend_constants[39] = "v1_caff in component calcium_fluxes (per_millisecond)"
    legend_constants[40] = "v2_caff in component calcium_fluxes (per_millisecond)"
    legend_algebraic[2] = "P_C1 in component ryanodine_receptors (dimensionless)"
    legend_states[9] = "P_C2 in component ryanodine_receptors (dimensionless)"
    legend_constants[41] = "k_plus_a in component ryanodine_receptors (micromolar4_per_millisecond)"
    legend_constants[42] = "k_minus_a in component ryanodine_receptors (per_millisecond)"
    legend_constants[43] = "k_plus_b in component ryanodine_receptors (micromolar3_per_millisecond)"
    legend_constants[44] = "k_minus_b in component ryanodine_receptors (per_millisecond)"
    legend_constants[45] = "k_plus_c in component ryanodine_receptors (per_millisecond)"
    legend_constants[46] = "k_minus_c in component ryanodine_receptors (per_millisecond)"
    legend_constants[47] = "m in component ryanodine_receptors (dimensionless)"
    legend_constants[48] = "n in component ryanodine_receptors (dimensionless)"
    legend_constants[49] = "o2_y_gate_inf in component L_type_calcium_current (millivolt)"
    legend_constants[50] = "o_y_gate_tau in component L_type_calcium_current (millivolt)"
    legend_constants[51] = "c2_y_gate_inf in component L_type_calcium_current (dimensionless)"
    legend_constants[52] = "d2_y_gate_inf in component L_type_calcium_current (millivolt)"
    legend_constants[53] = "thr_CaL in component L_type_calcium_current (dimensionless)"
    legend_constants[54] = "d_y_gate_tau in component L_type_calcium_current (millivolt)"
    legend_constants[55] = "o1_y_gate_inf in component L_type_calcium_current (millivolt)"
    legend_constants[56] = "P_CaL in component L_type_calcium_current (per_millisecond)"
    legend_states[10] = "O in component L_type_calcium_current (dimensionless)"
    legend_algebraic[37] = "C in component L_type_calcium_current (dimensionless)"
    legend_states[11] = "I in component L_type_calcium_current (dimensionless)"
    legend_states[12] = "y_gate in component L_type_calcium_current (dimensionless)"
    legend_algebraic[3] = "y_gate_inf in component L_type_calcium_current (dimensionless)"
    legend_algebraic[14] = "y_gate_tau in component L_type_calcium_current (millisecond)"
    legend_algebraic[15] = "alpha_p in component L_type_calcium_current (per_millisecond)"
    legend_constants[186] = "alpha_m in component L_type_calcium_current (per_millisecond)"
    legend_algebraic[28] = "epsilon_p in component L_type_calcium_current (per_micromolar_millisecond)"
    legend_algebraic[33] = "epsilon_m in component L_type_calcium_current (per_millisecond)"
    legend_constants[57] = "V_L in component L_type_calcium_current (millivolt)"
    legend_constants[58] = "delta_V_L in component L_type_calcium_current (millivolt)"
    legend_constants[59] = "t_L in component L_type_calcium_current (millisecond)"
    legend_constants[60] = "phi_L in component L_type_calcium_current (dimensionless)"
    legend_constants[61] = "a in component L_type_calcium_current (dimensionless)"
    legend_constants[62] = "b in component L_type_calcium_current (dimensionless)"
    legend_constants[63] = "tau_L in component L_type_calcium_current (millisecond)"
    legend_constants[64] = "K_L in component L_type_calcium_current (micromolar)"
    legend_algebraic[4] = "expVL in component L_type_calcium_current (dimensionless)"
    legend_algebraic[55] = "FVRT in component L_type_calcium_current (dimensionless)"
    legend_algebraic[57] = "FVRT_Ca in component L_type_calcium_current (dimensionless)"
    legend_constants[65] = "const5 in component L_type_calcium_current (millivolt)"
    legend_constants[66] = "y_gate_tau_const1 in component L_type_calcium_current (millisecond)"
    legend_constants[67] = "y_gate_tau_const2 in component L_type_calcium_current (millisecond)"
    legend_constants[68] = "i_pCa_max in component calcium_pump_current (picoA_per_picoF)"
    legend_constants[69] = "Km_pCa in component calcium_pump_current (micromolar)"
    legend_algebraic[62] = "J_pCa in component calcium_pump_current (micromolar_per_millisecond)"
    legend_algebraic[64] = "J_ncx in component sodium_calcium_exchange_current (micromolar_per_millisecond)"
    legend_constants[70] = "V_max_NCX in component sodium_calcium_exchange_current (picoA_per_picoF)"
    legend_constants[71] = "K_mCao in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[72] = "K_mNai in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[73] = "K_mCai in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[74] = "K_mNao in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[75] = "eta in component sodium_calcium_exchange_current (dimensionless)"
    legend_constants[76] = "K_mAllo in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[77] = "k_sat in component sodium_calcium_exchange_current (dimensionless)"
    legend_states[13] = "Nai in component sodium_concentration (micromolar)"
    legend_constants[78] = "g_Cab in component calcium_background_current (milliS_per_microF)"
    legend_algebraic[63] = "E_CaN in component calcium_background_current (millivolt)"
    legend_algebraic[68] = "J_Cab in component calcium_background_current (micromolar_per_millisecond)"
    legend_constants[79] = "cd2_Na13 in component fast_sodium_current (dimensionless)"
    legend_constants[80] = "cd2_Na12 in component fast_sodium_current (dimensionless)"
    legend_constants[81] = "cd2_Na11 in component fast_sodium_current (dimensionless)"
    legend_constants[82] = "db_Na11 in component fast_sodium_current (millivolt)"
    legend_constants[83] = "od_Na2 in component fast_sodium_current (dimensionless)"
    legend_constants[84] = "o_Na12 in component fast_sodium_current (millivolt)"
    legend_constants[85] = "o_Na11 in component fast_sodium_current (millivolt)"
    legend_constants[86] = "da_1Na12 in component fast_sodium_current (millivolt)"
    legend_constants[87] = "da_1Na13 in component fast_sodium_current (millivolt)"
    legend_constants[88] = "c_Na11 in component fast_sodium_current (per_millisecond)"
    legend_constants[89] = "o_Na1 in component fast_sodium_current (millivolt)"
    legend_constants[90] = "ob_Na3 in component fast_sodium_current (per_millisecond)"
    legend_constants[91] = "o_Na3 in component fast_sodium_current (millivolt)"
    legend_constants[92] = "o_Na2 in component fast_sodium_current (millivolt)"
    legend_constants[93] = "d_Na3 in component fast_sodium_current (millivolt)"
    legend_constants[94] = "c_alpha_Na3 in component fast_sodium_current (per_millisecond)"
    legend_constants[95] = "cd1_Na2 in component fast_sodium_current (dimensionless)"
    legend_constants[96] = "cb_Na12 in component fast_sodium_current (per_millisecond)"
    legend_constants[97] = "cb_Na13 in component fast_sodium_current (per_millisecond)"
    legend_constants[98] = "cb_Na11 in component fast_sodium_current (per_millisecond)"
    legend_constants[99] = "cd_Na in component fast_sodium_current (dimensionless)"
    legend_constants[100] = "da_Na2 in component fast_sodium_current (millivolt)"
    legend_constants[101] = "da_Na4 in component fast_sodium_current (dimensionless)"
    legend_constants[102] = "da_Na5 in component fast_sodium_current (dimensionless)"
    legend_constants[103] = "da_1Na11 in component fast_sodium_current (millivolt)"
    legend_constants[104] = "cb_Na3 in component fast_sodium_current (per_millivolt_millisecond)"
    legend_constants[105] = "da_2Na11 in component fast_sodium_current (millivolt)"
    legend_constants[106] = "db_Na3 in component fast_sodium_current (dimensionless)"
    legend_algebraic[66] = "E_Na in component fast_sodium_current (millivolt)"
    legend_constants[107] = "g_Na in component fast_sodium_current (milliS_per_microF)"
    legend_states[14] = "O_Na in component fast_sodium_current (dimensionless)"
    legend_states[15] = "C_Na1 in component fast_sodium_current (dimensionless)"
    legend_states[16] = "C_Na2 in component fast_sodium_current (dimensionless)"
    legend_algebraic[5] = "C_Na3 in component fast_sodium_current (dimensionless)"
    legend_states[17] = "I1_Na in component fast_sodium_current (dimensionless)"
    legend_states[18] = "I2_Na in component fast_sodium_current (dimensionless)"
    legend_states[19] = "IF_Na in component fast_sodium_current (dimensionless)"
    legend_states[20] = "IC_Na2 in component fast_sodium_current (dimensionless)"
    legend_states[21] = "IC_Na3 in component fast_sodium_current (dimensionless)"
    legend_algebraic[16] = "alpha_Na11 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[38] = "beta_Na11 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[29] = "alpha_Na12 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[40] = "beta_Na12 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[34] = "alpha_Na13 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[42] = "beta_Na13 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[44] = "alpha_Na3 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[46] = "beta_Na3 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[48] = "alpha_Na2 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[50] = "beta_Na2 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[52] = "alpha_Na4 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[54] = "beta_Na4 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[56] = "alpha_Na5 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[58] = "beta_Na5 in component fast_sodium_current (per_millisecond)"
    legend_states[22] = "Ki in component potassium_concentration (micromolar)"
    legend_constants[108] = "g_Nab in component sodium_background_current (milliS_per_microF)"
    legend_constants[109] = "e_tau_aur in component ultra_rapidly_activating_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[110] = "o_iss in component ultra_rapidly_activating_delayed_rectifier_K_I (millivolt)"
    legend_constants[111] = "o_ass in component ultra_rapidly_activating_delayed_rectifier_K_I (millivolt)"
    legend_constants[112] = "o_tau_aur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_constants[113] = "d_tau_iur in component ultra_rapidly_activating_delayed_rectifier_K_I (millivolt)"
    legend_constants[114] = "o_tau_iur in component ultra_rapidly_activating_delayed_rectifier_K_I (millivolt)"
    legend_constants[115] = "c_tau_iur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_constants[116] = "d_ass in component ultra_rapidly_activating_delayed_rectifier_K_I (millivolt)"
    legend_constants[117] = "c_tau_aur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_constants[118] = "d_iss in component ultra_rapidly_activating_delayed_rectifier_K_I (millivolt)"
    legend_constants[119] = "g_Kur in component ultra_rapidly_activating_delayed_rectifier_K_I (milliS_per_microF)"
    legend_states[23] = "aur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_states[24] = "iur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[17] = "tau_aur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_algebraic[18] = "tau_iur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_algebraic[72] = "E_K in component fast_transient_outward_K_I (millivolt)"
    legend_algebraic[6] = "ass in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[7] = "iss in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_constants[120] = "tau_i_const in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_constants[121] = "o2_tau_Kss in component non_inactivating_steady_state_K_I (millisecond)"
    legend_constants[122] = "e_tau_Kss in component non_inactivating_steady_state_K_I (per_millivolt)"
    legend_constants[123] = "c_tau_Kss in component non_inactivating_steady_state_K_I (millisecond)"
    legend_constants[124] = "g_Kss in component non_inactivating_steady_state_K_I (milliS_per_microF)"
    legend_states[25] = "aKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_constants[125] = "iKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_algebraic[19] = "tau_Kss in component non_inactivating_steady_state_K_I (millisecond)"
    legend_constants[126] = "c_beta_i in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[127] = "o_alpha_i in component rapid_delayed_rectifier_K_I (millivolt)"
    legend_constants[128] = "e_alpha_i in component rapid_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[129] = "c_alpha_a1 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[130] = "c_alpha_a0 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[131] = "c_alpha_i in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[132] = "e_alpha_a1 in component rapid_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[133] = "o_beta_i in component rapid_delayed_rectifier_K_I (millivolt)"
    legend_constants[134] = "e_beta_a0 in component rapid_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[135] = "e_beta_a1 in component rapid_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[136] = "e_alpha_a0 in component rapid_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[137] = "c_beta_a0 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[138] = "c_beta_a1 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[139] = "e_beta_i in component rapid_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[140] = "g_Kr in component rapid_delayed_rectifier_K_I (milliS_per_microF)"
    legend_states[26] = "O_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_states[27] = "C_K1 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_states[28] = "C_K2 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[8] = "C_K0 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_states[29] = "I_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[20] = "alpha_a0 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[30] = "beta_a0 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[141] = "kb in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[142] = "kf in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[9] = "alpha_a1 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[21] = "beta_a1 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[31] = "alpha_i in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[35] = "beta_i in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[143] = "ce_beta_n in component slow_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[144] = "c_beta_n in component slow_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[145] = "ce_alpha_n in component slow_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[146] = "c_alpha_n in component slow_delayed_rectifier_K_I (per_millivolt_millisecond)"
    legend_constants[147] = "o_beta_n in component slow_delayed_rectifier_K_I (millivolt)"
    legend_constants[148] = "g_Ks in component slow_delayed_rectifier_K_I (milliS_per_microF)"
    legend_states[30] = "nKs in component slow_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[10] = "alpha_n in component slow_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[22] = "beta_n in component slow_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[149] = "o_alpha_a in component fast_transient_outward_K_I (millivolt)"
    legend_constants[150] = "o_itof in component fast_transient_outward_K_I (millivolt)"
    legend_constants[151] = "c_beta_a in component fast_transient_outward_K_I (per_millisecond)"
    legend_constants[152] = "c_alpha_a in component fast_transient_outward_K_I (per_millisecond)"
    legend_constants[153] = "e_alpha_a in component fast_transient_outward_K_I (per_millivolt)"
    legend_constants[154] = "o1_tau_ito_f in component fast_transient_outward_K_I (millisecond)"
    legend_constants[155] = "o_beta_a in component fast_transient_outward_K_I (millivolt)"
    legend_constants[156] = "d_itof_iss in component fast_transient_outward_K_I (millivolt)"
    legend_constants[157] = "c_tau_ito_f in component fast_transient_outward_K_I (millisecond)"
    legend_constants[158] = "e_beta_a in component fast_transient_outward_K_I (per_millivolt)"
    legend_constants[159] = "g_Kto_f in component fast_transient_outward_K_I (milliS_per_microF)"
    legend_states[31] = "ato_f in component fast_transient_outward_K_I (dimensionless)"
    legend_states[32] = "ito_f in component fast_transient_outward_K_I (dimensionless)"
    legend_algebraic[11] = "alpha_a in component fast_transient_outward_K_I (per_millisecond)"
    legend_algebraic[23] = "beta_a in component fast_transient_outward_K_I (per_millisecond)"
    legend_algebraic[12] = "itof_iss in component fast_transient_outward_K_I (dimensionless)"
    legend_algebraic[24] = "tau_ito_f in component fast_transient_outward_K_I (millisecond)"
    legend_constants[160] = "ce_K1 in component time_independent_K_I (per_millivolt)"
    legend_constants[161] = "o_Ko in component time_independent_K_I (micromolar)"
    legend_constants[162] = "g_K1 in component time_independent_K_I (milliS_per_microF)"
    legend_constants[163] = "d_tau_ti_s in component slow_transient_outward_K_I (millivolt)"
    legend_constants[164] = "c_tau_ti_s in component slow_transient_outward_K_I (millisecond)"
    legend_constants[165] = "o1_tau_ta_s in component slow_transient_outward_K_I (millisecond)"
    legend_constants[166] = "c_tau_ta_s in component slow_transient_outward_K_I (millisecond)"
    legend_constants[167] = "o_tau_ti in component slow_transient_outward_K_I (millivolt)"
    legend_constants[168] = "o0_tau_ti_S in component slow_transient_outward_K_I (millisecond)"
    legend_constants[169] = "e_tau_ta_s in component slow_transient_outward_K_I (per_millivolt)"
    legend_constants[170] = "g_Kto_s in component slow_transient_outward_K_I (milliS_per_microF)"
    legend_states[33] = "ato_s in component slow_transient_outward_K_I (dimensionless)"
    legend_states[34] = "ito_s in component slow_transient_outward_K_I (dimensionless)"
    legend_algebraic[25] = "tau_ta_s in component slow_transient_outward_K_I (millisecond)"
    legend_algebraic[26] = "tau_ti_s in component slow_transient_outward_K_I (millisecond)"
    legend_constants[171] = "cd_sigma in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[172] = "e_f_NaK in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[173] = "cd2_f_NaK in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[174] = "cd1_f_NaK in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[175] = "e_i_NaK in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[176] = "d_sigma in component sodium_potassium_pump_current (micromolar)"
    legend_constants[177] = "i_NaK_max in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_constants[178] = "Km_Nai in component sodium_potassium_pump_current (micromolar)"
    legend_constants[179] = "Km_Ko in component sodium_potassium_pump_current (micromolar)"
    legend_algebraic[79] = "f_NaK in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[187] = "sigma in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[180] = "c_ClCa in component calcium_activated_chloride_current (dimensionless)"
    legend_constants[181] = "o_ClCa in component calcium_activated_chloride_current (millivolt)"
    legend_constants[182] = "d_ClCa in component calcium_activated_chloride_current (millivolt)"
    legend_constants[183] = "g_ClCa in component calcium_activated_chloride_current (milliS_per_microF)"
    legend_algebraic[81] = "O_ClCa in component calcium_activated_chloride_current (dimensionless)"
    legend_constants[184] = "E_Cl in component calcium_activated_chloride_current (millivolt)"
    legend_constants[185] = "Km_Cl in component calcium_activated_chloride_current (micromolar)"
    legend_rates[0] = "d/dt V in component cell (millivolt)"
    legend_rates[1] = "d/dt Cai in component calcium_concentration (micromolar)"
    legend_rates[2] = "d/dt Cass in component calcium_concentration (micromolar)"
    legend_rates[3] = "d/dt CaJSR in component calcium_concentration (micromolar)"
    legend_rates[4] = "d/dt CaNSR in component calcium_concentration (micromolar)"
    legend_rates[6] = "d/dt CaMKt in component calcium_fluxes (dimensionless)"
    legend_rates[5] = "d/dt P_RyR in component calcium_fluxes (dimensionless)"
    legend_rates[7] = "d/dt P_O1 in component ryanodine_receptors (dimensionless)"
    legend_rates[8] = "d/dt P_O2 in component ryanodine_receptors (dimensionless)"
    legend_rates[9] = "d/dt P_C2 in component ryanodine_receptors (dimensionless)"
    legend_rates[10] = "d/dt O in component L_type_calcium_current (dimensionless)"
    legend_rates[11] = "d/dt I in component L_type_calcium_current (dimensionless)"
    legend_rates[12] = "d/dt y_gate in component L_type_calcium_current (dimensionless)"
    legend_rates[13] = "d/dt Nai in component sodium_concentration (micromolar)"
    legend_rates[16] = "d/dt C_Na2 in component fast_sodium_current (dimensionless)"
    legend_rates[15] = "d/dt C_Na1 in component fast_sodium_current (dimensionless)"
    legend_rates[14] = "d/dt O_Na in component fast_sodium_current (dimensionless)"
    legend_rates[19] = "d/dt IF_Na in component fast_sodium_current (dimensionless)"
    legend_rates[17] = "d/dt I1_Na in component fast_sodium_current (dimensionless)"
    legend_rates[18] = "d/dt I2_Na in component fast_sodium_current (dimensionless)"
    legend_rates[20] = "d/dt IC_Na2 in component fast_sodium_current (dimensionless)"
    legend_rates[21] = "d/dt IC_Na3 in component fast_sodium_current (dimensionless)"
    legend_rates[22] = "d/dt Ki in component potassium_concentration (micromolar)"
    legend_rates[23] = "d/dt aur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_rates[24] = "d/dt iur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_rates[25] = "d/dt aKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_rates[28] = "d/dt C_K2 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[27] = "d/dt C_K1 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[26] = "d/dt O_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[29] = "d/dt I_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[30] = "d/dt nKs in component slow_delayed_rectifier_K_I (dimensionless)"
    legend_rates[31] = "d/dt ato_f in component fast_transient_outward_K_I (dimensionless)"
    legend_rates[32] = "d/dt ito_f in component fast_transient_outward_K_I (dimensionless)"
    legend_rates[33] = "d/dt ato_s in component slow_transient_outward_K_I (dimensionless)"
    legend_rates[34] = "d/dt ito_s in component slow_transient_outward_K_I (dimensionless)"
    return (legend_states, legend_algebraic, legend_voi, legend_constants)

def initConsts():
    constants = [0.0] * sizeConstants; states = [0.0] * sizeStates;
    states[0] = -78.9452115785979
    constants[0] = 1
    constants[1] = 2.2e-5
    constants[2] = 7.7e-8
    constants[3] = 2.31e-7
    constants[4] = 2.2e-8
    constants[5] = 0.00013866
    constants[6] = 5400
    constants[7] = 134000
    constants[8] = 1400
    constants[9] = 8.314
    constants[10] = 308
    constants[11] = 96.5
    constants[12] = 0
    constants[13] = 333.333
    constants[14] = 3
    constants[15] = -15
    constants[16] = 1e6
    states[1] = 0.0949915068139801
    states[2] = 0.0954184301907784
    states[3] = 171.167969039613
    states[4] = 404.825013216286
    constants[17] = 109
    constants[18] = 50000
    constants[19] = 0.6
    constants[20] = 630
    constants[21] = 2.9982
    constants[22] = 5
    constants[23] = 1.2444
    constants[24] = 648
    constants[25] = 0.05
    constants[26] = 0.7
    constants[27] = 2.583
    states[5] = 0.000280539508743811
    constants[28] = 4.5
    constants[29] = 20
    constants[30] = 3e-5
    constants[31] = 8
    states[6] = 0.729027738385079
    constants[32] = 0.05
    constants[33] = 0.0002
    constants[34] = 0.412
    constants[35] = 7
    states[7] = 0.00571393383393735
    states[8] = 2.09864618235341e-8
    constants[36] = 0.5059
    constants[37] = -0.01
    constants[38] = -2
    constants[39] = 10
    constants[40] = 0.1
    states[9] = 0.565182571165673
    constants[41] = 0.006075
    constants[42] = 0.07125
    constants[43] = 0.00405
    constants[44] = 0.965
    constants[45] = 0.009
    constants[46] = 0.0008
    constants[47] = 3
    constants[48] = 4
    constants[49] = 40
    constants[50] = 30
    constants[51] = 0.1
    constants[52] = 6
    constants[53] = 1e-05
    constants[54] = 4
    constants[55] = 33
    constants[56] = 2.5
    states[10] = 1.23713515513533e-6
    states[11] = 0.427651445872853
    states[12] = 0.845044436980163
    constants[57] = 0
    constants[58] = 6.4489
    constants[59] = 1.5
    constants[60] = 1.798
    constants[61] = 0.0625
    constants[62] = 0.4
    constants[63] = 1150
    constants[64] = 0.3
    constants[65] = 8.2
    constants[66] = 8
    constants[67] = 315
    constants[68] = 0.0955
    constants[69] = 0.2885
    constants[70] = 3.939
    constants[71] = 1400
    constants[72] = 12000
    constants[73] = 3.6
    constants[74] = 88000
    constants[75] = 0.35
    constants[76] = 0
    constants[77] = 0.27
    states[13] = 12364.7482121793
    constants[78] = 0.0007
    constants[79] = 0.25
    constants[80] = 0.23
    constants[81] = 0.2
    constants[82] = 20.3
    constants[83] = 0.393956
    constants[84] = 2.5
    constants[85] = 2.5
    constants[86] = 15
    constants[87] = 12
    constants[88] = 3.802
    constants[89] = 2.5
    constants[90] = 0.0084
    constants[91] = 7.5
    constants[92] = 7
    constants[93] = 7.7
    constants[94] = 7e-07
    constants[95] = 0.188495
    constants[96] = 0.2
    constants[97] = 0.22
    constants[98] = 0.1917
    constants[99] = 0.1027
    constants[100] = 16.6
    constants[101] = 1000
    constants[102] = 95000
    constants[103] = 17
    constants[104] = 2e-05
    constants[105] = 150
    constants[106] = 50
    constants[107] = 16
    states[14] = 1.46826771436314e-6
    states[15] = 0.000420472760277688
    states[16] = 0.0240114508843199
    states[17] = 0.000517471697712382
    states[18] = 2.45406116958509e-5
    states[19] = 0.000306123648969581
    states[20] = 0.0174528857380179
    states[21] = 0.402980726914811
    states[22] = 115599.50642567
    constants[108] = 0.0026
    constants[109] = 0.0629
    constants[110] = 42.1
    constants[111] = 6.19
    constants[112] = 2.058
    constants[113] = 5.4
    constants[114] = 42.1
    constants[115] = 1000
    constants[116] = 9.6
    constants[117] = 0.493
    constants[118] = 5.4
    constants[119] = 0.25
    states[23] = 0.00346258606821817
    states[24] = 0.955684946168062
    constants[120] = 643
    constants[121] = 13.17
    constants[122] = 0.05
    constants[123] = 39.3
    constants[124] = 0.0595
    states[25] = 0.287585636847048
    constants[125] = 1
    constants[126] = 0.006497
    constants[127] = 5
    constants[128] = 0.0287
    constants[129] = 0.0335
    constants[130] = 0.022348
    constants[131] = 0.0703
    constants[132] = 0.0109
    constants[133] = 5
    constants[134] = 0.0631
    constants[135] = 0.04178
    constants[136] = 0.01176
    constants[137] = 0.047002
    constants[138] = 6.89e-05
    constants[139] = 0.03268
    constants[140] = 0.0165
    states[26] = 0.0131742086125972
    states[27] = 0.0011733433957123
    states[28] = 0.00105586824723736
    states[29] = 0.00140618453684944
    constants[141] = 0.036778
    constants[142] = 0.023761
    constants[143] = 0.038
    constants[144] = 9.53333e-05
    constants[145] = 0.128
    constants[146] = 4.81333e-06
    constants[147] = 26.5
    constants[148] = 0.00575
    states[30] = 0.00336735013094628
    constants[149] = 45
    constants[150] = 51.4
    constants[151] = 0.3956
    constants[152] = 0.18064
    constants[153] = 0.03577
    constants[154] = 9.6645
    constants[155] = 45
    constants[156] = 5
    constants[157] = 10.9362
    constants[158] = 0.06237
    constants[159] = 0.5347
    states[31] = 0.0142335908879204
    states[32] = 0.996989882138174
    constants[160] = 0.0896
    constants[161] = 210
    constants[162] = 0.35
    constants[163] = 5.7
    constants[164] = 1050
    constants[165] = 2.058
    constants[166] = 0.493
    constants[167] = 45.2
    constants[168] = 270
    constants[169] = 0.0629
    constants[170] = 0
    states[33] = 0.0443263407760382
    states[34] = 0.887568880831388
    constants[171] = 7
    constants[172] = 0.1
    constants[173] = 0.0365
    constants[174] = 0.1245
    constants[175] = 2.4
    constants[176] = 67300
    constants[177] = 2.486
    constants[178] = 16600
    constants[179] = 1500
    constants[180] = 0.2
    constants[181] = 46.7
    constants[182] = 7.8
    constants[183] = 10
    constants[184] = -40
    constants[185] = 10
    constants[186] = constants[60]/constants[59]
    constants[187] = (1.00000/constants[171])*((exp((constants[7]/constants[176])))-1.00000)
    return (states, constants)

def computeRates(voi, states, constants):
    rates = [0.0] * sizeStates; algebraic = [0.0] * sizeAlgebraic
    rates[8] = constants[43]*(states[2]**constants[47])*states[7]-constants[44]*states[8]
    rates[9] = constants[45]*states[7]-constants[46]*states[9]
    algebraic[2] = 1.00000-(states[9]+states[7]+states[8])
    rates[7] = (constants[41]*(states[2]**constants[48])*algebraic[2]+constants[44]*states[8]+constants[46]*states[9])-(constants[42]*states[7]+constants[43]*(states[2]**constants[47])*states[7]+constants[45]*states[7])
    algebraic[3] = 1.00000/(1.00000+(exp(((states[0]+constants[55])/constants[65]))))+constants[51]/(1.00000+(exp(((-states[0]+constants[49])/constants[52]))))
    algebraic[14] = constants[66]+constants[67]/(1.00000+(exp(((states[0]+constants[50])/constants[54]))))
    rates[12] = (algebraic[3]-states[12])/algebraic[14]
    algebraic[17] = constants[117]*(exp((-constants[109]*states[0])))+constants[112]
    algebraic[6] = 1.00000/(1.00000+(exp((-(states[0]+constants[111])/constants[116]))))
    rates[23] = (algebraic[6]-states[23])/algebraic[17]
    algebraic[18] = constants[120]+constants[115]/(1.00000+(exp(((states[0]+constants[114])/constants[113]))))
    algebraic[7] = 1.00000/(1.00000+(exp(((states[0]+constants[110])/constants[118]))))
    rates[24] = (algebraic[7]-states[24])/algebraic[18]
    algebraic[19] = constants[123]*(exp((-constants[122]*states[0])))+constants[121]
    rates[25] = (algebraic[6]-states[25])/algebraic[19]
    algebraic[9] = constants[129]*(exp((constants[132]*states[0])))
    algebraic[21] = constants[138]*(exp((-constants[135]*states[0])))
    rates[28] = (constants[142]*states[27]+algebraic[21]*states[26])-(constants[141]*states[28]+algebraic[9]*states[28])
    algebraic[10] = (constants[146]*(states[0]+constants[147]))/(1.00000-(exp((-constants[145]*(states[0]+constants[147])))))
    algebraic[22] = constants[144]*(exp((-constants[143]*(states[0]+constants[147]))))
    rates[30] = algebraic[10]*(1.00000-states[30])-algebraic[22]*states[30]
    algebraic[11] = constants[152]*(exp((constants[153]*(states[0]+constants[149]))))
    algebraic[23] = constants[151]*(exp((-constants[158]*(states[0]+constants[155]))))
    rates[31] = algebraic[11]*(1.00000-states[31])-algebraic[23]*states[31]
    algebraic[12] = 1.00000/(1.00000+(exp(((states[0]+constants[150])/constants[156]))))
    algebraic[24] = constants[154]+constants[157]/(1.00000+(exp(((states[0]+constants[150])/constants[156]))))
    rates[32] = (algebraic[12]-states[32])/algebraic[24]
    algebraic[25] = constants[166]*(exp((-constants[169]*states[0])))+constants[165]
    rates[33] = (algebraic[6]-states[33])/algebraic[25]
    algebraic[26] = constants[168]+constants[164]/(1.00000+(exp(((states[0]+constants[167])/constants[163]))))
    rates[34] = (algebraic[7]-states[34])/algebraic[26]
    algebraic[8] = 1.00000-(states[27]+states[28]+states[26]+states[29])
    algebraic[20] = constants[130]*(exp((constants[136]*states[0])))
    algebraic[30] = constants[137]*(exp((-constants[134]*states[0])))
    rates[27] = (algebraic[20]*algebraic[8]+constants[141]*states[28])-(algebraic[30]*states[27]+constants[142]*states[27])
    algebraic[31] = constants[131]*(exp((constants[128]*(states[0]+constants[127]))))
    algebraic[35] = constants[126]*(exp((-constants[139]*(states[0]+constants[133]))))
    rates[26] = (algebraic[9]*states[28]+algebraic[35]*states[29])-(algebraic[21]*states[26]+algebraic[31]*states[26])
    rates[29] = algebraic[31]*states[26]-algebraic[35]*states[29]
    algebraic[37] = (1.00000-states[10])-states[11]
    algebraic[4] = exp(((states[0]-constants[57])/constants[58]))
    algebraic[15] = algebraic[4]/(constants[59]*(algebraic[4]+1.00000))
    rates[10] = algebraic[15]*algebraic[37]-constants[186]*states[10]
    algebraic[28] = (algebraic[4]+constants[61])/(constants[63]*constants[64]*(algebraic[4]+1.00000))
    algebraic[33] = (constants[62]*(algebraic[4]+constants[61]))/(constants[63]*(constants[62]*algebraic[4]+constants[61]))
    rates[11] = algebraic[28]*states[2]*algebraic[37]-algebraic[33]*states[11]
    algebraic[36] = (1.00000+(constants[18]*constants[20])/((constants[20]+states[3])**2.00000))**(-1.00000)
    algebraic[39] = custom_piecewise([less(VOI , constants[13]*constants[16]), constants[28]*(states[7]+states[8])*(states[3]-states[2])*states[5] , True, constants[39]*(states[3]-states[2])])
    algebraic[43] = (states[4]-states[3])/constants[29]
    rates[3] = algebraic[36]*(algebraic[43]-algebraic[39])
    algebraic[5] = 1.00000-(states[14]+states[15]+states[16]+states[19]+states[17]+states[18]+states[20]+states[21])
    algebraic[16] = constants[88]/(constants[99]*(exp((-(states[0]+constants[89])/constants[103])))+constants[81]*(exp((-(states[0]+constants[89])/constants[105]))))
    algebraic[38] = constants[98]*(exp((-(states[0]+constants[85])/constants[82])))
    algebraic[29] = constants[88]/(constants[99]*(exp((-(states[0]+constants[89])/constants[86])))+constants[80]*(exp((-(states[0]+constants[89])/constants[105]))))
    algebraic[40] = constants[96]*(exp((-(states[0]-constants[84])/constants[82])))
    algebraic[44] = constants[94]*(exp((-(states[0]+constants[92])/constants[93])))
    algebraic[46] = constants[90]+constants[104]*(states[0]+constants[92])
    rates[16] = (algebraic[16]*algebraic[5]+algebraic[40]*states[15]+algebraic[44]*states[20])-(algebraic[38]*states[16]+algebraic[29]*states[16]+algebraic[46]*states[16])
    algebraic[34] = constants[88]/(constants[99]*(exp((-(states[0]+constants[89])/constants[87])))+constants[79]*(exp((-(states[0]+constants[89])/constants[105]))))
    algebraic[42] = constants[97]*(exp((-(states[0]-constants[91])/constants[82])))
    rates[15] = (algebraic[29]*states[16]+algebraic[42]*states[14]+algebraic[44]*states[19])-(algebraic[40]*states[15]+algebraic[34]*states[15]+algebraic[46]*states[15])
    rates[20] = (algebraic[16]*states[21]+algebraic[40]*states[19]+algebraic[46]*states[16])-(algebraic[38]*states[20]+algebraic[29]*states[20]+algebraic[44]*states[20])
    rates[21] = (algebraic[38]*states[20]+algebraic[46]*algebraic[5])-(algebraic[16]*states[21]+algebraic[44]*states[21])
    algebraic[47] = (constants[25]*(1.00000-states[6])*1.00000)/(1.00000+constants[26]/states[2])
    rates[6] = constants[32]*algebraic[47]*(algebraic[47]+states[6])-constants[33]*states[6]
    algebraic[48] = 1.00000/(constants[95]*(exp((-(states[0]+constants[92])/constants[100])))+constants[83])
    algebraic[50] = (algebraic[34]*algebraic[48]*algebraic[44])/(algebraic[42]*algebraic[46])
    rates[14] = (algebraic[34]*states[15]+algebraic[50]*states[19])-(algebraic[42]*states[14]+algebraic[48]*states[14])
    algebraic[41] = custom_piecewise([less(VOI , constants[13]*constants[16]), constants[30]*(states[4]-states[1]) , True, constants[40]*(states[4]-states[1])])
    algebraic[49] = algebraic[47]+states[6]
    algebraic[51] = ((constants[21]*(algebraic[49]**constants[27]))/((constants[23]**constants[27])+(algebraic[49]**constants[27]))+1.00000)*constants[36]
    algebraic[53] = (algebraic[51]*(states[1]**2.00000))/((constants[34]**2.00000)+(states[1]**2.00000))
    rates[4] = ((algebraic[53]-algebraic[41])*constants[1])/constants[3]-(algebraic[43]*constants[2])/constants[3]
    algebraic[52] = algebraic[48]/constants[101]
    algebraic[54] = algebraic[44]
    rates[19] = (algebraic[48]*states[14]+algebraic[46]*states[15]+algebraic[54]*states[17]+algebraic[29]*states[20])-(algebraic[50]*states[19]+algebraic[44]*states[19]+algebraic[52]*states[19]+algebraic[40]*states[19])
    algebraic[56] = algebraic[48]/constants[102]
    algebraic[58] = algebraic[44]/constants[106]
    rates[17] = (algebraic[52]*states[19]+algebraic[58]*states[18])-(algebraic[54]*states[17]+algebraic[56]*states[17])
    rates[18] = algebraic[56]*states[17]-algebraic[58]*states[18]
    algebraic[55] = (constants[11]*states[0])/(constants[9]*constants[10])
    algebraic[57] = 2.00000*algebraic[55]
    algebraic[59] = custom_piecewise([greater((fabs(algebraic[57])) , constants[53]), ((((-constants[56]*2.00000*constants[4]*constants[11])/(constants[5]*constants[0]))*states[10]*states[12]*algebraic[57])/(1.00000-(exp((-algebraic[57])))))*(constants[8]*(exp((-algebraic[57])))-states[2]) , True, ((((-constants[56]*2.00000*constants[4]*constants[11])/(constants[5]*constants[0]))*states[10]*states[12]*constants[53])/(1.00000-(exp((-constants[53])))))*(constants[8]*(exp((-constants[53])))-states[2])])
    algebraic[32] = (1.00000+(constants[17]*constants[19])/((constants[19]+states[2])**2.00000))**(-1.00000)
    algebraic[45] = (states[2]-states[1])/constants[31]
    rates[2] = algebraic[32]*((algebraic[39]*constants[2])/constants[4]-((algebraic[45]*constants[1])/constants[4]+(algebraic[59]*constants[5]*constants[0])/(2.00000*constants[4]*constants[11])))
    rates[5] = constants[37]*states[5]+((constants[38]*algebraic[59])/constants[35])*(exp((-((states[0]-constants[22])**2.00000)/constants[24])))
    algebraic[60] = (constants[68]*(states[1]**2.00000))/((constants[69]**2.00000)+(states[1]**2.00000))
    algebraic[61] = ((constants[70]/(1.00000+((constants[76]/states[1])**2.00000)))*((states[13]**3.00000)*constants[8]*(exp(((constants[75]*states[0]*constants[11])/(constants[9]*constants[10]))))-(constants[7]**3.00000)*states[1]*(exp((((constants[75]-1.00000)*states[0]*constants[11])/(constants[9]*constants[10]))))))/((constants[71]*(states[13]**3.00000)+(constants[74]**3.00000)*states[1]+(constants[72]**3.00000)*constants[8]*(1.00000+states[1]/constants[73])+constants[73]*(constants[7]**3.00000)*(1.00000+((states[13]/constants[72])**3.00000))+(states[13]**3.00000)*constants[8]+(constants[7]**3.00000)*states[1])*(1.00000+constants[77]*(exp((((constants[75]-1.00000)*states[0]*constants[11])/(constants[9]*constants[10]))))))
    algebraic[63] = ((constants[9]*constants[10])/(2.00000*constants[11]))*(log((constants[8]/states[1])))
    algebraic[65] = constants[78]*(states[0]-algebraic[63])
    algebraic[27] = (1.00000+(constants[17]*constants[19])/((constants[19]+states[1])**2.00000))**(-1.00000)
    rates[1] = algebraic[27]*(((algebraic[41]+algebraic[45])-(((algebraic[65]+algebraic[60])-2.00000*algebraic[61])*constants[5]*constants[0])/(2.00000*constants[1]*constants[11]))-algebraic[53])
    algebraic[66] = ((constants[9]*constants[10])/constants[11])*(log(((0.900000*constants[7]+0.100000*constants[6])/(0.900000*states[13]+0.100000*states[22]))))
    algebraic[69] = constants[107]*states[14]*(states[0]-algebraic[66])
    algebraic[70] = constants[108]*(states[0]-algebraic[66])
    algebraic[79] = 1.00000/(1.00000+constants[174]*(exp(((-constants[172]*states[0]*constants[11])/(constants[9]*constants[10]))))+constants[173]*constants[187]*(exp(((-states[0]*constants[11])/(constants[9]*constants[10])))))
    algebraic[80] = (((constants[177]*algebraic[79]*1.00000)/(1.00000+((constants[178]/states[13])**constants[175])))*constants[6])/(constants[6]+constants[179])
    rates[13] = (-(algebraic[69]+algebraic[70]+3.00000*algebraic[80]+3.00000*algebraic[61])*constants[5]*constants[0])/(constants[1]*constants[11])
    algebraic[72] = ((constants[9]*constants[10])/constants[11])*(log((constants[6]/states[22])))
    algebraic[76] = constants[159]*(states[31]**3.00000)*states[32]*(states[0]-algebraic[72])
    algebraic[78] = constants[170]*states[33]*states[34]*(states[0]-algebraic[72])
    algebraic[77] = (((constants[162]*constants[6])/(constants[6]+constants[161]))*(states[0]-algebraic[72]))/(1.00000+(exp((constants[160]*(states[0]-algebraic[72])))))
    algebraic[75] = constants[148]*(states[30]**2.00000)*(states[0]-algebraic[72])
    algebraic[73] = constants[119]*states[23]*states[24]*(states[0]-algebraic[72])
    algebraic[74] = constants[124]*states[25]*constants[125]*(states[0]-algebraic[72])
    algebraic[71] = constants[140]*states[26]*(states[0]-((constants[9]*constants[10])/constants[11])*(log(((0.980000*constants[6]+0.0200000*constants[7])/(0.980000*states[22]+0.0200000*states[13])))))
    algebraic[0] = (floor((VOI/constants[13])))*constants[13]
    algebraic[13] = custom_piecewise([greater_equal(VOI-algebraic[0] , constants[12]) & less_equal(VOI-algebraic[0] , constants[12]+constants[14]) & less(VOI , constants[13]*constants[16]), constants[15] , True, 0.000000])
    rates[22] = (-((algebraic[13]+algebraic[76]+algebraic[78]+algebraic[77]+algebraic[75]+algebraic[74]+algebraic[73]+algebraic[71])-2.00000*algebraic[80])*constants[5]*constants[0])/(constants[1]*constants[11])
    algebraic[81] = constants[180]/(1.00000+(exp((-(states[0]-constants[181])/constants[182]))))
    algebraic[82] = ((constants[183]*algebraic[81]*states[1])/(states[1]+constants[185]))*(states[0]-constants[184])
    rates[0] = -(algebraic[59]+algebraic[60]+algebraic[61]+algebraic[65]+algebraic[69]+algebraic[70]+algebraic[80]+algebraic[76]+algebraic[78]+algebraic[77]+algebraic[75]+algebraic[73]+algebraic[74]+algebraic[71]+algebraic[82]+algebraic[13])
    return(rates)

def computeAlgebraic(constants, states, voi):
    algebraic = array([[0.0] * len(voi)] * sizeAlgebraic)
    states = array(states)
    voi = array(voi)
    algebraic[2] = 1.00000-(states[9]+states[7]+states[8])
    algebraic[3] = 1.00000/(1.00000+(exp(((states[0]+constants[55])/constants[65]))))+constants[51]/(1.00000+(exp(((-states[0]+constants[49])/constants[52]))))
    algebraic[14] = constants[66]+constants[67]/(1.00000+(exp(((states[0]+constants[50])/constants[54]))))
    algebraic[17] = constants[117]*(exp((-constants[109]*states[0])))+constants[112]
    algebraic[6] = 1.00000/(1.00000+(exp((-(states[0]+constants[111])/constants[116]))))
    algebraic[18] = constants[120]+constants[115]/(1.00000+(exp(((states[0]+constants[114])/constants[113]))))
    algebraic[7] = 1.00000/(1.00000+(exp(((states[0]+constants[110])/constants[118]))))
    algebraic[19] = constants[123]*(exp((-constants[122]*states[0])))+constants[121]
    algebraic[9] = constants[129]*(exp((constants[132]*states[0])))
    algebraic[21] = constants[138]*(exp((-constants[135]*states[0])))
    algebraic[10] = (constants[146]*(states[0]+constants[147]))/(1.00000-(exp((-constants[145]*(states[0]+constants[147])))))
    algebraic[22] = constants[144]*(exp((-constants[143]*(states[0]+constants[147]))))
    algebraic[11] = constants[152]*(exp((constants[153]*(states[0]+constants[149]))))
    algebraic[23] = constants[151]*(exp((-constants[158]*(states[0]+constants[155]))))
    algebraic[12] = 1.00000/(1.00000+(exp(((states[0]+constants[150])/constants[156]))))
    algebraic[24] = constants[154]+constants[157]/(1.00000+(exp(((states[0]+constants[150])/constants[156]))))
    algebraic[25] = constants[166]*(exp((-constants[169]*states[0])))+constants[165]
    algebraic[26] = constants[168]+constants[164]/(1.00000+(exp(((states[0]+constants[167])/constants[163]))))
    algebraic[8] = 1.00000-(states[27]+states[28]+states[26]+states[29])
    algebraic[20] = constants[130]*(exp((constants[136]*states[0])))
    algebraic[30] = constants[137]*(exp((-constants[134]*states[0])))
    algebraic[31] = constants[131]*(exp((constants[128]*(states[0]+constants[127]))))
    algebraic[35] = constants[126]*(exp((-constants[139]*(states[0]+constants[133]))))
    algebraic[37] = (1.00000-states[10])-states[11]
    algebraic[4] = exp(((states[0]-constants[57])/constants[58]))
    algebraic[15] = algebraic[4]/(constants[59]*(algebraic[4]+1.00000))
    algebraic[28] = (algebraic[4]+constants[61])/(constants[63]*constants[64]*(algebraic[4]+1.00000))
    algebraic[33] = (constants[62]*(algebraic[4]+constants[61]))/(constants[63]*(constants[62]*algebraic[4]+constants[61]))
    algebraic[36] = (1.00000+(constants[18]*constants[20])/((constants[20]+states[3])**2.00000))**(-1.00000)
    algebraic[39] = custom_piecewise([less(VOI , constants[13]*constants[16]), constants[28]*(states[7]+states[8])*(states[3]-states[2])*states[5] , True, constants[39]*(states[3]-states[2])])
    algebraic[43] = (states[4]-states[3])/constants[29]
    algebraic[5] = 1.00000-(states[14]+states[15]+states[16]+states[19]+states[17]+states[18]+states[20]+states[21])
    algebraic[16] = constants[88]/(constants[99]*(exp((-(states[0]+constants[89])/constants[103])))+constants[81]*(exp((-(states[0]+constants[89])/constants[105]))))
    algebraic[38] = constants[98]*(exp((-(states[0]+constants[85])/constants[82])))
    algebraic[29] = constants[88]/(constants[99]*(exp((-(states[0]+constants[89])/constants[86])))+constants[80]*(exp((-(states[0]+constants[89])/constants[105]))))
    algebraic[40] = constants[96]*(exp((-(states[0]-constants[84])/constants[82])))
    algebraic[44] = constants[94]*(exp((-(states[0]+constants[92])/constants[93])))
    algebraic[46] = constants[90]+constants[104]*(states[0]+constants[92])
    algebraic[34] = constants[88]/(constants[99]*(exp((-(states[0]+constants[89])/constants[87])))+constants[79]*(exp((-(states[0]+constants[89])/constants[105]))))
    algebraic[42] = constants[97]*(exp((-(states[0]-constants[91])/constants[82])))
    algebraic[47] = (constants[25]*(1.00000-states[6])*1.00000)/(1.00000+constants[26]/states[2])
    algebraic[48] = 1.00000/(constants[95]*(exp((-(states[0]+constants[92])/constants[100])))+constants[83])
    algebraic[50] = (algebraic[34]*algebraic[48]*algebraic[44])/(algebraic[42]*algebraic[46])
    algebraic[41] = custom_piecewise([less(VOI , constants[13]*constants[16]), constants[30]*(states[4]-states[1]) , True, constants[40]*(states[4]-states[1])])
    algebraic[49] = algebraic[47]+states[6]
    algebraic[51] = ((constants[21]*(algebraic[49]**constants[27]))/((constants[23]**constants[27])+(algebraic[49]**constants[27]))+1.00000)*constants[36]
    algebraic[53] = (algebraic[51]*(states[1]**2.00000))/((constants[34]**2.00000)+(states[1]**2.00000))
    algebraic[52] = algebraic[48]/constants[101]
    algebraic[54] = algebraic[44]
    algebraic[56] = algebraic[48]/constants[102]
    algebraic[58] = algebraic[44]/constants[106]
    algebraic[55] = (constants[11]*states[0])/(constants[9]*constants[10])
    algebraic[57] = 2.00000*algebraic[55]
    algebraic[59] = custom_piecewise([greater((fabs(algebraic[57])) , constants[53]), ((((-constants[56]*2.00000*constants[4]*constants[11])/(constants[5]*constants[0]))*states[10]*states[12]*algebraic[57])/(1.00000-(exp((-algebraic[57])))))*(constants[8]*(exp((-algebraic[57])))-states[2]) , True, ((((-constants[56]*2.00000*constants[4]*constants[11])/(constants[5]*constants[0]))*states[10]*states[12]*constants[53])/(1.00000-(exp((-constants[53])))))*(constants[8]*(exp((-constants[53])))-states[2])])
    algebraic[32] = (1.00000+(constants[17]*constants[19])/((constants[19]+states[2])**2.00000))**(-1.00000)
    algebraic[45] = (states[2]-states[1])/constants[31]
    algebraic[60] = (constants[68]*(states[1]**2.00000))/((constants[69]**2.00000)+(states[1]**2.00000))
    algebraic[61] = ((constants[70]/(1.00000+((constants[76]/states[1])**2.00000)))*((states[13]**3.00000)*constants[8]*(exp(((constants[75]*states[0]*constants[11])/(constants[9]*constants[10]))))-(constants[7]**3.00000)*states[1]*(exp((((constants[75]-1.00000)*states[0]*constants[11])/(constants[9]*constants[10]))))))/((constants[71]*(states[13]**3.00000)+(constants[74]**3.00000)*states[1]+(constants[72]**3.00000)*constants[8]*(1.00000+states[1]/constants[73])+constants[73]*(constants[7]**3.00000)*(1.00000+((states[13]/constants[72])**3.00000))+(states[13]**3.00000)*constants[8]+(constants[7]**3.00000)*states[1])*(1.00000+constants[77]*(exp((((constants[75]-1.00000)*states[0]*constants[11])/(constants[9]*constants[10]))))))
    algebraic[63] = ((constants[9]*constants[10])/(2.00000*constants[11]))*(log((constants[8]/states[1])))
    algebraic[65] = constants[78]*(states[0]-algebraic[63])
    algebraic[27] = (1.00000+(constants[17]*constants[19])/((constants[19]+states[1])**2.00000))**(-1.00000)
    algebraic[66] = ((constants[9]*constants[10])/constants[11])*(log(((0.900000*constants[7]+0.100000*constants[6])/(0.900000*states[13]+0.100000*states[22]))))
    algebraic[69] = constants[107]*states[14]*(states[0]-algebraic[66])
    algebraic[70] = constants[108]*(states[0]-algebraic[66])
    algebraic[79] = 1.00000/(1.00000+constants[174]*(exp(((-constants[172]*states[0]*constants[11])/(constants[9]*constants[10]))))+constants[173]*constants[187]*(exp(((-states[0]*constants[11])/(constants[9]*constants[10])))))
    algebraic[80] = (((constants[177]*algebraic[79]*1.00000)/(1.00000+((constants[178]/states[13])**constants[175])))*constants[6])/(constants[6]+constants[179])
    algebraic[72] = ((constants[9]*constants[10])/constants[11])*(log((constants[6]/states[22])))
    algebraic[76] = constants[159]*(states[31]**3.00000)*states[32]*(states[0]-algebraic[72])
    algebraic[78] = constants[170]*states[33]*states[34]*(states[0]-algebraic[72])
    algebraic[77] = (((constants[162]*constants[6])/(constants[6]+constants[161]))*(states[0]-algebraic[72]))/(1.00000+(exp((constants[160]*(states[0]-algebraic[72])))))
    algebraic[75] = constants[148]*(states[30]**2.00000)*(states[0]-algebraic[72])
    algebraic[73] = constants[119]*states[23]*states[24]*(states[0]-algebraic[72])
    algebraic[74] = constants[124]*states[25]*constants[125]*(states[0]-algebraic[72])
    algebraic[71] = constants[140]*states[26]*(states[0]-((constants[9]*constants[10])/constants[11])*(log(((0.980000*constants[6]+0.0200000*constants[7])/(0.980000*states[22]+0.0200000*states[13])))))
    algebraic[0] = (floor((VOI/constants[13])))*constants[13]
    algebraic[13] = custom_piecewise([greater_equal(VOI-algebraic[0] , constants[12]) & less_equal(VOI-algebraic[0] , constants[12]+constants[14]) & less(VOI , constants[13]*constants[16]), constants[15] , True, 0.000000])
    algebraic[81] = constants[180]/(1.00000+(exp((-(states[0]-constants[181])/constants[182]))))
    algebraic[82] = ((constants[183]*algebraic[81]*states[1])/(states[1]+constants[185]))*(states[0]-constants[184])
    algebraic[1] = (((states[3]*constants[18])/(states[3]+constants[20]))*constants[2])/constants[1]+(states[4]*constants[3])/constants[1]
    algebraic[62] = (-algebraic[60]*constants[5]*constants[0])/(2.00000*constants[1]*constants[11])
    algebraic[64] = (algebraic[61]*constants[5]*constants[0])/(constants[1]*constants[11])
    algebraic[67] = (-((algebraic[65]+algebraic[60])-2.00000*algebraic[61])*constants[5]*constants[0])/(2.00000*constants[1]*constants[11])
    algebraic[68] = (-algebraic[65]*constants[5]*constants[0])/(2.00000*constants[1]*constants[11])
    return algebraic

def custom_piecewise(cases):
    """Compute result of a piecewise function"""
    return select(cases[0::2],cases[1::2])

def solve_model():
    """Solve model with ODE solver"""
    from scipy.integrate import ode
    # Initialise constants and state variables
    (init_states, constants) = initConsts()

    # Set timespan to solve over
    voi = linspace(0, 10, 500)

    # Construct ODE object to solve
    r = ode(computeRates)
    r.set_integrator('vode', method='bdf', atol=1e-006, rtol=1e-006, max_step=1)
    r.set_initial_value(init_states, voi[0])
    r.set_f_params(constants)

    # Solve model
    states = array([[0.0] * len(voi)] * sizeStates)
    states[:,0] = init_states
    for (i,t) in enumerate(voi[1:]):
        if r.successful():
            r.integrate(t)
            states[:,i+1] = r.y
        else:
            break

    # Compute algebraic variables
    algebraic = computeAlgebraic(constants, states, voi)
    return (voi, states, algebraic)

def plot_model(voi, states, algebraic):
    """Plot variables against variable of integration"""
    import pylab
    (legend_states, legend_algebraic, legend_voi, legend_constants) = createLegends()
    pylab.figure(1)
    pylab.plot(voi,vstack((states,algebraic)).T)
    pylab.xlabel(legend_voi)
    pylab.legend(legend_states + legend_algebraic, loc='best')
    pylab.show()

if __name__ == "__main__":
    (voi, states, algebraic) = solve_model()
    plot_model(voi, states, algebraic)
