# Size of variable arrays:
sizeAlgebraic = 84
sizeStates = 36
sizeConstants = 89
from math import *
from numpy import *

def createLegends():
    legend_states = [""] * sizeStates
    legend_rates = [""] * sizeStates
    legend_algebraic = [""] * sizeAlgebraic
    legend_voi = ""
    legend_constants = [""] * sizeConstants
    legend_VOI = "time in component environment (millisecond)"
    legend_states[0] = "V in component cell (millivolt)"
    legend_constants[0] = "Cm in component cell (microF_per_cm2)"
    legend_constants[1] = "Vmyo in component cell (microlitre)"
    legend_constants[2] = "VJSR in component cell (microlitre)"
    legend_constants[3] = "VNSR in component cell (microlitre)"
    legend_constants[4] = "Vss in component cell (microlitre)"
    legend_constants[5] = "Acap in component cell (cm2)"
    legend_constants[6] = "Ko in component cell (micromolar)"
    legend_constants[7] = "Nao in component cell (micromolar)"
    legend_constants[8] = "Cao in component cell (micromolar)"
    legend_constants[9] = "R in component cell (joule_per_mole_kelvin)"
    legend_constants[10] = "T in component cell (kelvin)"
    legend_constants[11] = "F in component cell (coulomb_per_millimole)"
    legend_algebraic[61] = "i_CaL in component L_type_calcium_current (picoA_per_picoF)"
    legend_algebraic[62] = "i_pCa in component calcium_pump_current (picoA_per_picoF)"
    legend_algebraic[63] = "i_NaCa in component sodium_calcium_exchange_current (picoA_per_picoF)"
    legend_algebraic[67] = "i_Cab in component calcium_background_current (picoA_per_picoF)"
    legend_algebraic[70] = "i_Na in component fast_sodium_current (picoA_per_picoF)"
    legend_algebraic[71] = "i_Nab in component sodium_background_current (picoA_per_picoF)"
    legend_algebraic[81] = "i_NaK in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_algebraic[77] = "i_Kto_f in component fast_transient_outward_K_I (picoA_per_picoF)"
    legend_algebraic[79] = "i_Kto_s in component slow_transient_outward_K_I (picoA_per_picoF)"
    legend_algebraic[78] = "i_K1 in component time_independent_K_I (picoA_per_picoF)"
    legend_algebraic[76] = "i_Ks in component slow_delayed_rectifier_K_I (picoA_per_picoF)"
    legend_algebraic[74] = "i_Kur in component ultra_rapidly_activating_delayed_rectifier_K_I (picoA_per_picoF)"
    legend_algebraic[75] = "i_Kss in component non_inactivating_steady_state_K_I (picoA_per_picoF)"
    legend_algebraic[83] = "i_ClCa in component calcium_activated_chloride_current (picoA_per_picoF)"
    legend_algebraic[72] = "i_Kr in component rapid_delayed_rectifier_K_I (picoA_per_picoF)"
    legend_constants[12] = "stim_offset in component cell (millisecond)"
    legend_constants[13] = "stim_period in component cell (millisecond)"
    legend_constants[14] = "stim_duration in component cell (millisecond)"
    legend_constants[15] = "stim_amplitude in component cell (picoA_per_picoF)"
    legend_algebraic[14] = "i_Stim in component cell (picoA_per_picoF)"
    legend_algebraic[0] = "past in component cell (millisecond)"
    legend_constants[16] = "prepulses_number in component cell (dimensionless)"
    legend_states[1] = "Cai in component calcium_concentration (micromolar)"
    legend_states[2] = "Cass in component calcium_concentration (micromolar)"
    legend_states[3] = "CaJSR in component calcium_concentration (micromolar)"
    legend_states[4] = "CaNSR in component calcium_concentration (micromolar)"
    legend_algebraic[28] = "Bi in component calcium_concentration (dimensionless)"
    legend_algebraic[33] = "Bss in component calcium_concentration (dimensionless)"
    legend_algebraic[37] = "BJSR in component calcium_concentration (dimensionless)"
    legend_constants[17] = "Bmax in component calcium_concentration (micromolar)"
    legend_constants[18] = "CSQN_tot in component calcium_concentration (micromolar)"
    legend_constants[19] = "Kd in component calcium_concentration (micromolar)"
    legend_constants[20] = "Km_CSQN in component calcium_concentration (micromolar)"
    legend_algebraic[42] = "J_leak in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[40] = "J_rel in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[54] = "J_serca in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[44] = "J_tr in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[46] = "J_xfer in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[1] = "CaSR in component calcium_concentration (micromolar)"
    legend_states[5] = "P_RyR in component calcium_fluxes (dimensionless)"
    legend_constants[21] = "v1 in component calcium_fluxes (per_millisecond)"
    legend_constants[22] = "tau_tr in component calcium_fluxes (millisecond)"
    legend_constants[23] = "v2 in component calcium_fluxes (per_millisecond)"
    legend_constants[24] = "tau_xfer in component calcium_fluxes (millisecond)"
    legend_algebraic[48] = "CaMKb in component calcium_fluxes (dimensionless)"
    legend_states[6] = "CaMKt in component calcium_fluxes (dimensionless)"
    legend_algebraic[50] = "CaMKa in component calcium_fluxes (dimensionless)"
    legend_constants[25] = "on_rate in component calcium_fluxes (per_millisecond)"
    legend_constants[26] = "off_rate in component calcium_fluxes (per_millisecond)"
    legend_algebraic[52] = "vmup in component calcium_fluxes (micromolar_per_millisecond)"
    legend_constants[27] = "Km_up in component calcium_fluxes (micromolar)"
    legend_constants[28] = "i_CaL_max in component L_type_calcium_current (picoA_per_picoF)"
    legend_states[7] = "P_O1 in component ryanodine_receptors (dimensionless)"
    legend_states[8] = "P_O2 in component ryanodine_receptors (dimensionless)"
    legend_constants[29] = "vmup_init in component calcium_fluxes (micromolar_per_millisecond)"
    legend_constants[30] = "P_ryr_const1 in component calcium_fluxes (per_millisecond)"
    legend_constants[31] = "P_ryr_const2 in component calcium_fluxes (per_millisecond)"
    legend_algebraic[2] = "P_open in component calcium_fluxes (dimensionless)"
    legend_constants[32] = "v1_caff in component calcium_fluxes (per_millisecond)"
    legend_constants[33] = "v2_caff in component calcium_fluxes (per_millisecond)"
    legend_algebraic[56] = "J_netup in component calcium_fluxes (micromolar_per_millisecond)"
    legend_constants[34] = "delta_VupCaMK_max in component calcium_fluxes (dimensionless)"
    legend_constants[35] = "Km_CaMK in component calcium_fluxes (dimensionless)"
    legend_constants[36] = "n_CaMK in component calcium_fluxes (dimensionless)"
    legend_algebraic[3] = "P_C1 in component ryanodine_receptors (dimensionless)"
    legend_states[9] = "P_C2 in component ryanodine_receptors (dimensionless)"
    legend_constants[37] = "k_plus_a in component ryanodine_receptors (micromolar4_per_millisecond)"
    legend_constants[38] = "k_minus_a in component ryanodine_receptors (per_millisecond)"
    legend_constants[39] = "k_plus_b in component ryanodine_receptors (micromolar3_per_millisecond)"
    legend_constants[40] = "k_minus_b in component ryanodine_receptors (per_millisecond)"
    legend_constants[41] = "k_plus_c in component ryanodine_receptors (per_millisecond)"
    legend_constants[42] = "k_minus_c in component ryanodine_receptors (per_millisecond)"
    legend_constants[43] = "m in component ryanodine_receptors (dimensionless)"
    legend_constants[44] = "n in component ryanodine_receptors (dimensionless)"
    legend_constants[45] = "P_CaL in component L_type_calcium_current (per_millisecond)"
    legend_states[10] = "O in component L_type_calcium_current (dimensionless)"
    legend_algebraic[38] = "C in component L_type_calcium_current (dimensionless)"
    legend_states[11] = "I in component L_type_calcium_current (dimensionless)"
    legend_states[12] = "y_gate in component L_type_calcium_current (dimensionless)"
    legend_algebraic[4] = "y_gate_inf in component L_type_calcium_current (dimensionless)"
    legend_algebraic[15] = "y_gate_tau in component L_type_calcium_current (millisecond)"
    legend_algebraic[16] = "alpha_p in component L_type_calcium_current (per_millisecond)"
    legend_constants[86] = "alpha_m in component L_type_calcium_current (per_millisecond)"
    legend_algebraic[29] = "epsilon_p in component L_type_calcium_current (per_micromolar_millisecond)"
    legend_algebraic[34] = "epsilon_m in component L_type_calcium_current (per_millisecond)"
    legend_constants[46] = "V_L in component L_type_calcium_current (millivolt)"
    legend_constants[47] = "delta_V_L in component L_type_calcium_current (millivolt)"
    legend_constants[48] = "t_L in component L_type_calcium_current (millisecond)"
    legend_constants[49] = "phi_L in component L_type_calcium_current (dimensionless)"
    legend_constants[50] = "a in component L_type_calcium_current (dimensionless)"
    legend_constants[51] = "b in component L_type_calcium_current (dimensionless)"
    legend_constants[52] = "tau_L in component L_type_calcium_current (millisecond)"
    legend_constants[53] = "K_L in component L_type_calcium_current (micromolar)"
    legend_algebraic[5] = "expVL in component L_type_calcium_current (dimensionless)"
    legend_algebraic[57] = "FVRT in component L_type_calcium_current (dimensionless)"
    legend_algebraic[59] = "FVRT_Ca in component L_type_calcium_current (dimensionless)"
    legend_constants[54] = "const5 in component L_type_calcium_current (millivolt)"
    legend_constants[55] = "y_gate_tau_const1 in component L_type_calcium_current (millisecond)"
    legend_constants[56] = "y_gate_tau_const2 in component L_type_calcium_current (millisecond)"
    legend_constants[57] = "i_pCa_max in component calcium_pump_current (picoA_per_picoF)"
    legend_constants[58] = "Km_pCa in component calcium_pump_current (micromolar)"
    legend_algebraic[64] = "J_pCa in component calcium_pump_current (micromolar_per_millisecond)"
    legend_algebraic[66] = "J_ncx in component sodium_calcium_exchange_current (micromolar_per_millisecond)"
    legend_constants[59] = "V_max_NCX in component sodium_calcium_exchange_current (picoA_per_picoF)"
    legend_constants[60] = "K_mCao in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[61] = "K_mNai in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[62] = "K_mCai in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[63] = "K_mNao in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[64] = "eta in component sodium_calcium_exchange_current (dimensionless)"
    legend_constants[65] = "K_mAllo in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[66] = "k_sat in component sodium_calcium_exchange_current (dimensionless)"
    legend_states[13] = "Nai in component sodium_concentration (micromolar)"
    legend_constants[67] = "g_Cab in component calcium_background_current (milliS_per_microF)"
    legend_algebraic[65] = "E_CaN in component calcium_background_current (millivolt)"
    legend_algebraic[69] = "J_Cab in component calcium_background_current (micromolar_per_millisecond)"
    legend_algebraic[68] = "E_Na in component fast_sodium_current (millivolt)"
    legend_constants[68] = "g_Na in component fast_sodium_current (milliS_per_microF)"
    legend_states[14] = "O_Na in component fast_sodium_current (dimensionless)"
    legend_states[15] = "C_Na1 in component fast_sodium_current (dimensionless)"
    legend_states[16] = "C_Na2 in component fast_sodium_current (dimensionless)"
    legend_algebraic[6] = "C_Na3 in component fast_sodium_current (dimensionless)"
    legend_states[17] = "I1_Na in component fast_sodium_current (dimensionless)"
    legend_states[18] = "I2_Na in component fast_sodium_current (dimensionless)"
    legend_states[19] = "IF_Na in component fast_sodium_current (dimensionless)"
    legend_states[20] = "IC_Na2 in component fast_sodium_current (dimensionless)"
    legend_states[21] = "IC_Na3 in component fast_sodium_current (dimensionless)"
    legend_algebraic[17] = "alpha_Na11 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[39] = "beta_Na11 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[30] = "alpha_Na12 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[41] = "beta_Na12 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[35] = "alpha_Na13 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[43] = "beta_Na13 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[45] = "alpha_Na3 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[47] = "beta_Na3 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[49] = "alpha_Na2 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[51] = "beta_Na2 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[53] = "alpha_Na4 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[55] = "beta_Na4 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[58] = "alpha_Na5 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[60] = "beta_Na5 in component fast_sodium_current (per_millisecond)"
    legend_states[22] = "Ki in component potassium_concentration (micromolar)"
    legend_constants[69] = "g_Nab in component sodium_background_current (milliS_per_microF)"
    legend_constants[70] = "g_Kur in component ultra_rapidly_activating_delayed_rectifier_K_I (milliS_per_microF)"
    legend_states[23] = "aur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_states[24] = "iur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[18] = "tau_aur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_algebraic[19] = "tau_iur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_algebraic[73] = "E_K in component fast_transient_outward_K_I (millivolt)"
    legend_algebraic[7] = "ass in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[8] = "iss in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_constants[71] = "tau_i_const in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_constants[72] = "g_Kss in component non_inactivating_steady_state_K_I (milliS_per_microF)"
    legend_states[25] = "aKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_states[26] = "iKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_algebraic[20] = "tau_Kss in component non_inactivating_steady_state_K_I (millisecond)"
    legend_constants[73] = "g_Kr in component rapid_delayed_rectifier_K_I (milliS_per_microF)"
    legend_states[27] = "O_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_states[28] = "C_K1 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_states[29] = "C_K2 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[9] = "C_K0 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_states[30] = "I_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[21] = "alpha_a0 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[31] = "beta_a0 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[74] = "kb in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[75] = "kf in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[10] = "alpha_a1 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[22] = "beta_a1 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[32] = "alpha_i in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[36] = "beta_i in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[76] = "g_Ks in component slow_delayed_rectifier_K_I (milliS_per_microF)"
    legend_states[31] = "nKs in component slow_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[11] = "alpha_n in component slow_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[23] = "beta_n in component slow_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[77] = "g_Kto_f in component fast_transient_outward_K_I (milliS_per_microF)"
    legend_states[32] = "ato_f in component fast_transient_outward_K_I (dimensionless)"
    legend_states[33] = "ito_f in component fast_transient_outward_K_I (dimensionless)"
    legend_algebraic[12] = "alpha_a in component fast_transient_outward_K_I (per_millisecond)"
    legend_algebraic[24] = "beta_a in component fast_transient_outward_K_I (per_millisecond)"
    legend_algebraic[13] = "itof_iss in component fast_transient_outward_K_I (dimensionless)"
    legend_algebraic[25] = "tau_ito_f in component fast_transient_outward_K_I (millisecond)"
    legend_constants[78] = "g_K1 in component time_independent_K_I (milliS_per_microF)"
    legend_constants[79] = "g_Kto_s in component slow_transient_outward_K_I (milliS_per_microF)"
    legend_states[34] = "ato_s in component slow_transient_outward_K_I (dimensionless)"
    legend_states[35] = "ito_s in component slow_transient_outward_K_I (dimensionless)"
    legend_algebraic[26] = "tau_ta_s in component slow_transient_outward_K_I (millisecond)"
    legend_algebraic[27] = "tau_ti_s in component slow_transient_outward_K_I (millisecond)"
    legend_constants[80] = "i_NaK_max in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_constants[81] = "Km_Nai in component sodium_potassium_pump_current (micromolar)"
    legend_constants[82] = "Km_Ko in component sodium_potassium_pump_current (micromolar)"
    legend_algebraic[80] = "f_NaK in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[87] = "sigma in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[83] = "g_ClCa in component calcium_activated_chloride_current (milliS_per_microF)"
    legend_algebraic[82] = "O_ClCa in component calcium_activated_chloride_current (dimensionless)"
    legend_constants[84] = "E_Cl in component calcium_activated_chloride_current (millivolt)"
    legend_constants[85] = "Km_Cl in component calcium_activated_chloride_current (micromolar)"
    legend_rates[0] = "d/dt V in component cell (millivolt)"
    legend_rates[1] = "d/dt Cai in component calcium_concentration (micromolar)"
    legend_rates[2] = "d/dt Cass in component calcium_concentration (micromolar)"
    legend_rates[3] = "d/dt CaJSR in component calcium_concentration (micromolar)"
    legend_rates[4] = "d/dt CaNSR in component calcium_concentration (micromolar)"
    legend_rates[6] = "d/dt CaMKt in component calcium_fluxes (dimensionless)"
    legend_rates[5] = "d/dt P_RyR in component calcium_fluxes (dimensionless)"
    legend_rates[7] = "d/dt P_O1 in component ryanodine_receptors (dimensionless)"
    legend_rates[8] = "d/dt P_O2 in component ryanodine_receptors (dimensionless)"
    legend_rates[9] = "d/dt P_C2 in component ryanodine_receptors (dimensionless)"
    legend_rates[10] = "d/dt O in component L_type_calcium_current (dimensionless)"
    legend_rates[11] = "d/dt I in component L_type_calcium_current (dimensionless)"
    legend_rates[12] = "d/dt y_gate in component L_type_calcium_current (dimensionless)"
    legend_rates[13] = "d/dt Nai in component sodium_concentration (micromolar)"
    legend_rates[16] = "d/dt C_Na2 in component fast_sodium_current (dimensionless)"
    legend_rates[15] = "d/dt C_Na1 in component fast_sodium_current (dimensionless)"
    legend_rates[14] = "d/dt O_Na in component fast_sodium_current (dimensionless)"
    legend_rates[19] = "d/dt IF_Na in component fast_sodium_current (dimensionless)"
    legend_rates[17] = "d/dt I1_Na in component fast_sodium_current (dimensionless)"
    legend_rates[18] = "d/dt I2_Na in component fast_sodium_current (dimensionless)"
    legend_rates[20] = "d/dt IC_Na2 in component fast_sodium_current (dimensionless)"
    legend_rates[21] = "d/dt IC_Na3 in component fast_sodium_current (dimensionless)"
    legend_rates[22] = "d/dt Ki in component potassium_concentration (micromolar)"
    legend_rates[23] = "d/dt aur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_rates[24] = "d/dt iur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_rates[25] = "d/dt aKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_rates[26] = "d/dt iKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_rates[29] = "d/dt C_K2 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[28] = "d/dt C_K1 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[27] = "d/dt O_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[30] = "d/dt I_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[31] = "d/dt nKs in component slow_delayed_rectifier_K_I (dimensionless)"
    legend_rates[32] = "d/dt ato_f in component fast_transient_outward_K_I (dimensionless)"
    legend_rates[33] = "d/dt ito_f in component fast_transient_outward_K_I (dimensionless)"
    legend_rates[34] = "d/dt ato_s in component slow_transient_outward_K_I (dimensionless)"
    legend_rates[35] = "d/dt ito_s in component slow_transient_outward_K_I (dimensionless)"
    return (legend_states, legend_algebraic, legend_voi, legend_constants)

def initConsts():
    constants = [0.0] * sizeConstants; states = [0.0] * sizeStates;
    states[0] = -78.9723339143533
    constants[0] = 1
    constants[1] = 2.2e-5
    constants[2] = 7.7e-8
    constants[3] = 2.31e-7
    constants[4] = 2.2e-8
    constants[5] = 0.000155
    constants[6] = 5400
    constants[7] = 135000
    constants[8] = 1000
    constants[9] = 8.314
    constants[10] = 310
    constants[11] = 96.5
    constants[12] = 0
    constants[13] = 1000
    constants[14] = 3
    constants[15] = -15
    constants[16] = 1e6
    states[1] = 0.127707700919205
    states[2] = 0.145935081225496
    states[3] = 32.965244089706
    states[4] = 55.7318854983913
    constants[17] = 109
    constants[18] = 50000
    constants[19] = 0.6
    constants[20] = 630
    states[5] = 6.10536225304362e-6
    constants[21] = 4.5
    constants[22] = 20
    constants[23] = 6e-5
    constants[24] = 6
    states[6] = 0.621640760366593
    constants[25] = 0.05
    constants[26] = 0.0002
    constants[27] = 0.3222
    constants[28] = 20
    states[7] = 0.00130983025959308
    states[8] = 1.71076335015451e-8
    constants[29] = 0.017
    constants[30] = -0.04
    constants[31] = -3
    constants[32] = 4.5
    constants[33] = 0.1
    constants[34] = 13.73
    constants[35] = 0.69
    constants[36] = 17.86
    states[9] = 0.127234722999601
    constants[37] = 0.006075
    constants[38] = 0.07125
    constants[39] = 0.00405
    constants[40] = 0.965
    constants[41] = 0.009
    constants[42] = 0.0008
    constants[43] = 3
    constants[44] = 4
    constants[45] = 8.5
    states[10] = 6.20683565858766e-5
    states[11] = 0.423807863644179
    states[12] = 0.970041994678769
    constants[46] = -5
    constants[47] = 9
    constants[48] = 3
    constants[49] = 2.5
    constants[50] = 0.3
    constants[51] = 0.4
    constants[52] = 885.7
    constants[53] = 0.23
    constants[54] = 8.2
    constants[55] = 315
    constants[56] = 3
    constants[57] = 0.1879
    constants[58] = 0.4508
    constants[59] = 3.6263
    constants[60] = 1400
    constants[61] = 12000
    constants[62] = 3.6
    constants[63] = 88000
    constants[64] = 0.35
    constants[65] = 0.1415
    constants[66] = 0.27
    states[13] = 10401.578430851
    constants[67] = 0.00022
    constants[68] = 16
    states[14] = 1.97694311632159e-6
    states[15] = 0.000490436979401499
    states[16] = 0.0245504820825838
    states[17] = 9.56626523611396e-6
    states[18] = 1.63765046330313e-5
    states[19] = 0.000422676341277576
    states[20] = 0.0211580847226066
    states[21] = 0.441326346435751
    states[22] = 109707.82946837
    constants[69] = 0.0026
    constants[70] = 0.25
    states[23] = 0.0392195877762586
    states[24] = 0.979125131745527
    constants[71] = 643
    constants[72] = 0.0596
    states[25] = 0.154649534834862
    states[26] = 1
    constants[73] = 0.0165
    states[27] = 0.00911118660951253
    states[28] = 0.00127180688109535
    states[29] = 0.000929626183014451
    states[30] = 0.00105734824008518
    constants[74] = 0.036778
    constants[75] = 0.023761
    constants[76] = 0.00575
    states[31] = 0.00144677949724147
    constants[77] = 0.5347
    states[32] = 0.0160172037366884
    states[33] = 0.995988084341545
    constants[78] = 0.35
    constants[79] = 0
    states[34] = 0.0443263407760382
    states[35] = 0.887568880831388
    constants[80] = 2.486
    constants[81] = 16600
    constants[82] = 1500
    constants[83] = 10
    constants[84] = -40
    constants[85] = 10
    constants[86] = constants[49]/constants[48]
    constants[87] = (1.00000/7.00000)*((exp((constants[7]/67300.0)))-1.00000)
    constants[88] = 0.000000
    return (states, constants)

def computeRates(voi, states, constants):
    rates = [0.0] * sizeStates; algebraic = [0.0] * sizeAlgebraic
    rates[26] = constants[88]
    rates[8] = constants[39]*(states[2]**constants[43])*states[7]-constants[40]*states[8]
    rates[9] = constants[41]*states[7]-constants[42]*states[9]
    algebraic[3] = 1.00000-(states[9]+states[7]+states[8])
    rates[7] = (constants[37]*(states[2]**constants[44])*algebraic[3]+constants[40]*states[8]+constants[42]*states[9])-(constants[38]*states[7]+constants[39]*(states[2]**constants[43])*states[7]+constants[41]*states[7])
    algebraic[4] = 1.00000/(1.00000+(exp(((states[0]+33.0000)/constants[54]))))+0.100000/(1.00000+(exp(((-states[0]+40.0000)/6.00000))))
    algebraic[15] = constants[56]+constants[55]/(1.00000+(exp(((states[0]+19.0000)/2.70000))))
    rates[12] = (algebraic[4]-states[12])/algebraic[15]
    algebraic[18] = 0.493000*(exp((-0.0629000*states[0])))+2.05800
    algebraic[7] = 1.00000/(1.00000+(exp((-(states[0]+15.0000)/20.0000))))
    rates[23] = (algebraic[7]-states[23])/algebraic[18]
    algebraic[19] = constants[71]+1000.00/(1.00000+(exp(((states[0]+42.1000)/5.40000))))
    algebraic[8] = 1.00000/(1.00000+(exp(((states[0]+42.1000)/5.40000))))
    rates[24] = (algebraic[8]-states[24])/algebraic[19]
    algebraic[20] = 39.3000*(exp((-0.0500000*states[0])))+13.1700
    rates[25] = (algebraic[7]-states[25])/algebraic[20]
    algebraic[10] = 0.0335000*(exp((0.0109000*states[0])))
    algebraic[22] = 6.89000e-005*(exp((-0.0417800*states[0])))
    rates[29] = (constants[75]*states[28]+algebraic[22]*states[27])-(constants[74]*states[29]+algebraic[10]*states[29])
    algebraic[11] = (4.81333e-006*(states[0]+26.5000))/(1.00000-(exp((-0.128000*(states[0]+26.5000)))))
    algebraic[23] = 9.53333e-005*(exp((-0.0380000*(states[0]+26.5000))))
    rates[31] = algebraic[11]*(1.00000-states[31])-algebraic[23]*states[31]
    algebraic[12] = 0.180640*(exp((0.0357700*(states[0]+45.0000))))
    algebraic[24] = 0.395600*(exp((-0.0623700*(states[0]+45.0000))))
    rates[32] = algebraic[12]*(1.00000-states[32])-algebraic[24]*states[32]
    algebraic[13] = 1.00000/(1.00000+(exp(((states[0]+51.4000)/5.00000))))
    algebraic[25] = 9.66450+10.9362/(1.00000+(exp(((states[0]+51.4000)/5.00000))))
    rates[33] = (algebraic[13]-states[33])/algebraic[25]
    algebraic[26] = 0.493000*(exp((-0.0629000*states[0])))+2.05800
    rates[34] = (algebraic[7]-states[34])/algebraic[26]
    algebraic[27] = 270.000+1050.00/(1.00000+(exp(((states[0]+45.2000)/5.70000))))
    rates[35] = (algebraic[8]-states[35])/algebraic[27]
    algebraic[9] = 1.00000-(states[28]+states[29]+states[27]+states[30])
    algebraic[21] = 0.0223480*(exp((0.0117600*states[0])))
    algebraic[31] = 0.0470020*(exp((-0.0631000*states[0])))
    rates[28] = (algebraic[21]*algebraic[9]+constants[74]*states[29])-(algebraic[31]*states[28]+constants[75]*states[28])
    algebraic[32] = 0.0703000*(exp((0.0287000*(states[0]+5.00000))))
    algebraic[36] = 0.00649700*(exp((-0.0326800*(states[0]+5.00000))))
    rates[27] = (algebraic[10]*states[29]+algebraic[36]*states[30])-(algebraic[22]*states[27]+algebraic[32]*states[27])
    rates[30] = algebraic[32]*states[27]-algebraic[36]*states[30]
    algebraic[38] = (1.00000-states[10])-states[11]
    algebraic[5] = exp(((states[0]-constants[46])/constants[47]))
    algebraic[16] = algebraic[5]/(constants[48]*(algebraic[5]+1.00000))
    rates[10] = algebraic[16]*algebraic[38]-constants[86]*states[10]
    algebraic[29] = (algebraic[5]+constants[50])/(constants[52]*constants[53]*(algebraic[5]+1.00000))
    algebraic[34] = (constants[51]*(algebraic[5]+constants[50]))/(constants[52]*(constants[51]*algebraic[5]+constants[50]))
    rates[11] = algebraic[29]*algebraic[38]*states[2]-algebraic[34]*states[11]
    algebraic[37] = (1.00000+(constants[18]*constants[20])/((constants[20]+states[3])**2.00000))**(-1.00000)
    algebraic[40] = custom_piecewise([less(VOI , constants[13]*constants[16]), constants[21]*(states[7]+states[8])*(states[3]-states[2])*states[5] , True, constants[32]*(states[3]-states[2])])
    algebraic[44] = (states[4]-states[3])/constants[22]
    rates[3] = algebraic[37]*(algebraic[44]-algebraic[40])
    algebraic[6] = 1.00000-(states[14]+states[15]+states[16]+states[19]+states[17]+states[18]+states[20]+states[21])
    algebraic[17] = 3.80200/(0.102700*(exp((-(states[0]+2.50000)/17.0000)))+0.200000*(exp((-(states[0]+2.50000)/150.000))))
    algebraic[39] = 0.191700*(exp((-(states[0]+2.50000)/20.3000)))
    algebraic[30] = 3.80200/(0.102700*(exp((-(states[0]+2.50000)/15.0000)))+0.230000*(exp((-(states[0]+2.50000)/150.000))))
    algebraic[41] = 0.200000*(exp((-(states[0]-2.50000)/20.3000)))
    algebraic[45] = 7.00000e-007*(exp((-(states[0]+7.00000)/7.70000)))
    algebraic[47] = 0.00840000+2.00000e-005*(states[0]+7.00000)
    rates[16] = (algebraic[17]*algebraic[6]+algebraic[41]*states[15]+algebraic[45]*states[20])-(algebraic[39]*states[16]+algebraic[30]*states[16]+algebraic[47]*states[16])
    algebraic[35] = 3.80200/(0.102700*(exp((-(states[0]+2.50000)/12.0000)))+0.250000*(exp((-(states[0]+2.50000)/150.000))))
    algebraic[43] = 0.220000*(exp((-(states[0]-7.50000)/20.3000)))
    rates[15] = (algebraic[30]*states[16]+algebraic[43]*states[14]+algebraic[45]*states[19])-(algebraic[41]*states[15]+algebraic[35]*states[15]+algebraic[47]*states[15])
    rates[20] = (algebraic[17]*states[21]+algebraic[41]*states[19]+algebraic[47]*states[16])-(algebraic[39]*states[20]+algebraic[30]*states[20]+algebraic[45]*states[20])
    rates[21] = (algebraic[39]*states[20]+algebraic[47]*algebraic[6])-(algebraic[17]*states[21]+algebraic[45]*states[21])
    algebraic[48] = (0.0500000*(1.00000-states[6])*1.00000)/(1.00000+0.700000/states[2])
    rates[6] = constants[25]*algebraic[48]*(algebraic[48]+states[6])-constants[26]*states[6]
    algebraic[49] = 1.00000/(0.188495*(exp((-(states[0]+7.00000)/16.6000)))+0.393956)
    algebraic[51] = (algebraic[35]*algebraic[49]*algebraic[45])/(algebraic[43]*algebraic[47])
    rates[14] = (algebraic[35]*states[15]+algebraic[51]*states[19])-(algebraic[43]*states[14]+algebraic[49]*states[14])
    algebraic[42] = custom_piecewise([less(VOI , constants[13]*constants[16]), constants[23]*(states[4]-states[1]) , True, constants[33]*(states[4]-states[1])])
    algebraic[50] = algebraic[48]+states[6]
    algebraic[52] = ((constants[34]*(algebraic[50]**constants[36]))/((constants[35]**constants[36])+(algebraic[50]**constants[36]))+1.00000)*constants[29]
    algebraic[54] = custom_piecewise([less(VOI , constants[13]*constants[16]), (algebraic[52]*(states[1]**2.00000))/((constants[27]**2.00000)+(states[1]**2.00000)) , True, (algebraic[52]*(states[1]**2.00000))/((constants[27]**2.00000)+(states[1]**2.00000))])
    rates[4] = ((algebraic[54]-algebraic[42])*constants[1])/constants[3]-(algebraic[44]*constants[2])/constants[3]
    algebraic[53] = algebraic[49]/1000.00
    algebraic[55] = algebraic[45]
    rates[19] = (algebraic[49]*states[14]+algebraic[47]*states[15]+algebraic[55]*states[17]+algebraic[30]*states[20])-(algebraic[51]*states[19]+algebraic[45]*states[19]+algebraic[53]*states[19]+algebraic[41]*states[19])
    algebraic[58] = algebraic[49]/95000.0
    algebraic[60] = algebraic[45]/50.0000
    rates[17] = (algebraic[53]*states[19]+algebraic[60]*states[18])-(algebraic[55]*states[17]+algebraic[58]*states[17])
    rates[18] = algebraic[58]*states[17]-algebraic[60]*states[18]
    algebraic[57] = (constants[11]*states[0])/(constants[9]*constants[10])
    algebraic[59] = 2.00000*algebraic[57]
    algebraic[61] = custom_piecewise([greater((fabs(algebraic[59])) , 1.00000e-005), ((((-constants[45]*2.00000*constants[4]*constants[11])/(constants[5]*constants[0]))*states[10]*states[12]*algebraic[59])/(1.00000-(exp((-algebraic[59])))))*(constants[8]*(exp((-algebraic[59])))-states[2]) , True, ((((-constants[45]*2.00000*constants[4]*constants[11])/(constants[5]*constants[0]))*states[10]*states[12]*1.00000e-005)/(1.00000-(exp((-1.00000e-005)))))*(constants[8]*(exp((-1.00000e-005)))-states[2])])
    algebraic[33] = (1.00000+(constants[17]*constants[19])/((constants[19]+states[2])**2.00000))**(-1.00000)
    algebraic[46] = (states[2]-states[1])/constants[24]
    rates[2] = algebraic[33]*((algebraic[40]*constants[2])/constants[4]-((algebraic[46]*constants[1])/constants[4]+(algebraic[61]*constants[5]*constants[0])/(2.00000*constants[4]*constants[11])))
    rates[5] = constants[30]*states[5]+((constants[31]*algebraic[61])/constants[28])*(exp((-((states[0]-5.00000)**2.00000)/648.000)))
    algebraic[62] = (constants[57]*(states[1]**2.00000))/((constants[58]**2.00000)+(states[1]**2.00000))
    algebraic[63] = ((constants[59]/(1.00000+((constants[65]/states[1])**2.00000)))*((states[13]**3.00000)*constants[8]*(exp(((constants[64]*states[0]*constants[11])/(constants[9]*constants[10]))))-(constants[7]**3.00000)*states[1]*(exp((((constants[64]-1.00000)*states[0]*constants[11])/(constants[9]*constants[10]))))))/((constants[60]*(states[13]**3.00000)+(constants[63]**3.00000)*states[1]+(constants[61]**3.00000)*constants[8]*(1.00000+states[1]/constants[62])+constants[62]*(constants[7]**3.00000)*(1.00000+((states[13]/constants[61])**3.00000))+(states[13]**3.00000)*constants[8]+(constants[7]**3.00000)*states[1])*(1.00000+constants[66]*(exp((((constants[64]-1.00000)*states[0]*constants[11])/(constants[9]*constants[10]))))))
    algebraic[65] = ((constants[9]*constants[10])/(2.00000*constants[11]))*(log((constants[8]/states[1])))
    algebraic[67] = constants[67]*(states[0]-algebraic[65])
    algebraic[28] = (1.00000+(constants[17]*constants[19])/((constants[19]+states[1])**2.00000))**(-1.00000)
    rates[1] = algebraic[28]*(((algebraic[42]+algebraic[46])-(((algebraic[67]+algebraic[62])-2.00000*algebraic[63])*constants[5]*constants[0])/(2.00000*constants[1]*constants[11]))-algebraic[54])
    algebraic[68] = ((constants[9]*constants[10])/constants[11])*(log(((0.900000*constants[7]+0.100000*constants[6])/(0.900000*states[13]+0.100000*states[22]))))
    algebraic[70] = constants[68]*states[14]*(states[0]-algebraic[68])
    algebraic[71] = constants[69]*(states[0]-algebraic[68])
    algebraic[80] = 1.00000/(1.00000+0.124500*(exp(((-0.100000*states[0]*constants[11])/(constants[9]*constants[10]))))+0.0365000*constants[87]*(exp(((-states[0]*constants[11])/(constants[9]*constants[10])))))
    algebraic[81] = (((constants[80]*algebraic[80]*1.00000)/(1.00000+((constants[81]/states[13])**2.40000)))*constants[6])/(constants[6]+constants[82])
    rates[13] = (-(algebraic[70]+algebraic[71]+3.00000*algebraic[81]+3.00000*algebraic[63])*constants[5]*constants[0])/(constants[1]*constants[11])
    algebraic[73] = ((constants[9]*constants[10])/constants[11])*(log((constants[6]/states[22])))
    algebraic[77] = constants[77]*(states[32]**3.00000)*states[33]*(states[0]-algebraic[73])
    algebraic[79] = constants[79]*states[34]*states[35]*(states[0]-algebraic[73])
    algebraic[78] = (((constants[78]*constants[6])/(constants[6]+210.000))*(states[0]-algebraic[73]))/(1.00000+(exp((0.0896000*(states[0]-algebraic[73])))))
    algebraic[76] = constants[76]*(states[31]**2.00000)*(states[0]-algebraic[73])
    algebraic[74] = constants[70]*states[23]*states[24]*(states[0]-algebraic[73])
    algebraic[75] = constants[72]*states[25]*states[26]*(states[0]-algebraic[73])
    algebraic[72] = constants[73]*states[27]*(states[0]-((constants[9]*constants[10])/constants[11])*(log(((0.980000*constants[6]+0.0200000*constants[7])/(0.980000*states[22]+0.0200000*states[13])))))
    algebraic[0] = (floor((VOI/constants[13])))*constants[13]
    algebraic[14] = custom_piecewise([greater_equal(VOI-algebraic[0] , constants[12]) & less_equal(VOI-algebraic[0] , constants[12]+constants[14]) & less(VOI , constants[13]*constants[16]), constants[15] , True, 0.000000])
    rates[22] = (-((algebraic[14]+algebraic[77]+algebraic[79]+algebraic[78]+algebraic[76]+algebraic[75]+algebraic[74]+algebraic[72])-2.00000*algebraic[81])*constants[5]*constants[0])/(constants[1]*constants[11])
    algebraic[82] = 0.200000/(1.00000+(exp((-(states[0]-46.7000)/7.80000))))
    algebraic[83] = ((constants[83]*algebraic[82]*states[1])/(states[1]+constants[85]))*(states[0]-constants[84])
    rates[0] = -(algebraic[61]+algebraic[62]+algebraic[63]+algebraic[67]+algebraic[70]+algebraic[71]+algebraic[81]+algebraic[77]+algebraic[79]+algebraic[78]+algebraic[76]+algebraic[74]+algebraic[75]+algebraic[72]+algebraic[83]+algebraic[14])
    return(rates)

def computeAlgebraic(constants, states, voi):
    algebraic = array([[0.0] * len(voi)] * sizeAlgebraic)
    states = array(states)
    voi = array(voi)
    algebraic[3] = 1.00000-(states[9]+states[7]+states[8])
    algebraic[4] = 1.00000/(1.00000+(exp(((states[0]+33.0000)/constants[54]))))+0.100000/(1.00000+(exp(((-states[0]+40.0000)/6.00000))))
    algebraic[15] = constants[56]+constants[55]/(1.00000+(exp(((states[0]+19.0000)/2.70000))))
    algebraic[18] = 0.493000*(exp((-0.0629000*states[0])))+2.05800
    algebraic[7] = 1.00000/(1.00000+(exp((-(states[0]+15.0000)/20.0000))))
    algebraic[19] = constants[71]+1000.00/(1.00000+(exp(((states[0]+42.1000)/5.40000))))
    algebraic[8] = 1.00000/(1.00000+(exp(((states[0]+42.1000)/5.40000))))
    algebraic[20] = 39.3000*(exp((-0.0500000*states[0])))+13.1700
    algebraic[10] = 0.0335000*(exp((0.0109000*states[0])))
    algebraic[22] = 6.89000e-005*(exp((-0.0417800*states[0])))
    algebraic[11] = (4.81333e-006*(states[0]+26.5000))/(1.00000-(exp((-0.128000*(states[0]+26.5000)))))
    algebraic[23] = 9.53333e-005*(exp((-0.0380000*(states[0]+26.5000))))
    algebraic[12] = 0.180640*(exp((0.0357700*(states[0]+45.0000))))
    algebraic[24] = 0.395600*(exp((-0.0623700*(states[0]+45.0000))))
    algebraic[13] = 1.00000/(1.00000+(exp(((states[0]+51.4000)/5.00000))))
    algebraic[25] = 9.66450+10.9362/(1.00000+(exp(((states[0]+51.4000)/5.00000))))
    algebraic[26] = 0.493000*(exp((-0.0629000*states[0])))+2.05800
    algebraic[27] = 270.000+1050.00/(1.00000+(exp(((states[0]+45.2000)/5.70000))))
    algebraic[9] = 1.00000-(states[28]+states[29]+states[27]+states[30])
    algebraic[21] = 0.0223480*(exp((0.0117600*states[0])))
    algebraic[31] = 0.0470020*(exp((-0.0631000*states[0])))
    algebraic[32] = 0.0703000*(exp((0.0287000*(states[0]+5.00000))))
    algebraic[36] = 0.00649700*(exp((-0.0326800*(states[0]+5.00000))))
    algebraic[38] = (1.00000-states[10])-states[11]
    algebraic[5] = exp(((states[0]-constants[46])/constants[47]))
    algebraic[16] = algebraic[5]/(constants[48]*(algebraic[5]+1.00000))
    algebraic[29] = (algebraic[5]+constants[50])/(constants[52]*constants[53]*(algebraic[5]+1.00000))
    algebraic[34] = (constants[51]*(algebraic[5]+constants[50]))/(constants[52]*(constants[51]*algebraic[5]+constants[50]))
    algebraic[37] = (1.00000+(constants[18]*constants[20])/((constants[20]+states[3])**2.00000))**(-1.00000)
    algebraic[40] = custom_piecewise([less(VOI , constants[13]*constants[16]), constants[21]*(states[7]+states[8])*(states[3]-states[2])*states[5] , True, constants[32]*(states[3]-states[2])])
    algebraic[44] = (states[4]-states[3])/constants[22]
    algebraic[6] = 1.00000-(states[14]+states[15]+states[16]+states[19]+states[17]+states[18]+states[20]+states[21])
    algebraic[17] = 3.80200/(0.102700*(exp((-(states[0]+2.50000)/17.0000)))+0.200000*(exp((-(states[0]+2.50000)/150.000))))
    algebraic[39] = 0.191700*(exp((-(states[0]+2.50000)/20.3000)))
    algebraic[30] = 3.80200/(0.102700*(exp((-(states[0]+2.50000)/15.0000)))+0.230000*(exp((-(states[0]+2.50000)/150.000))))
    algebraic[41] = 0.200000*(exp((-(states[0]-2.50000)/20.3000)))
    algebraic[45] = 7.00000e-007*(exp((-(states[0]+7.00000)/7.70000)))
    algebraic[47] = 0.00840000+2.00000e-005*(states[0]+7.00000)
    algebraic[35] = 3.80200/(0.102700*(exp((-(states[0]+2.50000)/12.0000)))+0.250000*(exp((-(states[0]+2.50000)/150.000))))
    algebraic[43] = 0.220000*(exp((-(states[0]-7.50000)/20.3000)))
    algebraic[48] = (0.0500000*(1.00000-states[6])*1.00000)/(1.00000+0.700000/states[2])
    algebraic[49] = 1.00000/(0.188495*(exp((-(states[0]+7.00000)/16.6000)))+0.393956)
    algebraic[51] = (algebraic[35]*algebraic[49]*algebraic[45])/(algebraic[43]*algebraic[47])
    algebraic[42] = custom_piecewise([less(VOI , constants[13]*constants[16]), constants[23]*(states[4]-states[1]) , True, constants[33]*(states[4]-states[1])])
    algebraic[50] = algebraic[48]+states[6]
    algebraic[52] = ((constants[34]*(algebraic[50]**constants[36]))/((constants[35]**constants[36])+(algebraic[50]**constants[36]))+1.00000)*constants[29]
    algebraic[54] = custom_piecewise([less(VOI , constants[13]*constants[16]), (algebraic[52]*(states[1]**2.00000))/((constants[27]**2.00000)+(states[1]**2.00000)) , True, (algebraic[52]*(states[1]**2.00000))/((constants[27]**2.00000)+(states[1]**2.00000))])
    algebraic[53] = algebraic[49]/1000.00
    algebraic[55] = algebraic[45]
    algebraic[58] = algebraic[49]/95000.0
    algebraic[60] = algebraic[45]/50.0000
    algebraic[57] = (constants[11]*states[0])/(constants[9]*constants[10])
    algebraic[59] = 2.00000*algebraic[57]
    algebraic[61] = custom_piecewise([greater((fabs(algebraic[59])) , 1.00000e-005), ((((-constants[45]*2.00000*constants[4]*constants[11])/(constants[5]*constants[0]))*states[10]*states[12]*algebraic[59])/(1.00000-(exp((-algebraic[59])))))*(constants[8]*(exp((-algebraic[59])))-states[2]) , True, ((((-constants[45]*2.00000*constants[4]*constants[11])/(constants[5]*constants[0]))*states[10]*states[12]*1.00000e-005)/(1.00000-(exp((-1.00000e-005)))))*(constants[8]*(exp((-1.00000e-005)))-states[2])])
    algebraic[33] = (1.00000+(constants[17]*constants[19])/((constants[19]+states[2])**2.00000))**(-1.00000)
    algebraic[46] = (states[2]-states[1])/constants[24]
    algebraic[62] = (constants[57]*(states[1]**2.00000))/((constants[58]**2.00000)+(states[1]**2.00000))
    algebraic[63] = ((constants[59]/(1.00000+((constants[65]/states[1])**2.00000)))*((states[13]**3.00000)*constants[8]*(exp(((constants[64]*states[0]*constants[11])/(constants[9]*constants[10]))))-(constants[7]**3.00000)*states[1]*(exp((((constants[64]-1.00000)*states[0]*constants[11])/(constants[9]*constants[10]))))))/((constants[60]*(states[13]**3.00000)+(constants[63]**3.00000)*states[1]+(constants[61]**3.00000)*constants[8]*(1.00000+states[1]/constants[62])+constants[62]*(constants[7]**3.00000)*(1.00000+((states[13]/constants[61])**3.00000))+(states[13]**3.00000)*constants[8]+(constants[7]**3.00000)*states[1])*(1.00000+constants[66]*(exp((((constants[64]-1.00000)*states[0]*constants[11])/(constants[9]*constants[10]))))))
    algebraic[65] = ((constants[9]*constants[10])/(2.00000*constants[11]))*(log((constants[8]/states[1])))
    algebraic[67] = constants[67]*(states[0]-algebraic[65])
    algebraic[28] = (1.00000+(constants[17]*constants[19])/((constants[19]+states[1])**2.00000))**(-1.00000)
    algebraic[68] = ((constants[9]*constants[10])/constants[11])*(log(((0.900000*constants[7]+0.100000*constants[6])/(0.900000*states[13]+0.100000*states[22]))))
    algebraic[70] = constants[68]*states[14]*(states[0]-algebraic[68])
    algebraic[71] = constants[69]*(states[0]-algebraic[68])
    algebraic[80] = 1.00000/(1.00000+0.124500*(exp(((-0.100000*states[0]*constants[11])/(constants[9]*constants[10]))))+0.0365000*constants[87]*(exp(((-states[0]*constants[11])/(constants[9]*constants[10])))))
    algebraic[81] = (((constants[80]*algebraic[80]*1.00000)/(1.00000+((constants[81]/states[13])**2.40000)))*constants[6])/(constants[6]+constants[82])
    algebraic[73] = ((constants[9]*constants[10])/constants[11])*(log((constants[6]/states[22])))
    algebraic[77] = constants[77]*(states[32]**3.00000)*states[33]*(states[0]-algebraic[73])
    algebraic[79] = constants[79]*states[34]*states[35]*(states[0]-algebraic[73])
    algebraic[78] = (((constants[78]*constants[6])/(constants[6]+210.000))*(states[0]-algebraic[73]))/(1.00000+(exp((0.0896000*(states[0]-algebraic[73])))))
    algebraic[76] = constants[76]*(states[31]**2.00000)*(states[0]-algebraic[73])
    algebraic[74] = constants[70]*states[23]*states[24]*(states[0]-algebraic[73])
    algebraic[75] = constants[72]*states[25]*states[26]*(states[0]-algebraic[73])
    algebraic[72] = constants[73]*states[27]*(states[0]-((constants[9]*constants[10])/constants[11])*(log(((0.980000*constants[6]+0.0200000*constants[7])/(0.980000*states[22]+0.0200000*states[13])))))
    algebraic[0] = (floor((VOI/constants[13])))*constants[13]
    algebraic[14] = custom_piecewise([greater_equal(VOI-algebraic[0] , constants[12]) & less_equal(VOI-algebraic[0] , constants[12]+constants[14]) & less(VOI , constants[13]*constants[16]), constants[15] , True, 0.000000])
    algebraic[82] = 0.200000/(1.00000+(exp((-(states[0]-46.7000)/7.80000))))
    algebraic[83] = ((constants[83]*algebraic[82]*states[1])/(states[1]+constants[85]))*(states[0]-constants[84])
    algebraic[1] = (((states[3]*constants[18])/(states[3]+constants[20]))*constants[2])/constants[1]+(states[4]*constants[3])/constants[1]
    algebraic[2] = (states[7]+states[8])*states[5]
    algebraic[56] = algebraic[54]-algebraic[42]
    algebraic[64] = (-algebraic[62]*constants[5]*constants[0])/(2.00000*constants[1]*constants[11])
    algebraic[66] = (algebraic[63]*constants[5]*constants[0])/(constants[1]*constants[11])
    algebraic[69] = (-algebraic[67]*constants[5]*constants[0])/(2.00000*constants[1]*constants[11])
    return algebraic

def custom_piecewise(cases):
    """Compute result of a piecewise function"""
    return select(cases[0::2],cases[1::2])

def solve_model():
    """Solve model with ODE solver"""
    from scipy.integrate import ode
    # Initialise constants and state variables
    (init_states, constants) = initConsts()

    # Set timespan to solve over
    voi = linspace(0, 10, 500)

    # Construct ODE object to solve
    r = ode(computeRates)
    r.set_integrator('vode', method='bdf', atol=1e-006, rtol=1e-006, max_step=1)
    r.set_initial_value(init_states, voi[0])
    r.set_f_params(constants)

    # Solve model
    states = array([[0.0] * len(voi)] * sizeStates)
    states[:,0] = init_states
    for (i,t) in enumerate(voi[1:]):
        if r.successful():
            r.integrate(t)
            states[:,i+1] = r.y
        else:
            break

    # Compute algebraic variables
    algebraic = computeAlgebraic(constants, states, voi)
    return (voi, states, algebraic)

def plot_model(voi, states, algebraic):
    """Plot variables against variable of integration"""
    import pylab
    (legend_states, legend_algebraic, legend_voi, legend_constants) = createLegends()
    pylab.figure(1)
    pylab.plot(voi,vstack((states,algebraic)).T)
    pylab.xlabel(legend_voi)
    pylab.legend(legend_states + legend_algebraic, loc='best')
    pylab.show()

if __name__ == "__main__":
    (voi, states, algebraic) = solve_model()
    plot_model(voi, states, algebraic)
