# Size of variable arrays:
sizeAlgebraic = 71
sizeStates = 40
sizeConstants = 204
from math import *
from numpy import *

def createLegends():
    legend_states = [""] * sizeStates
    legend_rates = [""] * sizeStates
    legend_algebraic = [""] * sizeAlgebraic
    legend_voi = ""
    legend_constants = [""] * sizeConstants
    legend_VOI = "time in component environment (millisecond)"
    legend_states[0] = "V in component membrane (millivolt)"
    legend_constants[0] = "Cm in component membrane (microF_per_cm2)"
    legend_constants[1] = "Vmyo in component membrane (microlitre)"
    legend_constants[2] = "VJSR in component membrane (microlitre)"
    legend_constants[3] = "VNSR in component membrane (microlitre)"
    legend_constants[4] = "Vss in component membrane (microlitre)"
    legend_constants[5] = "Acap in component membrane (cm2)"
    legend_constants[6] = "Ko in component membrane (micromolar)"
    legend_constants[7] = "Nao in component membrane (micromolar)"
    legend_constants[8] = "Cao in component membrane (micromolar)"
    legend_constants[9] = "R in component membrane (joule_per_mole_kelvin)"
    legend_constants[10] = "T in component membrane (kelvin)"
    legend_constants[11] = "F in component membrane (coulomb_per_millimole)"
    legend_algebraic[0] = "i_stim in component membrane (picoA_per_picoF)"
    legend_algebraic[46] = "i_CaL in component L_type_calcium_current (picoA_per_picoF)"
    legend_algebraic[48] = "i_pCa in component calcium_pump_current (picoA_per_picoF)"
    legend_algebraic[50] = "i_NCX in component sodium_calcium_exchange_current (picoA_per_picoF)"
    legend_algebraic[54] = "i_Cab in component calcium_background_current (picoA_per_picoF)"
    legend_algebraic[57] = "i_Na in component fast_sodium_current (picoA_per_picoF)"
    legend_algebraic[58] = "i_Nab in component sodium_background_current (picoA_per_picoF)"
    legend_algebraic[68] = "i_NaK in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_algebraic[60] = "i_Kto_f in component fast_transient_outward_K_I (picoA_per_picoF)"
    legend_algebraic[61] = "i_Kto_s in component slow_transient_outward_K_I (picoA_per_picoF)"
    legend_algebraic[62] = "i_K1 in component time_independent_K_I (picoA_per_picoF)"
    legend_algebraic[63] = "i_Ks in component slow_delayed_rectifier_K_I (picoA_per_picoF)"
    legend_algebraic[64] = "i_Kur in component ultra_rapidly_activating_delayed_rectifier_K_I (picoA_per_picoF)"
    legend_algebraic[65] = "i_Kss in component non_inactivating_steady_state_K_I (picoA_per_picoF)"
    legend_algebraic[70] = "i_ClCa in component calcium_activated_chloride_current (picoA_per_picoF)"
    legend_algebraic[66] = "i_Kr in component rapid_delayed_rectifier_K_I (picoA_per_picoF)"
    legend_constants[12] = "stim_start in component membrane (millisecond)"
    legend_constants[13] = "stim_end in component membrane (millisecond)"
    legend_constants[14] = "stim_period in component membrane (millisecond)"
    legend_constants[15] = "stim_duration in component membrane (millisecond)"
    legend_constants[16] = "stim_amplitude in component membrane (picoA_per_picoF)"
    legend_states[1] = "Cai in component calcium_concentration (micromolar)"
    legend_states[2] = "Cass in component calcium_concentration (micromolar)"
    legend_states[3] = "CaJSR in component calcium_concentration (micromolar)"
    legend_states[4] = "CaNSR in component calcium_concentration (micromolar)"
    legend_algebraic[11] = "Bi in component calcium_concentration (dimensionless)"
    legend_algebraic[24] = "Bss in component calcium_concentration (dimensionless)"
    legend_algebraic[29] = "BJSR in component calcium_concentration (dimensionless)"
    legend_constants[17] = "Bmax in component calcium_concentration (micromolar)"
    legend_constants[18] = "CSQN_tot in component calcium_concentration (micromolar)"
    legend_constants[19] = "Kd in component calcium_concentration (micromolar)"
    legend_constants[20] = "Km_CSQN in component calcium_concentration (micromolar)"
    legend_algebraic[40] = "J_leak in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[33] = "J_rel in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[42] = "J_up in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[36] = "J_tr in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[44] = "J_trpn in component calcium_fluxes (micromolar_per_millisecond)"
    legend_algebraic[38] = "J_xfer in component calcium_fluxes (micromolar_per_millisecond)"
    legend_constants[21] = "P_ryr_const1 in component calcium_fluxes (per_millisecond)"
    legend_constants[22] = "P_ryr_const2 in component calcium_fluxes (per_millisecond)"
    legend_constants[23] = "o_P_RyR in component calcium_fluxes (millivolt)"
    legend_constants[24] = "d_P_RyR in component calcium_fluxes (millivolt2)"
    legend_constants[25] = "k_plus_htrpn in component calcium_fluxes (per_micromolar_millisecond)"
    legend_constants[26] = "k_minus_htrpn in component calcium_fluxes (per_millisecond)"
    legend_constants[27] = "k_plus_ltrpn in component calcium_fluxes (per_micromolar_millisecond)"
    legend_constants[28] = "k_minus_ltrpn in component calcium_fluxes (per_millisecond)"
    legend_states[5] = "P_RyR in component calcium_fluxes (dimensionless)"
    legend_constants[29] = "v1 in component calcium_fluxes (per_millisecond)"
    legend_constants[30] = "tau_tr in component calcium_fluxes (millisecond)"
    legend_constants[31] = "v2 in component calcium_fluxes (per_millisecond)"
    legend_constants[32] = "tau_xfer in component calcium_fluxes (millisecond)"
    legend_constants[33] = "v3 in component calcium_fluxes (micromolar_per_millisecond)"
    legend_constants[34] = "Km_up in component calcium_fluxes (micromolar)"
    legend_constants[35] = "LTRPN_tot in component calcium_buffering (micromolar)"
    legend_constants[36] = "HTRPN_tot in component calcium_buffering (micromolar)"
    legend_states[6] = "LTRPN_Ca in component calcium_buffering (micromolar)"
    legend_states[7] = "HTRPN_Ca in component calcium_buffering (micromolar)"
    legend_constants[37] = "i_CaL_max in component L_type_calcium_current (picoA_per_picoF)"
    legend_states[8] = "P_O1 in component ryanodine_receptors (dimensionless)"
    legend_states[9] = "P_O2 in component ryanodine_receptors (dimensionless)"
    legend_algebraic[1] = "P_C1 in component ryanodine_receptors (dimensionless)"
    legend_states[10] = "P_C2 in component ryanodine_receptors (dimensionless)"
    legend_constants[38] = "k_plus_a in component ryanodine_receptors (micromolar4_per_millisecond)"
    legend_constants[39] = "k_minus_a in component ryanodine_receptors (per_millisecond)"
    legend_constants[40] = "k_plus_b in component ryanodine_receptors (micromolar3_per_millisecond)"
    legend_constants[41] = "k_minus_b in component ryanodine_receptors (per_millisecond)"
    legend_constants[42] = "k_plus_c in component ryanodine_receptors (per_millisecond)"
    legend_constants[43] = "k_minus_c in component ryanodine_receptors (per_millisecond)"
    legend_constants[44] = "m in component ryanodine_receptors (dimensionless)"
    legend_constants[45] = "n in component ryanodine_receptors (dimensionless)"
    legend_constants[46] = "d3_alpha in component L_type_calcium_current (millivolt2)"
    legend_constants[47] = "o4_alpha in component L_type_calcium_current (millivolt)"
    legend_constants[48] = "o_Kpcf in component L_type_calcium_current (millivolt)"
    legend_constants[49] = "c4_alpha in component L_type_calcium_current (dimensionless)"
    legend_constants[50] = "c_beta in component L_type_calcium_current (per_millisecond)"
    legend_constants[51] = "b_C4I2 in component L_type_calcium_current (dimensionless)"
    legend_constants[52] = "b_C4I3 in component L_type_calcium_current (millisecond)"
    legend_constants[53] = "b_C4I1 in component L_type_calcium_current (dimensionless)"
    legend_constants[54] = "o_beta in component L_type_calcium_current (millivolt)"
    legend_constants[55] = "d1_alpha in component L_type_calcium_current (millivolt)"
    legend_constants[56] = "d_Kpcf in component L_type_calcium_current (millivolt2)"
    legend_constants[57] = "b_C4O in component L_type_calcium_current (dimensionless)"
    legend_constants[58] = "d2_alpha in component L_type_calcium_current (millivolt)"
    legend_constants[59] = "a_OI2 in component L_type_calcium_current (dimensionless)"
    legend_constants[60] = "c1_alpha in component L_type_calcium_current (per_millisecond)"
    legend_constants[61] = "a_C21 in component L_type_calcium_current (dimensionless)"
    legend_constants[62] = "a_I13 in component L_type_calcium_current (dimensionless)"
    legend_constants[63] = "c3_alpha in component L_type_calcium_current (dimensionless)"
    legend_constants[64] = "b_C43 in component L_type_calcium_current (dimensionless)"
    legend_constants[65] = "d4_alpha in component L_type_calcium_current (millivolt2)"
    legend_constants[66] = "d_beta in component L_type_calcium_current (millivolt)"
    legend_constants[67] = "b_C32 in component L_type_calcium_current (dimensionless)"
    legend_constants[68] = "b_C34 in component L_type_calcium_current (dimensionless)"
    legend_constants[69] = "o2_alpha in component L_type_calcium_current (millivolt)"
    legend_constants[70] = "c2_alpha in component L_type_calcium_current (dimensionless)"
    legend_constants[71] = "b_C23 in component L_type_calcium_current (dimensionless)"
    legend_constants[72] = "a_I2C4 in component L_type_calcium_current (dimensionless)"
    legend_constants[73] = "c_Kpcf in component L_type_calcium_current (per_millisecond)"
    legend_constants[74] = "c_Kpcb in component L_type_calcium_current (millisecond)"
    legend_constants[75] = "o3_alpha in component L_type_calcium_current (millivolt)"
    legend_constants[76] = "o1_alpha in component L_type_calcium_current (millivolt)"
    legend_constants[77] = "E_CaL in component L_type_calcium_current (millivolt)"
    legend_constants[78] = "g_CaL in component L_type_calcium_current (milliS_per_microF)"
    legend_states[11] = "O in component L_type_calcium_current (dimensionless)"
    legend_algebraic[2] = "C1 in component L_type_calcium_current (dimensionless)"
    legend_states[12] = "C2 in component L_type_calcium_current (dimensionless)"
    legend_states[13] = "C3 in component L_type_calcium_current (dimensionless)"
    legend_states[14] = "C4 in component L_type_calcium_current (dimensionless)"
    legend_states[15] = "I1 in component L_type_calcium_current (dimensionless)"
    legend_states[16] = "I2 in component L_type_calcium_current (dimensionless)"
    legend_states[17] = "I3 in component L_type_calcium_current (dimensionless)"
    legend_algebraic[12] = "alpha in component L_type_calcium_current (per_millisecond)"
    legend_algebraic[25] = "beta in component L_type_calcium_current (per_millisecond)"
    legend_algebraic[30] = "gamma in component L_type_calcium_current (per_millisecond)"
    legend_algebraic[34] = "Kpcf in component L_type_calcium_current (per_millisecond)"
    legend_constants[79] = "Kpcb in component L_type_calcium_current (per_millisecond)"
    legend_constants[80] = "Kpc_max in component L_type_calcium_current (per_millisecond)"
    legend_constants[81] = "Kpc_half in component L_type_calcium_current (micromolar)"
    legend_constants[82] = "i_pCa_max in component calcium_pump_current (picoA_per_picoF)"
    legend_constants[83] = "Km_pCa in component calcium_pump_current (micromolar)"
    legend_constants[84] = "k_NaCa in component sodium_calcium_exchange_current (picoA_per_picoF)"
    legend_constants[85] = "K_mNa in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[86] = "K_mCa in component sodium_calcium_exchange_current (micromolar)"
    legend_constants[87] = "k_sat in component sodium_calcium_exchange_current (dimensionless)"
    legend_constants[88] = "eta in component sodium_calcium_exchange_current (dimensionless)"
    legend_states[18] = "Nai in component sodium_concentration (micromolar)"
    legend_constants[89] = "g_Cab in component calcium_background_current (milliS_per_microF)"
    legend_algebraic[52] = "E_CaN in component calcium_background_current (millivolt)"
    legend_constants[90] = "cd2_Na13 in component fast_sodium_current (dimensionless)"
    legend_constants[91] = "cd2_Na12 in component fast_sodium_current (dimensionless)"
    legend_constants[92] = "cd2_Na11 in component fast_sodium_current (dimensionless)"
    legend_constants[93] = "db_Na11 in component fast_sodium_current (millivolt)"
    legend_constants[94] = "od_Na2 in component fast_sodium_current (dimensionless)"
    legend_constants[95] = "o_Na12 in component fast_sodium_current (millivolt)"
    legend_constants[96] = "o_Na11 in component fast_sodium_current (millivolt)"
    legend_constants[97] = "da_Na4 in component fast_sodium_current (dimensionless)"
    legend_constants[98] = "da_Na5 in component fast_sodium_current (dimensionless)"
    legend_constants[99] = "c_Na11 in component fast_sodium_current (per_millisecond)"
    legend_constants[100] = "o_Na1 in component fast_sodium_current (millivolt)"
    legend_constants[101] = "ob_Na3 in component fast_sodium_current (per_millisecond)"
    legend_constants[102] = "o_Na3 in component fast_sodium_current (millivolt)"
    legend_constants[103] = "o_Na2 in component fast_sodium_current (millivolt)"
    legend_constants[104] = "d_Na3 in component fast_sodium_current (millivolt)"
    legend_constants[105] = "c_alpha_Na3 in component fast_sodium_current (per_millisecond)"
    legend_constants[106] = "cd1_Na2 in component fast_sodium_current (dimensionless)"
    legend_constants[107] = "cb_Na12 in component fast_sodium_current (per_millisecond)"
    legend_constants[108] = "cb_Na13 in component fast_sodium_current (per_millisecond)"
    legend_constants[109] = "cb_Na11 in component fast_sodium_current (per_millisecond)"
    legend_constants[110] = "cd_Na in component fast_sodium_current (dimensionless)"
    legend_constants[111] = "da_Na2 in component fast_sodium_current (millivolt)"
    legend_constants[112] = "da_1Na12 in component fast_sodium_current (millivolt)"
    legend_constants[113] = "da_1Na13 in component fast_sodium_current (millivolt)"
    legend_constants[114] = "da_1Na11 in component fast_sodium_current (millivolt)"
    legend_constants[115] = "cb_Na3 in component fast_sodium_current (per_millivolt_millisecond)"
    legend_constants[116] = "da_2Na11 in component fast_sodium_current (millivolt)"
    legend_constants[117] = "db_Na3 in component fast_sodium_current (dimensionless)"
    legend_algebraic[56] = "E_Na in component fast_sodium_current (millivolt)"
    legend_constants[118] = "g_Na in component fast_sodium_current (milliS_per_microF)"
    legend_states[19] = "O_Na in component fast_sodium_current (dimensionless)"
    legend_states[20] = "C_Na1 in component fast_sodium_current (dimensionless)"
    legend_states[21] = "C_Na2 in component fast_sodium_current (dimensionless)"
    legend_algebraic[3] = "C_Na3 in component fast_sodium_current (dimensionless)"
    legend_states[22] = "I1_Na in component fast_sodium_current (dimensionless)"
    legend_states[23] = "I2_Na in component fast_sodium_current (dimensionless)"
    legend_states[24] = "IF_Na in component fast_sodium_current (dimensionless)"
    legend_states[25] = "IC_Na2 in component fast_sodium_current (dimensionless)"
    legend_states[26] = "IC_Na3 in component fast_sodium_current (dimensionless)"
    legend_algebraic[13] = "alpha_Na11 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[35] = "beta_Na11 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[26] = "alpha_Na12 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[37] = "beta_Na12 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[31] = "alpha_Na13 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[39] = "beta_Na13 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[41] = "alpha_Na3 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[43] = "beta_Na3 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[45] = "alpha_Na2 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[47] = "beta_Na2 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[49] = "alpha_Na4 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[51] = "beta_Na4 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[53] = "alpha_Na5 in component fast_sodium_current (per_millisecond)"
    legend_algebraic[55] = "beta_Na5 in component fast_sodium_current (per_millisecond)"
    legend_states[27] = "Ki in component potassium_concentration (micromolar)"
    legend_constants[119] = "g_Nab in component sodium_background_current (milliS_per_microF)"
    legend_constants[120] = "d2_alpha_i_tof in component fast_transient_outward_K_I (millivolt)"
    legend_constants[121] = "o_alpha_a in component fast_transient_outward_K_I (millivolt)"
    legend_constants[122] = "c_beta_i_tof in component fast_transient_outward_K_I (per_millisecond)"
    legend_constants[123] = "o_beta_i_tof in component fast_transient_outward_K_I (millivolt)"
    legend_constants[124] = "c_beta_a in component fast_transient_outward_K_I (per_millisecond)"
    legend_constants[125] = "e_alpha_a in component fast_transient_outward_K_I (per_millivolt)"
    legend_constants[126] = "o2_alpha_i_tof in component fast_transient_outward_K_I (millivolt)"
    legend_constants[127] = "o1_alpha_i_tof in component fast_transient_outward_K_I (millivolt)"
    legend_constants[128] = "d1_alpha_i_tof in component fast_transient_outward_K_I (millivolt)"
    legend_constants[129] = "c_alpha_a in component fast_transient_outward_K_I (per_millisecond)"
    legend_constants[130] = "cd_beta_i_tof in component fast_transient_outward_K_I (dimensionless)"
    legend_constants[131] = "c_alpha_i_tof in component fast_transient_outward_K_I (per_millisecond)"
    legend_constants[132] = "o_beta_a in component fast_transient_outward_K_I (millivolt)"
    legend_constants[133] = "cd_alpha_i_tof in component fast_transient_outward_K_I (dimensionless)"
    legend_constants[134] = "d_beta_i_tof in component fast_transient_outward_K_I (millivolt)"
    legend_constants[135] = "e_beta_a in component fast_transient_outward_K_I (per_millivolt)"
    legend_algebraic[59] = "E_K in component fast_transient_outward_K_I (millivolt)"
    legend_constants[136] = "g_Kto_f in component fast_transient_outward_K_I (milliS_per_microF)"
    legend_states[28] = "ato_f in component fast_transient_outward_K_I (dimensionless)"
    legend_states[29] = "ito_f in component fast_transient_outward_K_I (dimensionless)"
    legend_algebraic[4] = "alpha_a in component fast_transient_outward_K_I (per_millisecond)"
    legend_algebraic[14] = "beta_a in component fast_transient_outward_K_I (per_millisecond)"
    legend_algebraic[5] = "alpha_i in component fast_transient_outward_K_I (per_millisecond)"
    legend_algebraic[15] = "beta_i in component fast_transient_outward_K_I (per_millisecond)"
    legend_constants[137] = "d_tau_ti_s in component slow_transient_outward_K_I (millivolt)"
    legend_constants[138] = "c_tau_ti_s in component slow_transient_outward_K_I (millisecond)"
    legend_constants[139] = "o_tau_ti in component slow_transient_outward_K_I (millivolt)"
    legend_constants[140] = "o1_tau_ta_s in component slow_transient_outward_K_I (millisecond)"
    legend_constants[141] = "o_iss in component slow_transient_outward_K_I (millivolt)"
    legend_constants[142] = "c_tau_ta_s in component slow_transient_outward_K_I (millisecond)"
    legend_constants[143] = "o_ass in component slow_transient_outward_K_I (millivolt)"
    legend_constants[144] = "o0_tau_ti_S in component slow_transient_outward_K_I (millisecond)"
    legend_constants[145] = "e_tau_ta_s in component slow_transient_outward_K_I (per_millivolt)"
    legend_constants[146] = "d_ass in component slow_transient_outward_K_I (millivolt)"
    legend_constants[147] = "d_iss in component slow_transient_outward_K_I (millivolt)"
    legend_algebraic[6] = "ass in component slow_transient_outward_K_I (dimensionless)"
    legend_algebraic[7] = "iss in component slow_transient_outward_K_I (dimensionless)"
    legend_constants[148] = "g_Kto_s in component slow_transient_outward_K_I (milliS_per_microF)"
    legend_states[30] = "ato_s in component slow_transient_outward_K_I (dimensionless)"
    legend_states[31] = "ito_s in component slow_transient_outward_K_I (dimensionless)"
    legend_algebraic[16] = "tau_ta_s in component slow_transient_outward_K_I (millisecond)"
    legend_algebraic[17] = "tau_ti_s in component slow_transient_outward_K_I (millisecond)"
    legend_constants[149] = "g_K1 in component time_independent_K_I (milliS_per_microF)"
    legend_constants[150] = "ce_K1 in component time_independent_K_I (per_millivolt)"
    legend_constants[151] = "o_Ko in component time_independent_K_I (micromolar)"
    legend_constants[152] = "ce_beta_n in component slow_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[153] = "c_beta_n in component slow_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[154] = "ce_alpha_n in component slow_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[155] = "c_alpha_n in component slow_delayed_rectifier_K_I (per_millivolt_millisecond)"
    legend_constants[156] = "o_beta_n in component slow_delayed_rectifier_K_I (millivolt)"
    legend_constants[157] = "g_Ks in component slow_delayed_rectifier_K_I (milliS_per_microF)"
    legend_states[32] = "nKs in component slow_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[8] = "alpha_n in component slow_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[18] = "beta_n in component slow_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[158] = "e_tau_aur in component ultra_rapidly_activating_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[159] = "o_tau_aur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_constants[160] = "c_tau_iur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_constants[161] = "d_tau_iur in component ultra_rapidly_activating_delayed_rectifier_K_I (millivolt)"
    legend_constants[162] = "tau_i_const in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_constants[163] = "o_tau_iur in component ultra_rapidly_activating_delayed_rectifier_K_I (millivolt)"
    legend_constants[164] = "c_tau_aur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_constants[165] = "g_Kur in component ultra_rapidly_activating_delayed_rectifier_K_I (milliS_per_microF)"
    legend_states[33] = "aur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_states[34] = "iur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[19] = "tau_aur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_algebraic[20] = "tau_iur in component ultra_rapidly_activating_delayed_rectifier_K_I (millisecond)"
    legend_constants[166] = "o2_tau_Kss in component non_inactivating_steady_state_K_I (millisecond)"
    legend_constants[167] = "e_tau_Kss in component non_inactivating_steady_state_K_I (per_millivolt)"
    legend_constants[168] = "c_tau_Kss in component non_inactivating_steady_state_K_I (millisecond)"
    legend_constants[169] = "g_Kss in component non_inactivating_steady_state_K_I (milliS_per_microF)"
    legend_states[35] = "aKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_constants[170] = "iKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_algebraic[21] = "tau_Kss in component non_inactivating_steady_state_K_I (millisecond)"
    legend_constants[171] = "c_beta_i in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[172] = "e_alpha_i in component rapid_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[173] = "c_alpha_a1 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[174] = "c_alpha_a0 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[175] = "c_alpha_i in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[176] = "e_alpha_a1 in component rapid_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[177] = "o_beta_i in component rapid_delayed_rectifier_K_I (millivolt)"
    legend_constants[178] = "e_beta_a0 in component rapid_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[179] = "e_beta_a1 in component rapid_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[180] = "o_alpha_i in component rapid_delayed_rectifier_K_I (millivolt)"
    legend_constants[181] = "e_alpha_a0 in component rapid_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[182] = "c_beta_a0 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[183] = "c_beta_a1 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[184] = "e_beta_i in component rapid_delayed_rectifier_K_I (per_millivolt)"
    legend_constants[185] = "g_Kr in component rapid_delayed_rectifier_K_I (milliS_per_microF)"
    legend_states[36] = "O_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_states[37] = "C_K1 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_states[38] = "C_K2 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[9] = "C_K0 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_states[39] = "I_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_algebraic[22] = "alpha_a0 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[27] = "beta_a0 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[186] = "kb in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[187] = "kf in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[10] = "alpha_a1 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[23] = "beta_a1 in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[28] = "alpha_i in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_algebraic[32] = "beta_i in component rapid_delayed_rectifier_K_I (per_millisecond)"
    legend_constants[188] = "cd_sigma in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[189] = "e_f_NaK in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[190] = "cd2_f_NaK in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[191] = "e_i_NaK in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[192] = "cd1_f_NaK in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[193] = "d_sigma in component sodium_potassium_pump_current (micromolar)"
    legend_constants[194] = "i_NaK_max in component sodium_potassium_pump_current (picoA_per_picoF)"
    legend_constants[195] = "Km_Nai in component sodium_potassium_pump_current (micromolar)"
    legend_constants[196] = "Km_Ko in component sodium_potassium_pump_current (micromolar)"
    legend_algebraic[67] = "f_NaK in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[203] = "sigma in component sodium_potassium_pump_current (dimensionless)"
    legend_constants[197] = "c_ClCa in component calcium_activated_chloride_current (dimensionless)"
    legend_constants[198] = "o_ClCa in component calcium_activated_chloride_current (millivolt)"
    legend_constants[199] = "d_ClCa in component calcium_activated_chloride_current (millivolt)"
    legend_constants[200] = "g_ClCa in component calcium_activated_chloride_current (milliS_per_microF)"
    legend_algebraic[69] = "O_ClCa in component calcium_activated_chloride_current (dimensionless)"
    legend_constants[201] = "E_Cl in component calcium_activated_chloride_current (millivolt)"
    legend_constants[202] = "Km_Cl in component calcium_activated_chloride_current (micromolar)"
    legend_rates[0] = "d/dt V in component membrane (millivolt)"
    legend_rates[1] = "d/dt Cai in component calcium_concentration (micromolar)"
    legend_rates[2] = "d/dt Cass in component calcium_concentration (micromolar)"
    legend_rates[3] = "d/dt CaJSR in component calcium_concentration (micromolar)"
    legend_rates[4] = "d/dt CaNSR in component calcium_concentration (micromolar)"
    legend_rates[5] = "d/dt P_RyR in component calcium_fluxes (dimensionless)"
    legend_rates[6] = "d/dt LTRPN_Ca in component calcium_buffering (micromolar)"
    legend_rates[7] = "d/dt HTRPN_Ca in component calcium_buffering (micromolar)"
    legend_rates[8] = "d/dt P_O1 in component ryanodine_receptors (dimensionless)"
    legend_rates[9] = "d/dt P_O2 in component ryanodine_receptors (dimensionless)"
    legend_rates[10] = "d/dt P_C2 in component ryanodine_receptors (dimensionless)"
    legend_rates[11] = "d/dt O in component L_type_calcium_current (dimensionless)"
    legend_rates[12] = "d/dt C2 in component L_type_calcium_current (dimensionless)"
    legend_rates[13] = "d/dt C3 in component L_type_calcium_current (dimensionless)"
    legend_rates[14] = "d/dt C4 in component L_type_calcium_current (dimensionless)"
    legend_rates[15] = "d/dt I1 in component L_type_calcium_current (dimensionless)"
    legend_rates[16] = "d/dt I2 in component L_type_calcium_current (dimensionless)"
    legend_rates[17] = "d/dt I3 in component L_type_calcium_current (dimensionless)"
    legend_rates[18] = "d/dt Nai in component sodium_concentration (micromolar)"
    legend_rates[21] = "d/dt C_Na2 in component fast_sodium_current (dimensionless)"
    legend_rates[20] = "d/dt C_Na1 in component fast_sodium_current (dimensionless)"
    legend_rates[19] = "d/dt O_Na in component fast_sodium_current (dimensionless)"
    legend_rates[24] = "d/dt IF_Na in component fast_sodium_current (dimensionless)"
    legend_rates[22] = "d/dt I1_Na in component fast_sodium_current (dimensionless)"
    legend_rates[23] = "d/dt I2_Na in component fast_sodium_current (dimensionless)"
    legend_rates[25] = "d/dt IC_Na2 in component fast_sodium_current (dimensionless)"
    legend_rates[26] = "d/dt IC_Na3 in component fast_sodium_current (dimensionless)"
    legend_rates[27] = "d/dt Ki in component potassium_concentration (micromolar)"
    legend_rates[28] = "d/dt ato_f in component fast_transient_outward_K_I (dimensionless)"
    legend_rates[29] = "d/dt ito_f in component fast_transient_outward_K_I (dimensionless)"
    legend_rates[30] = "d/dt ato_s in component slow_transient_outward_K_I (dimensionless)"
    legend_rates[31] = "d/dt ito_s in component slow_transient_outward_K_I (dimensionless)"
    legend_rates[32] = "d/dt nKs in component slow_delayed_rectifier_K_I (dimensionless)"
    legend_rates[33] = "d/dt aur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_rates[34] = "d/dt iur in component ultra_rapidly_activating_delayed_rectifier_K_I (dimensionless)"
    legend_rates[35] = "d/dt aKss in component non_inactivating_steady_state_K_I (dimensionless)"
    legend_rates[38] = "d/dt C_K2 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[37] = "d/dt C_K1 in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[36] = "d/dt O_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    legend_rates[39] = "d/dt I_K in component rapid_delayed_rectifier_K_I (dimensionless)"
    return (legend_states, legend_algebraic, legend_voi, legend_constants)

def initConsts():
    constants = [0.0] * sizeConstants; states = [0.0] * sizeStates;
    states[0] = -82.4202
    constants[0] = 1
    constants[1] = 25.84e-6
    constants[2] = 0.12e-6
    constants[3] = 2.098e-6
    constants[4] = 1.485e-9
    constants[5] = 1.534e-4
    constants[6] = 5400
    constants[7] = 140000
    constants[8] = 1800
    constants[9] = 8.314
    constants[10] = 298
    constants[11] = 96.5
    constants[12] = 20
    constants[13] = 100000
    constants[14] = 71.43
    constants[15] = 0.5
    constants[16] = -80
    states[1] = 0.115001
    states[2] = 0.115001
    states[3] = 1299.5
    states[4] = 1299.5
    constants[17] = 50
    constants[18] = 15000
    constants[19] = 0.238
    constants[20] = 800
    constants[21] = 0.04
    constants[22] = 0.1
    constants[23] = 5
    constants[24] = 648
    constants[25] = 0.00237
    constants[26] = 3.2e-5
    constants[27] = 0.0327
    constants[28] = 0.0196
    states[5] = 0
    constants[29] = 4.5
    constants[30] = 20
    constants[31] = 1.74e-5
    constants[32] = 8
    constants[33] = 0.45
    constants[34] = 0.5
    constants[35] = 70
    constants[36] = 140
    states[6] = 11.2684
    states[7] = 125.29
    constants[37] = 7
    states[8] = 0.149102e-4
    states[9] = 0.951726e-10
    states[10] = 0.16774e-3
    constants[38] = 0.006075
    constants[39] = 0.07125
    constants[40] = 0.00405
    constants[41] = 0.965
    constants[42] = 0.009
    constants[43] = 0.0008
    constants[44] = 3
    constants[45] = 4
    constants[46] = 400
    constants[47] = 12
    constants[48] = 14.5
    constants[49] = 0.12
    constants[50] = 0.05
    constants[51] = 4
    constants[52] = 4
    constants[53] = 4
    constants[54] = 12
    constants[55] = 10
    constants[56] = 100
    constants[57] = 4
    constants[58] = 10
    constants[59] = 0.001
    constants[60] = 0.4
    constants[61] = 4
    constants[62] = 0.001
    constants[63] = 0.75
    constants[64] = 2
    constants[65] = 10
    constants[66] = 13
    constants[67] = 3
    constants[68] = 3
    constants[69] = 40
    constants[70] = 0.7
    constants[71] = 2
    constants[72] = 0.002
    constants[73] = 13
    constants[74] = 0.01
    constants[75] = 20
    constants[76] = 12
    constants[77] = 63
    constants[78] = 0.1729
    states[11] = 0.930308e-18
    states[12] = 0.124216e-3
    states[13] = 0.578679e-8
    states[14] = 0.119816e-12
    states[15] = 0.497923e-18
    states[16] = 0.345847e-13
    states[17] = 0.185106e-13
    constants[79] = 0.0005
    constants[80] = 0.23324
    constants[81] = 20
    constants[82] = 1
    constants[83] = 0.5
    constants[84] = 292.8
    constants[85] = 87500
    constants[86] = 1380
    constants[87] = 0.1
    constants[88] = 0.35
    states[18] = 14237.1
    constants[89] = 0.000367
    constants[90] = 0.25
    constants[91] = 0.23
    constants[92] = 0.2
    constants[93] = 20.3
    constants[94] = 0.393956
    constants[95] = 2.5
    constants[96] = 2.5
    constants[97] = 1000
    constants[98] = 95000
    constants[99] = 3.802
    constants[100] = 2.5
    constants[101] = 0.0084
    constants[102] = 7.5
    constants[103] = 7
    constants[104] = 7.7
    constants[105] = 7e-07
    constants[106] = 0.188495
    constants[107] = 0.2
    constants[108] = 0.22
    constants[109] = 0.1917
    constants[110] = 0.1027
    constants[111] = 16.6
    constants[112] = 15
    constants[113] = 12
    constants[114] = 17
    constants[115] = 2e-05
    constants[116] = 150
    constants[117] = 50
    constants[118] = 13
    states[19] = 0.713483e-6
    states[20] = 0.279132e-3
    states[21] = 0.020752
    states[22] = 0.673345e-6
    states[23] = 0.155787e-8
    states[24] = 0.153176e-3
    states[25] = 0.0113879
    states[26] = 0.34278
    states[27] = 143720
    constants[119] = 0.0026
    constants[120] = 7
    constants[121] = 30
    constants[122] = 0.00095
    constants[123] = 33.5
    constants[124] = 0.3956
    constants[125] = 0.03577
    constants[126] = 33.5
    constants[127] = 13.5
    constants[128] = 7
    constants[129] = 0.18064
    constants[130] = 0.051335
    constants[131] = 0.000152
    constants[132] = 30
    constants[133] = 0.0067083
    constants[134] = 7
    constants[135] = 0.06237
    constants[136] = 0.4067
    states[28] = 0.265563e-2
    states[29] = 0.999977
    constants[137] = 5.7
    constants[138] = 1050
    constants[139] = 45.2
    constants[140] = 2.058
    constants[141] = 45.2
    constants[142] = 0.493
    constants[143] = 22.5
    constants[144] = 270
    constants[145] = 0.0629
    constants[146] = 7.7
    constants[147] = 5.7
    constants[148] = 0
    states[30] = 0.417069e-3
    states[31] = 0.998543
    constants[149] = 0.2938
    constants[150] = 0.0896
    constants[151] = 210
    constants[152] = 0.038
    constants[153] = 9.53333e-05
    constants[154] = 0.128
    constants[155] = 4.81333e-06
    constants[156] = 26.5
    constants[157] = 0.00575
    states[32] = 0.262753e-3
    constants[158] = 0.0629
    constants[159] = 2.058
    constants[160] = 170
    constants[161] = 5.7
    constants[162] = 1200
    constants[163] = 45.2
    constants[164] = 0.493
    constants[165] = 0.16
    states[33] = 0.417069e-3
    states[34] = 0.998543
    constants[166] = 13.17
    constants[167] = 0.0862
    constants[168] = 39.3
    constants[169] = 0.05
    states[35] = 0.417069e-3
    constants[170] = 1
    constants[171] = 0.006497
    constants[172] = 0.023391
    constants[173] = 0.013733
    constants[174] = 0.022348
    constants[175] = 0.090821
    constants[176] = 0.038198
    constants[177] = 5
    constants[178] = 0.0631
    constants[179] = 0.04178
    constants[180] = 5
    constants[181] = 0.01176
    constants[182] = 0.047002
    constants[183] = 6.89e-05
    constants[184] = 0.03268
    constants[185] = 0.078
    states[36] = 0.175298e-3
    states[37] = 0.992513e-3
    states[38] = 0.641229e-3
    states[39] = 0.319129e-4
    constants[186] = 0.036778
    constants[187] = 0.023761
    constants[188] = 7
    constants[189] = 0.1
    constants[190] = 0.0365
    constants[191] = 1.5
    constants[192] = 0.1245
    constants[193] = 67300
    constants[194] = 0.88
    constants[195] = 21000
    constants[196] = 1500
    constants[197] = 0.2
    constants[198] = 46.7
    constants[199] = 7.8
    constants[200] = 10
    constants[201] = -40
    constants[202] = 10
    constants[203] = (1.00000/constants[188])*((exp((constants[7]/constants[193])))-1.00000)
    return (states, constants)

def computeRates(voi, states, constants):
    rates = [0.0] * sizeStates; algebraic = [0.0] * sizeAlgebraic
    rates[6] = constants[27]*states[1]*(constants[35]-states[6])-constants[28]*states[6]
    rates[7] = constants[25]*states[1]*(constants[36]-states[7])-constants[26]*states[7]
    rates[9] = constants[40]*(states[2]**constants[44])*states[8]-constants[41]*states[9]
    rates[10] = constants[42]*states[8]-constants[43]*states[10]
    algebraic[1] = 1.00000-(states[10]+states[8]+states[9])
    rates[8] = (constants[38]*(states[2]**constants[45])*algebraic[1]+constants[41]*states[9]+constants[43]*states[10])-(constants[39]*states[8]+constants[40]*(states[2]**constants[44])*states[8]+constants[42]*states[8])
    algebraic[4] = constants[129]*(exp((constants[125]*(states[0]+constants[121]))))
    algebraic[14] = constants[124]*(exp((-constants[135]*(states[0]+constants[132]))))
    rates[28] = algebraic[4]*(1.00000-states[28])-algebraic[14]*states[28]
    algebraic[5] = (constants[131]*(exp((-(states[0]+constants[127])/constants[120]))))/(constants[133]*(exp((-(states[0]+constants[126])/constants[128])))+1.00000)
    algebraic[15] = (constants[122]*(exp(((states[0]+constants[123])/constants[134]))))/(constants[130]*(exp(((states[0]+constants[123])/constants[134])))+1.00000)
    rates[29] = algebraic[5]*(1.00000-states[29])-algebraic[15]*states[29]
    algebraic[6] = 1.00000/(1.00000+(exp((-(states[0]+constants[143])/constants[146]))))
    algebraic[16] = constants[142]*(exp((-constants[145]*states[0])))+constants[140]
    rates[30] = (algebraic[6]-states[30])/algebraic[16]
    algebraic[7] = 1.00000/(1.00000+(exp(((states[0]+constants[141])/constants[147]))))
    algebraic[17] = constants[144]+constants[138]/(1.00000+(exp(((states[0]+constants[139])/constants[137]))))
    rates[31] = (algebraic[7]-states[31])/algebraic[17]
    algebraic[8] = (constants[155]*(states[0]+constants[156]))/(1.00000-(exp((-constants[154]*(states[0]+constants[156])))))
    algebraic[18] = constants[153]*(exp((-constants[152]*(states[0]+constants[156]))))
    rates[32] = algebraic[8]*(1.00000-states[32])-algebraic[18]*states[32]
    algebraic[19] = constants[164]*(exp((-constants[158]*states[0])))+constants[159]
    rates[33] = (algebraic[6]-states[33])/algebraic[19]
    algebraic[20] = constants[162]-constants[160]/(1.00000+(exp(((states[0]+constants[163])/constants[161]))))
    rates[34] = (algebraic[7]-states[34])/algebraic[20]
    algebraic[21] = constants[168]*(exp((-constants[167]*states[0])))+constants[166]
    rates[35] = (algebraic[6]-states[35])/algebraic[21]
    algebraic[10] = constants[173]*(exp((constants[176]*states[0])))
    algebraic[23] = constants[183]*(exp((-constants[179]*states[0])))
    rates[38] = (constants[187]*states[37]+algebraic[23]*states[36])-(constants[186]*states[38]+algebraic[10]*states[38])
    algebraic[2] = 1.00000-(states[11]+states[12]+states[13]+states[14]+states[15]+states[16]+states[17])
    algebraic[12] = (constants[60]*(exp(((states[0]+constants[76])/constants[55])))*((1.00000+constants[70]*(exp((-((states[0]+constants[69])**2.00000)/constants[65]))))-constants[63]*(exp((-((states[0]+constants[75])**2.00000)/constants[46])))))/(1.00000+constants[49]*(exp(((states[0]+constants[47])/constants[58]))))
    algebraic[25] = constants[50]*(exp((-(states[0]+constants[54])/constants[66])))
    rates[12] = (constants[61]*algebraic[12]*algebraic[2]+constants[71]*algebraic[25]*states[13])-(algebraic[25]*states[12]+constants[67]*algebraic[12]*states[12])
    rates[13] = (constants[67]*algebraic[12]*states[12]+constants[68]*algebraic[25]*states[14])-(constants[71]*algebraic[25]*states[13]+constants[64]*algebraic[12]*states[13])
    algebraic[9] = 1.00000-(states[37]+states[38]+states[36]+states[39])
    algebraic[22] = constants[174]*(exp((constants[181]*states[0])))
    algebraic[27] = constants[182]*(exp((-constants[178]*states[0])))
    rates[37] = (algebraic[22]*algebraic[9]+constants[186]*states[38])-(algebraic[27]*states[37]+constants[187]*states[37])
    algebraic[28] = constants[175]*(exp((constants[172]*(states[0]+constants[180]))))
    algebraic[32] = constants[171]*(exp((-constants[184]*(states[0]+constants[177]))))
    rates[36] = (algebraic[10]*states[38]+algebraic[32]*states[39])-(algebraic[23]*states[36]+algebraic[28]*states[36])
    rates[39] = algebraic[28]*states[36]-algebraic[32]*states[39]
    algebraic[30] = (constants[80]*states[2])/(constants[81]+states[2])
    algebraic[34] = constants[73]*(1.00000-(exp((-((states[0]+constants[48])**2.00000)/constants[56]))))
    rates[11] = (algebraic[12]*states[14]+constants[79]*states[15]+constants[59]*(algebraic[12]*states[16]-algebraic[34]*states[11]))-(constants[57]*algebraic[25]*states[11]+algebraic[30]*states[11])
    rates[14] = (constants[64]*algebraic[12]*states[13]+constants[57]*algebraic[25]*states[11]+constants[74]*(constants[53]*constants[79]*algebraic[25]*states[15]-algebraic[12]*algebraic[30]*states[14])+constants[72]*(constants[51]*algebraic[25]*states[16]-algebraic[34]*states[14])+constants[52]*algebraic[25]*constants[79]*states[17])-(constants[68]*algebraic[25]*states[14]+algebraic[12]*states[14]+1.00000*algebraic[30]*algebraic[34]*states[14])
    rates[15] = (algebraic[30]*states[11]+constants[62]*(algebraic[12]*states[17]-algebraic[34]*states[15])+constants[74]*(algebraic[12]*algebraic[30]*states[14]-constants[53]*algebraic[25]*algebraic[34]*states[15]))-constants[79]*states[15]
    rates[16] = (constants[59]*(algebraic[34]*states[11]-algebraic[12]*states[16])+constants[79]*states[17]+constants[72]*(algebraic[34]*states[14]-constants[51]*algebraic[25]*states[16]))-algebraic[30]*states[16]
    rates[17] = (constants[62]*(algebraic[34]*states[15]-algebraic[12]*states[17])+algebraic[30]*states[16]+1.00000*algebraic[30]*algebraic[34]*states[14])-(constants[52]*algebraic[25]*constants[79]*states[17]+constants[79]*states[17])
    algebraic[29] = (1.00000+(constants[18]*constants[20])/((constants[20]+states[3])**2.00000))**(-1.00000)
    algebraic[33] = constants[29]*(states[8]+states[9])*(states[3]-states[2])*states[5]
    algebraic[36] = (states[4]-states[3])/constants[30]
    rates[3] = algebraic[29]*(algebraic[36]-algebraic[33])
    algebraic[40] = constants[31]*(states[4]-states[1])
    algebraic[42] = (constants[33]*(states[1]**2.00000))/((constants[34]**2.00000)+(states[1]**2.00000))
    rates[4] = ((algebraic[42]-algebraic[40])*constants[1])/constants[3]-(algebraic[36]*constants[2])/constants[3]
    algebraic[3] = 1.00000-(states[19]+states[20]+states[21]+states[24]+states[22]+states[23]+states[25]+states[26])
    algebraic[13] = constants[99]/(constants[110]*(exp((-(states[0]+constants[100])/constants[114])))+constants[92]*(exp((-(states[0]+constants[100])/constants[116]))))
    algebraic[35] = constants[109]*(exp((-(states[0]+constants[96])/constants[93])))
    algebraic[26] = constants[99]/(constants[110]*(exp((-(states[0]+constants[100])/constants[112])))+constants[91]*(exp((-(states[0]+constants[100])/constants[116]))))
    algebraic[37] = constants[107]*(exp((-(states[0]-constants[95])/constants[93])))
    algebraic[41] = constants[105]*(exp((-(states[0]+constants[103])/constants[104])))
    algebraic[43] = constants[101]+constants[115]*(states[0]+constants[103])
    rates[21] = (algebraic[13]*algebraic[3]+algebraic[37]*states[20]+algebraic[41]*states[25])-(algebraic[35]*states[21]+algebraic[26]*states[21]+algebraic[43]*states[21])
    algebraic[31] = constants[99]/(constants[110]*(exp((-(states[0]+constants[100])/constants[113])))+constants[90]*(exp((-(states[0]+constants[100])/constants[116]))))
    algebraic[39] = constants[108]*(exp((-(states[0]-constants[102])/constants[93])))
    rates[20] = (algebraic[26]*states[21]+algebraic[39]*states[19]+algebraic[41]*states[24])-(algebraic[37]*states[20]+algebraic[31]*states[20]+algebraic[43]*states[20])
    rates[25] = (algebraic[13]*states[26]+algebraic[37]*states[24]+algebraic[43]*states[21])-(algebraic[35]*states[25]+algebraic[26]*states[25]+algebraic[41]*states[25])
    rates[26] = (algebraic[35]*states[25]+algebraic[43]*algebraic[3])-(algebraic[13]*states[26]+algebraic[41]*states[26])
    algebraic[46] = constants[78]*states[11]*(states[0]-constants[77])
    algebraic[24] = (1.00000+(constants[17]*constants[19])/((constants[19]+states[2])**2.00000))**(-1.00000)
    algebraic[38] = (states[2]-states[1])/constants[32]
    rates[2] = algebraic[24]*((algebraic[33]*constants[2])/constants[4]-((algebraic[38]*constants[1])/constants[4]+(algebraic[46]*constants[5]*constants[0])/(2.00000*constants[4]*constants[11])))
    rates[5] = -constants[21]*states[5]-((constants[22]*algebraic[46])/constants[37])*(exp((-((states[0]-constants[23])**2.00000)/constants[24])))
    algebraic[45] = 1.00000/(constants[106]*(exp((-(states[0]+constants[103])/constants[111])))+constants[94])
    algebraic[47] = (algebraic[31]*algebraic[45]*algebraic[41])/(algebraic[39]*algebraic[43])
    rates[19] = (algebraic[31]*states[20]+algebraic[47]*states[24])-(algebraic[39]*states[19]+algebraic[45]*states[19])
    algebraic[49] = algebraic[45]/constants[97]
    algebraic[51] = algebraic[41]
    rates[24] = (algebraic[45]*states[19]+algebraic[43]*states[20]+algebraic[51]*states[22]+algebraic[26]*states[25])-(algebraic[47]*states[24]+algebraic[41]*states[24]+algebraic[49]*states[24]+algebraic[37]*states[24])
    algebraic[48] = (constants[82]*(states[1]**2.00000))/((constants[83]**2.00000)+(states[1]**2.00000))
    algebraic[50] = ((((((constants[84]*1.00000)/((constants[85]**3.00000)+(constants[7]**3.00000)))*1.00000)/(constants[86]+constants[8]))*1.00000)/(1.00000+constants[87]*(exp((((constants[88]-1.00000)*states[0]*constants[11])/(constants[9]*constants[10]))))))*((exp(((constants[88]*states[0]*constants[11])/(constants[9]*constants[10]))))*(states[18]**3.00000)*constants[8]-(exp((((constants[88]-1.00000)*states[0]*constants[11])/(constants[9]*constants[10]))))*(constants[7]**3.00000)*states[1])
    algebraic[52] = ((constants[9]*constants[10])/(2.00000*constants[11]))*(log((constants[8]/states[1])))
    algebraic[54] = constants[89]*(states[0]-algebraic[52])
    algebraic[11] = (1.00000+(constants[17]*constants[19])/((constants[19]+states[1])**2.00000))**(-1.00000)
    algebraic[44] = (constants[25]*states[1]*(constants[36]-states[7])+constants[27]*states[1]*(constants[35]-states[6]))-(constants[26]*states[7]+constants[28]*states[6])
    rates[1] = algebraic[11]*((algebraic[40]+algebraic[38])-(algebraic[42]+algebraic[44]+(((algebraic[54]+algebraic[48])-2.00000*algebraic[50])*constants[5]*constants[0])/(2.00000*constants[1]*constants[11])))
    algebraic[53] = algebraic[45]/constants[98]
    algebraic[55] = algebraic[41]/constants[117]
    rates[22] = (algebraic[49]*states[24]+algebraic[55]*states[23])-(algebraic[51]*states[22]+algebraic[53]*states[22])
    rates[23] = algebraic[53]*states[22]-algebraic[55]*states[23]
    algebraic[56] = ((constants[9]*constants[10])/constants[11])*(log(((0.900000*constants[7]+0.100000*constants[6])/(0.900000*states[18]+0.100000*states[27]))))
    algebraic[57] = constants[118]*states[19]*(states[0]-algebraic[56])
    algebraic[58] = constants[119]*(states[0]-algebraic[56])
    algebraic[67] = 1.00000/(1.00000+constants[192]*(exp(((-constants[189]*states[0]*constants[11])/(constants[9]*constants[10]))))+constants[190]*constants[203]*(exp(((-states[0]*constants[11])/(constants[9]*constants[10])))))
    algebraic[68] = (((constants[194]*algebraic[67]*1.00000)/(1.00000+((constants[195]/states[18])**constants[191])))*constants[6])/(constants[6]+constants[196])
    rates[18] = (-(algebraic[57]+algebraic[58]+3.00000*algebraic[68]+3.00000*algebraic[50])*constants[5]*constants[0])/(constants[1]*constants[11])
    algebraic[59] = ((constants[9]*constants[10])/constants[11])*(log((constants[6]/states[27])))
    algebraic[60] = constants[136]*(states[28]**3.00000)*states[29]*(states[0]-algebraic[59])
    algebraic[61] = constants[148]*states[30]*states[31]*(states[0]-algebraic[59])
    algebraic[62] = (((constants[149]*constants[6])/(constants[6]+constants[151]))*(states[0]-algebraic[59]))/(1.00000+(exp((constants[150]*(states[0]-algebraic[59])))))
    algebraic[63] = constants[157]*(states[32]**2.00000)*(states[0]-algebraic[59])
    algebraic[64] = constants[165]*states[33]*states[34]*(states[0]-algebraic[59])
    algebraic[65] = constants[169]*states[35]*constants[170]*(states[0]-algebraic[59])
    algebraic[66] = constants[185]*states[36]*(states[0]-((constants[9]*constants[10])/constants[11])*(log(((0.980000*constants[6]+0.0200000*constants[7])/(0.980000*states[27]+0.0200000*states[18])))))
    rates[27] = (-((algebraic[60]+algebraic[61]+algebraic[62]+algebraic[63]+algebraic[65]+algebraic[64]+algebraic[66])-2.00000*algebraic[68])*constants[5]*constants[0])/(constants[1]*constants[11])
    algebraic[0] = custom_piecewise([greater_equal(VOI , constants[12]) & less_equal(VOI , constants[13]) & less_equal((VOI-constants[12])-(floor(((VOI-constants[12])/constants[14])))*constants[14] , constants[15]), constants[16] , True, 0.000000])
    algebraic[69] = constants[197]/(1.00000+(exp((-(states[0]-constants[198])/constants[199]))))
    algebraic[70] = ((constants[200]*algebraic[69]*states[1])/(states[1]+constants[202]))*(states[0]-constants[201])
    rates[0] = -(algebraic[46]+algebraic[48]+algebraic[50]+algebraic[54]+algebraic[57]+algebraic[58]+algebraic[68]+algebraic[60]+algebraic[61]+algebraic[62]+algebraic[63]+algebraic[64]+algebraic[65]+algebraic[66]+algebraic[70]+algebraic[0])
    return(rates)

def computeAlgebraic(constants, states, voi):
    algebraic = array([[0.0] * len(voi)] * sizeAlgebraic)
    states = array(states)
    voi = array(voi)
    algebraic[1] = 1.00000-(states[10]+states[8]+states[9])
    algebraic[4] = constants[129]*(exp((constants[125]*(states[0]+constants[121]))))
    algebraic[14] = constants[124]*(exp((-constants[135]*(states[0]+constants[132]))))
    algebraic[5] = (constants[131]*(exp((-(states[0]+constants[127])/constants[120]))))/(constants[133]*(exp((-(states[0]+constants[126])/constants[128])))+1.00000)
    algebraic[15] = (constants[122]*(exp(((states[0]+constants[123])/constants[134]))))/(constants[130]*(exp(((states[0]+constants[123])/constants[134])))+1.00000)
    algebraic[6] = 1.00000/(1.00000+(exp((-(states[0]+constants[143])/constants[146]))))
    algebraic[16] = constants[142]*(exp((-constants[145]*states[0])))+constants[140]
    algebraic[7] = 1.00000/(1.00000+(exp(((states[0]+constants[141])/constants[147]))))
    algebraic[17] = constants[144]+constants[138]/(1.00000+(exp(((states[0]+constants[139])/constants[137]))))
    algebraic[8] = (constants[155]*(states[0]+constants[156]))/(1.00000-(exp((-constants[154]*(states[0]+constants[156])))))
    algebraic[18] = constants[153]*(exp((-constants[152]*(states[0]+constants[156]))))
    algebraic[19] = constants[164]*(exp((-constants[158]*states[0])))+constants[159]
    algebraic[20] = constants[162]-constants[160]/(1.00000+(exp(((states[0]+constants[163])/constants[161]))))
    algebraic[21] = constants[168]*(exp((-constants[167]*states[0])))+constants[166]
    algebraic[10] = constants[173]*(exp((constants[176]*states[0])))
    algebraic[23] = constants[183]*(exp((-constants[179]*states[0])))
    algebraic[2] = 1.00000-(states[11]+states[12]+states[13]+states[14]+states[15]+states[16]+states[17])
    algebraic[12] = (constants[60]*(exp(((states[0]+constants[76])/constants[55])))*((1.00000+constants[70]*(exp((-((states[0]+constants[69])**2.00000)/constants[65]))))-constants[63]*(exp((-((states[0]+constants[75])**2.00000)/constants[46])))))/(1.00000+constants[49]*(exp(((states[0]+constants[47])/constants[58]))))
    algebraic[25] = constants[50]*(exp((-(states[0]+constants[54])/constants[66])))
    algebraic[9] = 1.00000-(states[37]+states[38]+states[36]+states[39])
    algebraic[22] = constants[174]*(exp((constants[181]*states[0])))
    algebraic[27] = constants[182]*(exp((-constants[178]*states[0])))
    algebraic[28] = constants[175]*(exp((constants[172]*(states[0]+constants[180]))))
    algebraic[32] = constants[171]*(exp((-constants[184]*(states[0]+constants[177]))))
    algebraic[30] = (constants[80]*states[2])/(constants[81]+states[2])
    algebraic[34] = constants[73]*(1.00000-(exp((-((states[0]+constants[48])**2.00000)/constants[56]))))
    algebraic[29] = (1.00000+(constants[18]*constants[20])/((constants[20]+states[3])**2.00000))**(-1.00000)
    algebraic[33] = constants[29]*(states[8]+states[9])*(states[3]-states[2])*states[5]
    algebraic[36] = (states[4]-states[3])/constants[30]
    algebraic[40] = constants[31]*(states[4]-states[1])
    algebraic[42] = (constants[33]*(states[1]**2.00000))/((constants[34]**2.00000)+(states[1]**2.00000))
    algebraic[3] = 1.00000-(states[19]+states[20]+states[21]+states[24]+states[22]+states[23]+states[25]+states[26])
    algebraic[13] = constants[99]/(constants[110]*(exp((-(states[0]+constants[100])/constants[114])))+constants[92]*(exp((-(states[0]+constants[100])/constants[116]))))
    algebraic[35] = constants[109]*(exp((-(states[0]+constants[96])/constants[93])))
    algebraic[26] = constants[99]/(constants[110]*(exp((-(states[0]+constants[100])/constants[112])))+constants[91]*(exp((-(states[0]+constants[100])/constants[116]))))
    algebraic[37] = constants[107]*(exp((-(states[0]-constants[95])/constants[93])))
    algebraic[41] = constants[105]*(exp((-(states[0]+constants[103])/constants[104])))
    algebraic[43] = constants[101]+constants[115]*(states[0]+constants[103])
    algebraic[31] = constants[99]/(constants[110]*(exp((-(states[0]+constants[100])/constants[113])))+constants[90]*(exp((-(states[0]+constants[100])/constants[116]))))
    algebraic[39] = constants[108]*(exp((-(states[0]-constants[102])/constants[93])))
    algebraic[46] = constants[78]*states[11]*(states[0]-constants[77])
    algebraic[24] = (1.00000+(constants[17]*constants[19])/((constants[19]+states[2])**2.00000))**(-1.00000)
    algebraic[38] = (states[2]-states[1])/constants[32]
    algebraic[45] = 1.00000/(constants[106]*(exp((-(states[0]+constants[103])/constants[111])))+constants[94])
    algebraic[47] = (algebraic[31]*algebraic[45]*algebraic[41])/(algebraic[39]*algebraic[43])
    algebraic[49] = algebraic[45]/constants[97]
    algebraic[51] = algebraic[41]
    algebraic[48] = (constants[82]*(states[1]**2.00000))/((constants[83]**2.00000)+(states[1]**2.00000))
    algebraic[50] = ((((((constants[84]*1.00000)/((constants[85]**3.00000)+(constants[7]**3.00000)))*1.00000)/(constants[86]+constants[8]))*1.00000)/(1.00000+constants[87]*(exp((((constants[88]-1.00000)*states[0]*constants[11])/(constants[9]*constants[10]))))))*((exp(((constants[88]*states[0]*constants[11])/(constants[9]*constants[10]))))*(states[18]**3.00000)*constants[8]-(exp((((constants[88]-1.00000)*states[0]*constants[11])/(constants[9]*constants[10]))))*(constants[7]**3.00000)*states[1])
    algebraic[52] = ((constants[9]*constants[10])/(2.00000*constants[11]))*(log((constants[8]/states[1])))
    algebraic[54] = constants[89]*(states[0]-algebraic[52])
    algebraic[11] = (1.00000+(constants[17]*constants[19])/((constants[19]+states[1])**2.00000))**(-1.00000)
    algebraic[44] = (constants[25]*states[1]*(constants[36]-states[7])+constants[27]*states[1]*(constants[35]-states[6]))-(constants[26]*states[7]+constants[28]*states[6])
    algebraic[53] = algebraic[45]/constants[98]
    algebraic[55] = algebraic[41]/constants[117]
    algebraic[56] = ((constants[9]*constants[10])/constants[11])*(log(((0.900000*constants[7]+0.100000*constants[6])/(0.900000*states[18]+0.100000*states[27]))))
    algebraic[57] = constants[118]*states[19]*(states[0]-algebraic[56])
    algebraic[58] = constants[119]*(states[0]-algebraic[56])
    algebraic[67] = 1.00000/(1.00000+constants[192]*(exp(((-constants[189]*states[0]*constants[11])/(constants[9]*constants[10]))))+constants[190]*constants[203]*(exp(((-states[0]*constants[11])/(constants[9]*constants[10])))))
    algebraic[68] = (((constants[194]*algebraic[67]*1.00000)/(1.00000+((constants[195]/states[18])**constants[191])))*constants[6])/(constants[6]+constants[196])
    algebraic[59] = ((constants[9]*constants[10])/constants[11])*(log((constants[6]/states[27])))
    algebraic[60] = constants[136]*(states[28]**3.00000)*states[29]*(states[0]-algebraic[59])
    algebraic[61] = constants[148]*states[30]*states[31]*(states[0]-algebraic[59])
    algebraic[62] = (((constants[149]*constants[6])/(constants[6]+constants[151]))*(states[0]-algebraic[59]))/(1.00000+(exp((constants[150]*(states[0]-algebraic[59])))))
    algebraic[63] = constants[157]*(states[32]**2.00000)*(states[0]-algebraic[59])
    algebraic[64] = constants[165]*states[33]*states[34]*(states[0]-algebraic[59])
    algebraic[65] = constants[169]*states[35]*constants[170]*(states[0]-algebraic[59])
    algebraic[66] = constants[185]*states[36]*(states[0]-((constants[9]*constants[10])/constants[11])*(log(((0.980000*constants[6]+0.0200000*constants[7])/(0.980000*states[27]+0.0200000*states[18])))))
    algebraic[0] = custom_piecewise([greater_equal(VOI , constants[12]) & less_equal(VOI , constants[13]) & less_equal((VOI-constants[12])-(floor(((VOI-constants[12])/constants[14])))*constants[14] , constants[15]), constants[16] , True, 0.000000])
    algebraic[69] = constants[197]/(1.00000+(exp((-(states[0]-constants[198])/constants[199]))))
    algebraic[70] = ((constants[200]*algebraic[69]*states[1])/(states[1]+constants[202]))*(states[0]-constants[201])
    return algebraic

def custom_piecewise(cases):
    """Compute result of a piecewise function"""
    return select(cases[0::2],cases[1::2])

def solve_model():
    """Solve model with ODE solver"""
    from scipy.integrate import ode
    # Initialise constants and state variables
    (init_states, constants) = initConsts()

    # Set timespan to solve over
    voi = linspace(0, 1000, 500)

    # Construct ODE object to solve
    r = ode(computeRates)
    r.set_integrator('vode', method='bdf', atol=1e-006, rtol=1e-006, max_step=0.1)
    r.set_initial_value(init_states, voi[0])
    r.set_f_params(constants)

    # Solve model
    states = array([[0.0] * len(voi)] * sizeStates)
    states[:,0] = init_states
    for (i,t) in enumerate(voi[1:]):
        if r.successful():
            r.integrate(t)
            states[:,i+1] = r.y
        else:
            break

    # Compute algebraic variables
    algebraic = computeAlgebraic(constants, states, voi)
    return (voi, states, algebraic)

def plot_model(voi, states, algebraic):
    """Plot variables against variable of integration"""
    import pylab
    (legend_states, legend_algebraic, legend_voi, legend_constants) = createLegends()
    pylab.figure(1)
    pylab.plot(voi,vstack((states,algebraic)).T)
    pylab.xlabel(legend_voi)
    pylab.legend(legend_states + legend_algebraic, loc='best')
    pylab.show()

if __name__ == "__main__":
    (voi, states, algebraic) = solve_model()
    plot_model(voi, states, algebraic)
